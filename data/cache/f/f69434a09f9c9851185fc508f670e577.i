a:4827:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"PL/SQL Tutorial";i:1;i:2;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"Originaal asub ";}i:2;i:31;}i:5;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:45:"http://www.tutorialspoint.com/plsql/index.htm";i:1;s:4:"siin";}i:2;i:46;}i:6;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:". ";}i:2;i:100;}i:7;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:102;}i:8;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:102;}i:9;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:184:"PL/SQL is a combination of SQL along with the procedural features of programming languages. It was developed by Oracle Corporation in the early 90's to enhance the capabilities of SQL.";}i:2;i:105;}i:10;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:289;}i:11;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:289;}i:12;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:113:"PL/SQL is one of three key programming languages embedded in the Oracle Database, along with SQL itself and Java.";}i:2;i:291;}i:13;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:404;}i:14;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:404;}i:15;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:124:"This tutorial will give you great understanding on PL/SQL to proceed with Oracle database and other advanced RDBMS concepts.";}i:2;i:406;}i:16;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:530;}i:17;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:533;}i:18;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"Normal forms";i:1;i:3;i:2;i:533;}i:2;i:533;}i:19;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:533;}i:20;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:557;}i:21;a:3:{i:0;s:13:"listitem_open";i:1;a:2:{i:0;i:1;i:1;i:1;}i:2;i:557;}i:22;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:557;}i:23;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" (1) First normal form ";}i:2;i:561;}i:24;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:584;}i:25;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:584;}i:26;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:584;}i:27;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:584;}i:28;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:" each column must contain only one value ";}i:2;i:590;}i:29;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:631;}i:30;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:631;}i:31;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:631;}i:32;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:631;}i:33;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:" no table can have repeating groups of related data";}i:2;i:637;}i:34;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:688;}i:35;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:688;}i:36;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:688;}i:37;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:688;}i:38;a:3:{i:0;s:13:"listitem_open";i:1;a:2:{i:0;i:1;i:1;i:1;}i:2;i:688;}i:39;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:688;}i:40;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" (2) Second normal form ";}i:2;i:692;}i:41;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:716;}i:42;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:716;}i:43;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:716;}i:44;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:716;}i:45;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:" requirements described in (1) ";}i:2;i:722;}i:46;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:753;}i:47;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:753;}i:48;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:753;}i:49;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:753;}i:50;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:" and every column in the table that is not a key must be dependent upon the primary key";}i:2;i:759;}i:51;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:846;}i:52;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:846;}i:53;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:846;}i:54;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:846;}i:55;a:3:{i:0;s:13:"listitem_open";i:1;a:2:{i:0;i:1;i:1;i:1;}i:2;i:846;}i:56;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:846;}i:57;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" Third normal form";}i:2;i:850;}i:58;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:868;}i:59;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:868;}i:60;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:868;}i:61;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:868;}i:62;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:" requirements described in (2)";}i:2;i:874;}i:63;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:904;}i:64;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:904;}i:65;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:904;}i:66;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:904;}i:67;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" and every non-key column is mutually independent.";}i:2;i:910;}i:68;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:960;}i:69;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:960;}i:70;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:960;}i:71;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:960;}i:72;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:960;}i:73;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:960;}i:74;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"Overruling normalization";}i:2;i:962;}i:75;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:986;}i:76;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:986;}i:77;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:986;}i:78;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:986;}i:79;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:272:" As much as ensuring that a database is in 3NF will help guarantee reliability and viability, you won't fully normalize every database with which you work. Before undermining the proper methods, though, understand that doing so may have devastating long-term consequence. ";}i:2;i:990;}i:80;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1262;}i:81;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1262;}i:82;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1262;}i:83;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1262;}i:84;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:535:" The two primary reasons to overrule normalization are convenience and performance. Fewer tables are easier to manipulate and comprehend than more. Further, because of their more intricate nature, normalized databases will most likely be slower for updating, retrieving data from, and modifying. Normalization, in short, is a trade-off between data integrity/ scalability and simplicity/ speed. On the other hand, there are ways to improve your database's performance but few to remedy corrupted data that can result from poor design. ";}i:2;i:1266;}i:85;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1801;}i:86;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1801;}i:87;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:1801;}i:88;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1804;}i:89;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Database optimization";i:1;i:3;i:2;i:1804;}i:2;i:1804;}i:90;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1804;}i:91;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1804;}i:92;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:119:"The performance of your database is primarily dependent upon its structure and indexes. When creating databases, try to";}i:2;i:1837;}i:93;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1956;}i:94;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:1956;}i:95;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1956;}i:96;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1956;}i:97;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" choose the best storage engine; ";}i:2;i:1960;}i:98;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1993;}i:99;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1993;}i:100;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1993;}i:101;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1993;}i:102;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:" use the smallest data type possible for each column; ";}i:2;i:1997;}i:103;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2051;}i:104;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2051;}i:105;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2051;}i:106;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2051;}i:107;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:" define columns as NOT NULL whenever possible; ";}i:2;i:2055;}i:108;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2102;}i:109;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2102;}i:110;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2102;}i:111;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2102;}i:112;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:" use integers as primary keys; ";}i:2;i:2106;}i:113;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2137;}i:114;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2137;}i:115;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2137;}i:116;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2137;}i:117;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:" judicously define indexes, selecting the correct type and applying them to the right column or columns; ";}i:2;i:2141;}i:118;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2246;}i:119;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2246;}i:120;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:2246;}i:121;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:2246;}i:122;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:" limit indexes to certain number of characters, if applicable. ";}i:2;i:2250;}i:123;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:2313;}i:124;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:2313;}i:125;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:2313;}i:126;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2313;}i:127;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:355:"Along with these tips, there are two simple techniques for optimizing tables. One way to improve MySQL's performance is to run an OPTIMIZE command on such tables. This query will rid a table of any unnecessary overhead, thereby speeding any interactions with it. Running this command is particulary beneficial after changing a table via an ALTER command. ";}i:2;i:2315;}i:128;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2671;}i:129;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:28:"OPTIMIZE TABLE //tablename//";}i:2;i:2671;}i:130;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2671;}i:131;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:258:"To improve a query's efficency, it helps to understand how exactly MySQL will run that query. This can be accomplished using the EXPLAIN SQL keyword. Explaining queries is a very advanced topic, so see th MySQL manual or search the Web for more information. ";}i:2;i:2704;}i:132;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2962;}i:133;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2962;}i:134;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:2964;}i:135;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"To show columns";}i:2;i:2966;}i:136;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:2981;}i:137;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:2983;}i:138;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:2985;}i:139;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:30:"show columns from tblcontacts;";}i:2;i:2985;}i:140;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:2985;}i:141;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3019;}i:142;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" To describe a table ";}i:2;i:3021;}i:143;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3042;}i:144;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3044;}i:145;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:23:"describe tblcontracts; ";}i:2;i:3044;}i:146;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3044;}i:147;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:3071;}i:148;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"To explain an action";}i:2;i:3073;}i:149;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:3093;}i:150;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:3095;}i:151;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3096;}i:152;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:159:"  explain 
    select con.zippostcode 
    from tblcontacts con
    join tblcontracts cont on con.contactid = cont.contractclient
    where con.contactid = 48;";}i:2;i:3096;}i:153;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3267;}i:154;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"Audience";i:1;i:3;i:2;i:3267;}i:2;i:3267;}i:155;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3267;}i:156;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3267;}i:157;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:358:"This tutorial is designed for Software Professionals, who are willing to learn PL/SQL Programming Language in simple and easy steps. This tutorial will give you great understanding on PL/SQL Programming concepts, and after completing this tutorial, you will be at intermediate level of expertise from where you can take yourself to higher level of expertise.";}i:2;i:3287;}i:158;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3645;}i:159;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3647;}i:160;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"Prerequisites";i:1;i:3;i:2;i:3647;}i:2;i:3647;}i:161;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:3647;}i:162;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3647;}i:163;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:310:"Before proceeding with this tutorial, you should have a basic understanding of software basic concepts like what is database, source code, text editor and execution of programs, etc. If you already have understanding on SQL and other computer programming language then it will be an added advantage to proceed.";}i:2;i:3672;}i:164;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:3982;}i:165;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:3986;}i:166;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"PL/SQL - Overview";i:1;i:2;i:2;i:3986;}i:2;i:3986;}i:167;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:3986;}i:168;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:3986;}i:169;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:204:"The PL/SQL programming language was developed by Oracle Corporation in the late 1980s as procedural extension language for SQL and the Oracle relational database. Following are notable facts about PL/SQL:";}i:2;i:4017;}i:170;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4222;}i:171;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:4222;}i:172;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4222;}i:173;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4222;}i:174;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:" SQL is a completely portable, high-performance transaction-processing language.";}i:2;i:4226;}i:175;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4306;}i:176;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4306;}i:177;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4306;}i:178;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4306;}i:179;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:" PL/SQL provides a built-in interpreted and ";}i:2;i:4310;}i:180;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:2:"OS";}i:2;i:4354;}i:181;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" independent programming environment.";}i:2;i:4356;}i:182;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4393;}i:183;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4393;}i:184;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4393;}i:185;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4393;}i:186;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:77:" PL/SQL can also directly be called from the command-line SQL*Plus interface.";}i:2;i:4397;}i:187;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4474;}i:188;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4474;}i:189;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4474;}i:190;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4474;}i:191;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:83:" Direct call can also be made from external programming language calls to database.";}i:2;i:4478;}i:192;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4561;}i:193;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4561;}i:194;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4561;}i:195;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4561;}i:196;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:81:" PL/SQL's general syntax is based on that of ADA and Pascal programming language.";}i:2;i:4565;}i:197;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4646;}i:198;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4646;}i:199;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4646;}i:200;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4646;}i:201;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:83:" Apart from Oracle, PL/SQL is available in TimesTen in-memory database and IBM DB2.";}i:2;i:4650;}i:202;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4733;}i:203;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4733;}i:204;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:4733;}i:205;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:4735;}i:206;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"Features of PL/SQL";i:1;i:3;i:2;i:4735;}i:2;i:4735;}i:207;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:4735;}i:208;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:4735;}i:209;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"PL/SQL has the following features:";}i:2;i:4765;}i:210;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:4800;}i:211;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:4800;}i:212;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4800;}i:213;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4800;}i:214;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:" PL/SQL is tightly integrated with SQL.";}i:2;i:4804;}i:215;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4843;}i:216;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4843;}i:217;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4843;}i:218;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4843;}i:219;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:" It offers extensive error checking.";}i:2;i:4847;}i:220;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4883;}i:221;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4883;}i:222;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4883;}i:223;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4883;}i:224;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:" It offers numerous data types.";}i:2;i:4887;}i:225;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4918;}i:226;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4918;}i:227;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4918;}i:228;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4918;}i:229;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:" It offers a variety of programming structures.";}i:2;i:4922;}i:230;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:4969;}i:231;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:4969;}i:232;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:4969;}i:233;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:4969;}i:234;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:" It supports structured programming through functions and procedures.";}i:2;i:4973;}i:235;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5042;}i:236;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5042;}i:237;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5042;}i:238;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5042;}i:239;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:" It supports object-oriented programming.";}i:2;i:5046;}i:240;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5087;}i:241;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5087;}i:242;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5087;}i:243;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5087;}i:244;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:" It supports developing web applications and server pages.";}i:2;i:5091;}i:245;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5149;}i:246;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5149;}i:247;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:5149;}i:248;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:5153;}i:249;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"Advantages of PL/SQL";i:1;i:3;i:2;i:5153;}i:2;i:5153;}i:250;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:5153;}i:251;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:5153;}i:252;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:"PL/SQL has the following advantages:";}i:2;i:5185;}i:253;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:5221;}i:254;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:5221;}i:255;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5221;}i:256;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5221;}i:257;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:274:" SQL is the standard database language and PL/SQL is strongly integrated with SQL. PL/SQL supports both static and dynamic SQL. Static SQL supports DML operations and transaction control from PL/SQL block. Dynamic SQL is SQL allows embedding DDL statements in PL/SQL blocks.";}i:2;i:5225;}i:258;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5499;}i:259;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5499;}i:260;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5499;}i:261;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5499;}i:262;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:162:" PL/SQL allows sending an entire block of statements to the database at one time. This reduces network traffic and provides high performance for the applications.";}i:2;i:5503;}i:263;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5665;}i:264;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5665;}i:265;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5665;}i:266;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5665;}i:267;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:" PL/SQL gives high productivity to programmers as it can query, transform, and update data in a database.";}i:2;i:5669;}i:268;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5774;}i:269;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5774;}i:270;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5774;}i:271;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5774;}i:272;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:150:" PL/SQL saves time on design and debugging by strong features, such as exception handling, encapsulation, data hiding, and object-oriented data types.";}i:2;i:5778;}i:273;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5928;}i:274;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5928;}i:275;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5928;}i:276;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5928;}i:277;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:" Applications written in PL/SQL are fully portable.";}i:2;i:5932;}i:278;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:5983;}i:279;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:5983;}i:280;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:5983;}i:281;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:5983;}i:282;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" PL/SQL provides high security level.";}i:2;i:5987;}i:283;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6024;}i:284;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6024;}i:285;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6024;}i:286;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6024;}i:287;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:" PL/SQL provides access to predefined SQL packages.";}i:2;i:6028;}i:288;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6079;}i:289;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6079;}i:290;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6079;}i:291;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6079;}i:292;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:" PL/SQL provides support for Object-Oriented Programming.";}i:2;i:6083;}i:293;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6140;}i:294;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6140;}i:295;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6140;}i:296;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6140;}i:297;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:" PL/SQL provides support for Developing Web Applications and Server Pages.";}i:2;i:6144;}i:298;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6218;}i:299;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6218;}i:300;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:6218;}i:301;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:6219;}i:302;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"PL/SQL - Basic Syntax";i:1;i:2;i:2;i:6219;}i:2;i:6219;}i:303;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:6219;}i:304;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:6219;}i:305;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:158:"PL/SQL is a block-structured language, meaning that PL/SQL programs are divided and written in logical blocks of code. Each block consists of three sub-parts:";}i:2;i:6254;}i:306;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:6413;}i:307;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:6413;}i:308;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6413;}i:309;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6413;}i:310;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:6417;}i:311;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:6418;}i:312;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"Declarations";}i:2;i:6420;}i:313;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:6432;}i:314;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:" - This section starts with the keyword ";}i:2;i:6434;}i:315;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:6474;}i:316;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"DECLARE";}i:2;i:6476;}i:317;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:6483;}i:318;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:122:". It is an optional section and defines all variables, cursors, subprograms, and other elements to be used in the program.";}i:2;i:6485;}i:319;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6607;}i:320;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6607;}i:321;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6607;}i:322;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6607;}i:323;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:6611;}i:324;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:6612;}i:325;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"Executable Commands";}i:2;i:6614;}i:326;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:6633;}i:327;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:" - This section is enclosed between the keywords ";}i:2;i:6635;}i:328;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:6684;}i:329;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"BEGIN";}i:2;i:6686;}i:330;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:6691;}i:331;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:6693;}i:332;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:6698;}i:333;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"END";}i:2;i:6700;}i:334;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:6703;}i:335;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:226:" and it is a mandatory section. It consists of the executable PL/SQL statements of the program. It should have at least one executable line of code, which may be just a NULL command to indicate that nothing should be executed.";}i:2;i:6705;}i:336;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:6931;}i:337;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:6931;}i:338;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:6931;}i:339;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:6931;}i:340;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:6935;}i:341;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:6936;}i:342;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"Exception handling";}i:2;i:6938;}i:343;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:6956;}i:344;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:" - This section starts with the keyword ";}i:2;i:6958;}i:345;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:6998;}i:346;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"EXCEPTION";}i:2;i:7000;}i:347;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:7009;}i:348;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:". This section is again optional and contains exception(s) that handle errors in the program.";}i:2;i:7011;}i:349;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:7104;}i:350;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:7104;}i:351;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:7104;}i:352;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7104;}i:353;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:"Every PL/SQL statement ends with a semicolon ";}i:2;i:7106;}i:354;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:7151;}i:355;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"(;)";}i:2;i:7153;}i:356;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:7156;}i:357;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:". PL/SQL blocks can be nested within other PL/SQL blocks using ";}i:2;i:7158;}i:358;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:7221;}i:359;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:"BEGIN";}i:2;i:7223;}i:360;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:7228;}i:361;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:7230;}i:362;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:7235;}i:363;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"END";}i:2;i:7237;}i:364;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:7240;}i:365;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:". Here is the basic structure of a PL/SQL block:";}i:2;i:7242;}i:366;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7291;}i:367;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:105:"DECLARE
   <declarations section>
BEGIN
   <executable command(s)>
EXCEPTION
   <exception handling>
END;";}i:2;i:7291;}i:368;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7413;}i:369;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"The "Hello World!" example:";i:1;i:3;i:2;i:7413;}i:2;i:7413;}i:370;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:7413;}i:371;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:99:"DECLARE
   message  varchar2(20):= 'Hello, World!';
BEGIN
   dbms_output.put_line(message);
END;
\
";}i:2;i:7451;}i:372;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7451;}i:373;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"The ";}i:2;i:7566;}i:374;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:7570;}i:375;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"end;";}i:2;i:7572;}i:376;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:7576;}i:377;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:261:" line signals the end of the PL/SQL block. To run the code from SQL command line, you may need to type / at the beginning of the first blank line after the last line of the code. When the above code is executed at SQL prompt, it produces the following result:  ";}i:2;i:7578;}i:378;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:7840;}i:379;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:11:"Hello World";}i:2;i:7840;}i:380;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:40:"PL/SQL procedure successfully completed.";}i:2;i:7855;}i:381;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:7901;}i:382;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"The PL/SQL Identifiers";i:1;i:3;i:2;i:7901;}i:2;i:7901;}i:383;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:7901;}i:384;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:7901;}i:385;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:261:"PL/SQL identifiers are constants, variables, exceptions, procedures, cursors, and reserved words. The identifiers consist of a letter optionally followed by more letters, numerals, dollar signs, underscores, and number signs and should not exceed 30 characters.";}i:2;i:7935;}i:386;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8196;}i:387;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8196;}i:388;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:"By default, identifiers are not case-sensitive. So you can use ";}i:2;i:8198;}i:389;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8261;}i:390;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"integer";}i:2;i:8263;}i:391;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8270;}i:392;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:8272;}i:393;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:8276;}i:394;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"INTEGER";}i:2;i:8278;}i:395;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:8285;}i:396;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:82:" to represent a numeric value. You cannot use a reserved keyword as an identifier.";}i:2;i:8287;}i:397;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8369;}i:398;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:8371;}i:399;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"The PL/SQL Delimiters";i:1;i:3;i:2;i:8371;}i:2;i:8371;}i:400;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:8371;}i:401;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:8371;}i:402;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:"A delimiter is a symbol with a special meaning. Following is the list of delimiters in PL/SQL:";}i:2;i:8404;}i:403;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:8499;}i:404;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:2;i:1;i:22;i:2;i:8500;}i:2;i:8499;}i:405;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:8499;}i:406;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:8499;}i:407;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:8499;}i:408;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" Delimiter      ";}i:2;i:8501;}i:409;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:8517;}i:410;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:8517;}i:411;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" Description       ";}i:2;i:8518;}i:412;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:8537;}i:413;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:8539;}i:414;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:8539;}i:415;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:8539;}i:416;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:8539;}i:417;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" +, -, *, /    ";}i:2;i:8541;}i:418;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8556;}i:419;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:8556;}i:420;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:" Addition, subtraction/negation, multiplication, division  ";}i:2;i:8557;}i:421;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8616;}i:422;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:8618;}i:423;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:8618;}i:424;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:8618;}i:425;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" %  ";}i:2;i:8620;}i:426;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8624;}i:427;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:8624;}i:428;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" Attribute indicator  ";}i:2;i:8625;}i:429;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8647;}i:430;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:8648;}i:431;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:8648;}i:432;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:8648;}i:433;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" '  ";}i:2;i:8650;}i:434;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8654;}i:435;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:8654;}i:436;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:" Character string delimiter ";}i:2;i:8655;}i:437;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8683;}i:438;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:8684;}i:439;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:8684;}i:440;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:8684;}i:441;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" .  ";}i:2;i:8686;}i:442;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8690;}i:443;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:8690;}i:444;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" Component selector  ";}i:2;i:8691;}i:445;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8712;}i:446;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:8713;}i:447;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:8713;}i:448;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:8713;}i:449;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" (,)  ";}i:2;i:8715;}i:450;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8721;}i:451;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:8721;}i:452;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:" Expression or list delimiter  ";}i:2;i:8722;}i:453;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8753;}i:454;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:8754;}i:455;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:8754;}i:456;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:8754;}i:457;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" :  ";}i:2;i:8756;}i:458;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8760;}i:459;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:8760;}i:460;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" Host variable indicator  ";}i:2;i:8761;}i:461;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8787;}i:462;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:8788;}i:463;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:8788;}i:464;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:8788;}i:465;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" ,  ";}i:2;i:8790;}i:466;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8794;}i:467;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:8794;}i:468;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" Item sepparator  ";}i:2;i:8795;}i:469;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8813;}i:470;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:8814;}i:471;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:8814;}i:472;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:8814;}i:473;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:8816;}i:474;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:8817;}i:475;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"  ";}i:2;i:8818;}i:476;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8820;}i:477;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:8820;}i:478;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:" Quoted 	identifier delimiter  ";}i:2;i:8821;}i:479;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8852;}i:480;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:8853;}i:481;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:8853;}i:482;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:8853;}i:483;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" =  ";}i:2;i:8855;}i:484;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8859;}i:485;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:8859;}i:486;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" Relational operator  ";}i:2;i:8860;}i:487;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8882;}i:488;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:8883;}i:489;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:8883;}i:490;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:8883;}i:491;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" @  ";}i:2;i:8885;}i:492;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8889;}i:493;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:8889;}i:494;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" Remote access indicator  ";}i:2;i:8890;}i:495;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8916;}i:496;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:8917;}i:497;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:8917;}i:498;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:8917;}i:499;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" ;  ";}i:2;i:8919;}i:500;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8923;}i:501;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:8923;}i:502;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" Statement terminator  ";}i:2;i:8924;}i:503;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8947;}i:504;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:8948;}i:505;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:8948;}i:506;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:8948;}i:507;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" :=  ";}i:2;i:8950;}i:508;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8955;}i:509;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:8955;}i:510;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" Assignment operator  ";}i:2;i:8956;}i:511;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8978;}i:512;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:8979;}i:513;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:8979;}i:514;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:8979;}i:515;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:8981;}i:516;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"=>";}i:2;i:8982;}i:517;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:8984;}i:518;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:8985;}i:519;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:8985;}i:520;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" Association operator  ";}i:2;i:8986;}i:521;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9009;}i:522;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:9010;}i:523;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:9010;}i:524;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:9010;}i:525;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:9012;}i:526;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:9013;}i:527;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"||";}i:2;i:9015;}i:528;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:9017;}i:529;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:9019;}i:530;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9020;}i:531;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:9020;}i:532;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:" Concatenation operator  ";}i:2;i:9021;}i:533;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9046;}i:534;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:9047;}i:535;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:9047;}i:536;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:9047;}i:537;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:9049;}i:538;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:9050;}i:539;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"*";}i:2;i:9052;}i:540;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:9053;}i:541;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:9055;}i:542;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"*";}i:2;i:9057;}i:543;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:9058;}i:544;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"  ";}i:2;i:9060;}i:545;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9062;}i:546;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:9062;}i:547;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" Exponentiation operator  ";}i:2;i:9063;}i:548;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9089;}i:549;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:9090;}i:550;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:9090;}i:551;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:9090;}i:552;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:9092;}i:553;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"<<";}i:2;i:9093;}i:554;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:", ";}i:2;i:9095;}i:555;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:">>";}i:2;i:9097;}i:556;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"  ";}i:2;i:9099;}i:557;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9101;}i:558;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:9101;}i:559;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" Label delimiter (begin and end)  ";}i:2;i:9102;}i:560;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9136;}i:561;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:9137;}i:562;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:9137;}i:563;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:9137;}i:564;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" /*, */  ";}i:2;i:9139;}i:565;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9148;}i:566;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:5:"right";i:2;i:1;}i:2;i:9148;}i:567;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:"  Multi-line comment delimiter (begin and end) ";}i:2;i:9149;}i:568;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9196;}i:569;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:9197;}i:570;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:9197;}i:571;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:9197;}i:572;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:9199;}i:573;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:9200;}i:574;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:9202;}i:575;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9203;}i:576;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:9203;}i:577;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" Single-line comment indicator  ";}i:2;i:9204;}i:578;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9236;}i:579;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:9237;}i:580;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:9237;}i:581;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:9237;}i:582;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" .. ";}i:2;i:9239;}i:583;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9243;}i:584;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:9243;}i:585;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" Range operator  ";}i:2;i:9244;}i:586;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9261;}i:587;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:9262;}i:588;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:9262;}i:589;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:9262;}i:590;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" <, >, ";}i:2;i:9264;}i:591;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"<=";}i:2;i:9271;}i:592;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:", >=  ";}i:2;i:9273;}i:593;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9279;}i:594;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:9279;}i:595;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" Relational operators  ";}i:2;i:9280;}i:596;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9303;}i:597;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:9304;}i:598;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:9304;}i:599;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:9304;}i:600;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" <>, '=, ~=, ";}i:2;i:9306;}i:601;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:9319;}i:602;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"^=";}i:2;i:9321;}i:603;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:9323;}i:604;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"  ";}i:2;i:9325;}i:605;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9327;}i:606;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:9327;}i:607;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" Different versions of NOT EQUAL  ";}i:2;i:9328;}i:608;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:9362;}i:609;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:9363;}i:610;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:9363;}i:2;i:9363;}i:611;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:9366;}i:612;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"The PL/SQL Comments";i:1;i:3;i:2;i:9366;}i:2;i:9366;}i:613;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:9366;}i:614;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9366;}i:615;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:199:"Program comments are explanatory statements that you can include in the PL/SQL code that you write and helps anyone reading its source code. All programming languages allow for some form of comments.";}i:2;i:9397;}i:616;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9596;}i:617;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9596;}i:618;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:190:"The PL/SQL supports single-line and multi-line comments. All characters available inside any comment are ignored by PL/SQL compiler. The PL/SQL single-line comments start with the delimiter ";}i:2;i:9598;}i:619;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"--";}i:2;i:9788;}i:620;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:" (double hyphen) and multi-line comments are enclosed by /* and */.";}i:2;i:9790;}i:621;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:9858;}i:622;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:176:"DECLARE
   -- variable declaration
   message  varchar2(20):= 'Hello, World!';
BEGIN
   /*
    *  PL/SQL executable statement(s)
    */
   dbms_output.put_line(message);
END;
/";}i:2;i:9858;}i:623;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:9858;}i:624;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:10058;}i:625;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10139;}i:626;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:11:"Hello World";}i:2;i:10139;}i:627;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:40:"PL/SQL procedure successfully completed.";}i:2;i:10154;}i:628;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10200;}i:629;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"PL/SQL Program Units";i:1;i:3;i:2;i:10200;}i:2;i:10200;}i:630;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:10200;}i:631;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10200;}i:632;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"A PL/SQL unit is any one of the following:";}i:2;i:10232;}i:633;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10274;}i:634;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:10274;}i:635;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10274;}i:636;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10274;}i:637;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" PL/SQL block";}i:2;i:10278;}i:638;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:10291;}i:639;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:10291;}i:640;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10291;}i:641;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10291;}i:642;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" Function";}i:2;i:10295;}i:643;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:10304;}i:644;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:10304;}i:645;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10304;}i:646;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10304;}i:647;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" Package";}i:2;i:10308;}i:648;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:10316;}i:649;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:10316;}i:650;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10316;}i:651;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10316;}i:652;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" Package body";}i:2;i:10320;}i:653;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:10333;}i:654;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:10333;}i:655;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10333;}i:656;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10333;}i:657;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" Procedure";}i:2;i:10337;}i:658;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:10347;}i:659;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:10347;}i:660;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10347;}i:661;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10347;}i:662;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" Trigger";}i:2;i:10351;}i:663;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:10359;}i:664;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:10359;}i:665;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10359;}i:666;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10359;}i:667;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" Type";}i:2;i:10363;}i:668;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:10368;}i:669;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:10368;}i:670;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:10368;}i:671;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:10368;}i:672;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" Type body";}i:2;i:10372;}i:673;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:10382;}i:674;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:10382;}i:675;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:10382;}i:676;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:10386;}i:677;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"PL/SQL - Data Types";i:1;i:2;i:2;i:10386;}i:2;i:10386;}i:678;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:10386;}i:679;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:10386;}i:680;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:182:"PL/SQL variables, constants and parameters must have a valid data type, which specifies a storage format, constraints, and valid range of values. This tutorial will take you through ";}i:2;i:10419;}i:681;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:10601;}i:682;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"SCALAR";}i:2;i:10603;}i:683;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:10609;}i:684;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:10611;}i:685;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:10616;}i:686;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"LOB";}i:2;i:10618;}i:687;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:10621;}i:688;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:" data types available in PL/SQL and other two data types will be covered in other chapters.";}i:2;i:10623;}i:689;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:10715;}i:690;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:2;i:1;i:5;i:2;i:10716;}i:2;i:10715;}i:691;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:10715;}i:692;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:10715;}i:693;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:10715;}i:694;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" Category      ";}i:2;i:10717;}i:695;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:10732;}i:696;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:10732;}i:697;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" Description       ";}i:2;i:10733;}i:698;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:10752;}i:699;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:10754;}i:700;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:10754;}i:701;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:10754;}i:702;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:10754;}i:703;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" Scalar   ";}i:2;i:10756;}i:704;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:10766;}i:705;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:10766;}i:706;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:81:" Single values with no internal components, such as a NUMBER, DATE, or BOOLEAN.  ";}i:2;i:10767;}i:707;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:10848;}i:708;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:10850;}i:709;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:10850;}i:710;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:10850;}i:711;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" Large Object (LOB)  ";}i:2;i:10852;}i:712;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:10873;}i:713;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:10873;}i:714;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:142:" Pointers to large objects that are stored separately from other data items, such as text, graphic images, video clips, and sound waveforms.  ";}i:2;i:10874;}i:715;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11016;}i:716;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:11017;}i:717;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:11017;}i:718;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:11017;}i:719;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" Composite  ";}i:2;i:11019;}i:720;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11031;}i:721;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:11031;}i:722;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:116:" Data items that have internal components that can be accessed individually. For example, collections and records.  ";}i:2;i:11032;}i:723;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11148;}i:724;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:11149;}i:725;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:11149;}i:726;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:11149;}i:727;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" Reference  ";}i:2;i:11151;}i:728;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11163;}i:729;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:11163;}i:730;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" Pointers to other data items.  ";}i:2;i:11164;}i:731;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11196;}i:732;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:11198;}i:733;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:11198;}i:2;i:11198;}i:734;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:11200;}i:735;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:37:"PL/SQL Scalar Data Types and Subtypes";i:1;i:3;i:2;i:11200;}i:2;i:11200;}i:736;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:11200;}i:737;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11200;}i:738;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:"PL/SQL Scalar Data Types and Subtypes come under the following categories:";}i:2;i:11249;}i:739;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11324;}i:740;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:2;i:1;i:5;i:2;i:11325;}i:2;i:11324;}i:741;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:11324;}i:742;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:11324;}i:743;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:11324;}i:744;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" Data type  ";}i:2;i:11326;}i:745;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:11338;}i:746;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:11338;}i:747;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" Description  ";}i:2;i:11339;}i:748;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:11353;}i:749;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:11354;}i:750;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:11354;}i:751;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:11354;}i:752;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:11354;}i:753;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" Numeric  ";}i:2;i:11356;}i:754;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11366;}i:755;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:11366;}i:756;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:" Numeric values on which arithmetic operations are performed.  ";}i:2;i:11367;}i:757;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11430;}i:758;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:11431;}i:759;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:11431;}i:760;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:11431;}i:761;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" Character  ";}i:2;i:11433;}i:762;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11445;}i:763;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:11445;}i:764;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:81:" Alphanumeric values that represent single characters or strings of characters.  ";}i:2;i:11446;}i:765;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11527;}i:766;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:11528;}i:767;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:11528;}i:768;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:11528;}i:769;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" Boolean  ";}i:2;i:11530;}i:770;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11540;}i:771;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:11540;}i:772;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:" Logical values on which logical operations are performed.  ";}i:2;i:11541;}i:773;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11601;}i:774;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:11602;}i:775;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:11602;}i:776;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:11602;}i:777;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" Datetime  ";}i:2;i:11604;}i:778;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11615;}i:779;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:11615;}i:780;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" Dates and times.  ";}i:2;i:11616;}i:781;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:11635;}i:782;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:11636;}i:783;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:11636;}i:2;i:11636;}i:784;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11636;}i:785;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:287:"PL/SQL provides subtypes of data types. For example, the data type NUMBER has a subtype called INTEGER. You can use subtypes in your PL/SQL program to make the data types compatible with data types in other programs while embedding PL/SQL code in another program, such as a Java program.";}i:2;i:11638;}i:786;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:11925;}i:787;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:11928;}i:788;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:38:"PL/SQL Numeric Data Types and Subtypes";i:1;i:3;i:2;i:11928;}i:2;i:11928;}i:789;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:11928;}i:790;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:11928;}i:791;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:85:"Following is the detail of PL/SQL pre-defined numeric data types and their sub-types:";}i:2;i:11978;}i:792;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:12064;}i:793;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:12064;}i:794;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:12064;}i:795;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:12064;}i:796;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:98:" PLS_INTEGER		Signed integer in range -2,147,483,648 through 2,147,483,647, represented in 32 bits";}i:2;i:12068;}i:797;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12166;}i:798;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12166;}i:799;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:12166;}i:800;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:12166;}i:801;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:100:" BINARY_INTEGER	Signed integer in range -2,147,483,648 through 2,147,483,647, represented in 32 bits";}i:2;i:12170;}i:802;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12270;}i:803;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12270;}i:804;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:12270;}i:805;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:12270;}i:806;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:" BINARY_FLOAT	Single-precision IEEE 754-format floating-point number";}i:2;i:12274;}i:807;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12342;}i:808;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12342;}i:809;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:12342;}i:810;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:12342;}i:811;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:" BINARY_DOUBLE	Double-precision IEEE 754-format floating-point number";}i:2;i:12346;}i:812;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12415;}i:813;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12415;}i:814;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:12415;}i:815;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:12415;}i:816;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:165:" NUMBER(prec, scale)	Fixed-point or floating-point number with absolute value in range 1E-130 to (but not including) 1.0E126. A NUMBER variable can also represent 0.";}i:2;i:12419;}i:817;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12584;}i:818;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12584;}i:819;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:12584;}i:820;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:12584;}i:821;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:" DEC(prec, scale)	ANSI specific fixed-point type with maximum precision of 38 decimal digits.";}i:2;i:12588;}i:822;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12681;}i:823;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12681;}i:824;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:12681;}i:825;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:12681;}i:826;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:" DECIMAL(prec, scale)	IBM specific fixed-point type with maximum precision of 38 decimal digits.";}i:2;i:12685;}i:827;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12781;}i:828;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12781;}i:829;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:12781;}i:830;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:12781;}i:831;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:" NUMERIC(pre, secale)	Floating type with maximum precision of 38 decimal digits.";}i:2;i:12785;}i:832;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12865;}i:833;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12865;}i:834;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:12865;}i:835;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:12865;}i:836;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:129:" DOUBLE PRECISION	ANSI specific floating-point type with maximum precision of 126 binary digits (approximately 38 decimal digits)";}i:2;i:12869;}i:837;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:12998;}i:838;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:12998;}i:839;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:12998;}i:840;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:12998;}i:841;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:126:" FLOAT	ANSI and IBM specific floating-point type with maximum precision of 126 binary digits (approximately 38 decimal digits)";}i:2;i:13002;}i:842;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:13128;}i:843;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:13128;}i:844;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:13128;}i:845;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:13128;}i:846;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:" INT	ANSI specific integer type with maximum precision of 38 decimal digits";}i:2;i:13132;}i:847;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:13207;}i:848;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:13207;}i:849;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:13207;}i:850;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:13207;}i:851;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:" INTEGER	ANSI and IBM specific integer type with maximum precision of 38 decimal digits";}i:2;i:13211;}i:852;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:13298;}i:853;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:13298;}i:854;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:13298;}i:855;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:13298;}i:856;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:" SMALLINT	ANSI and IBM specific integer type with maximum precision of 38 decimal digits";}i:2;i:13302;}i:857;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:13390;}i:858;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:13390;}i:859;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:13390;}i:860;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:13390;}i:861;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:102:" REAL	Floating-point type with maximum precision of 63 binary digits (approximately 18 decimal digits)";}i:2;i:13394;}i:862;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:13496;}i:863;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:13496;}i:864;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:13496;}i:865;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13496;}i:866;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:"Following is a valid declaration:";}i:2;i:13498;}i:867;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13532;}i:868;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:105:"  DECLARE
     num1 INTEGER;
     num2 REAL;
     num3 DOUBLE PRECISION;
  BEGIN
     null;
  END;
  /
  ";}i:2;i:13532;}i:869;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:13657;}i:870;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:40:"PL/SQL Character Data Types and Subtypes";i:1;i:3;i:2;i:13657;}i:2;i:13657;}i:871;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:13657;}i:872;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:13657;}i:873;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"Following is the detail of PL/SQL pre-defined character data types and their sub-types:";}i:2;i:13709;}i:874;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:13797;}i:875;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:13797;}i:876;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:13797;}i:877;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:13797;}i:878;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:" CHAR	Fixed-length character string with maximum size of 32,767 bytes";}i:2;i:13801;}i:879;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:13870;}i:880;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:13870;}i:881;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:13870;}i:882;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:13870;}i:883;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:" VARCHAR2	Variable-length character string with maximum size of 32,767 bytes";}i:2;i:13874;}i:884;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:13950;}i:885;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:13950;}i:886;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:13950;}i:887;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:13950;}i:888;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:103:" RAW	Variable-length binary or byte string with maximum size of 32,767 bytes, not interpreted by PL/SQL";}i:2;i:13954;}i:889;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:14057;}i:890;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:14057;}i:891;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:14057;}i:892;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:14057;}i:893;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:79:" NCHAR	Fixed-length national character string with maximum size of 32,767 bytes";}i:2;i:14061;}i:894;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:14140;}i:895;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:14140;}i:896;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:14140;}i:897;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:14140;}i:898;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:86:" NVARCHAR2	Variable-length national character string with maximum size of 32,767 bytes";}i:2;i:14144;}i:899;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:14230;}i:900;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:14230;}i:901;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:14230;}i:902;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:14230;}i:903;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:" LONG	Variable-length character string with maximum size of 32,760 bytes";}i:2;i:14234;}i:904;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:14306;}i:905;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:14306;}i:906;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:14306;}i:907;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:14306;}i:908;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:108:" LONG RAW	Variable-length binary or byte string with maximum size of 32,760 bytes, not interpreted by PL/SQL";}i:2;i:14310;}i:909;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:14418;}i:910;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:14418;}i:911;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:14418;}i:912;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:14418;}i:913;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:" ROWID	Physical row identifier, the address of a row in an ordinary table";}i:2;i:14422;}i:914;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:14495;}i:915;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:14495;}i:916;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:14495;}i:917;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:14495;}i:918;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:79:" UROWID	Universal row identifier (physical, logical, or foreign row identifier)";}i:2;i:14499;}i:919;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:14578;}i:920;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:14578;}i:921;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:14578;}i:922;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:14580;}i:923;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"PL/SQL Boolean Data Types";i:1;i:3;i:2;i:14580;}i:2;i:14580;}i:924;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:14580;}i:925;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14580;}i:926;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"The ";}i:2;i:14617;}i:927;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:14621;}i:928;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"BOOLEAN";}i:2;i:14623;}i:929;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:14630;}i:930;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:146:" data type stores logical values that are used in logical operations. The logical values are the Boolean values TRUE and FALSE and the value NULL.";}i:2;i:14632;}i:931;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14778;}i:932;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14778;}i:933;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:97:"However, SQL has no data type equivalent to BOOLEAN. Therefore, Boolean values cannot be used in:";}i:2;i:14780;}i:934;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:14878;}i:935;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:14878;}i:936;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:14878;}i:937;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:14878;}i:938;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" SQL statements";}i:2;i:14882;}i:939;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:14897;}i:940;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:14897;}i:941;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:14897;}i:942;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:14897;}i:943;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:" Built-in SQL functions (such as TO_CHAR)";}i:2;i:14901;}i:944;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:14942;}i:945;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:14942;}i:946;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:14942;}i:947;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:14942;}i:948;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:" PL/SQL functions invoked from SQL statements";}i:2;i:14946;}i:949;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:14991;}i:950;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:14991;}i:951;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:14991;}i:952;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:14993;}i:953;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:34:"PL/SQL Datetime and Interval Types";i:1;i:3;i:2;i:14993;}i:2;i:14993;}i:954;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:14993;}i:955;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:14993;}i:956;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"The ";}i:2;i:15039;}i:957;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:15043;}i:958;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"DATE";}i:2;i:15045;}i:959;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:15049;}i:960;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:166:" datatype to store fixed-length datetimes, which include the time of day in seconds since midnight. Valid dates range from January 1, 4712 BC to December 31, 9999 AD.";}i:2;i:15051;}i:961;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15217;}i:962;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15217;}i:963;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:289:"The default date format is set by the Oracle initialization parameter NLS_DATE_FORMAT. For example, the default might be 'DD-MON-YY', which includes a two-digit number for the day of the month, an abbreviation of the month name, and the last two digits of the year, for example, 01-OCT-12.";}i:2;i:15219;}i:964;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15508;}i:965;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15508;}i:966;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:134:"Each DATE includes the century, year, month, day, hour, minute, and second. The following table shows the valid values for each field:";}i:2;i:15510;}i:967;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15644;}i:968;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:15644;}i:969;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:"^ Field Name  ^ Valid Datetime values  ^ Valid interval values  ^";}i:2;i:15650;}i:970;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:15715;}i:971;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:3;i:1;i:10;i:2;i:15716;}i:2;i:15715;}i:972;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:15715;}i:973;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:15715;}i:974;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" YEAR  ";}i:2;i:15717;}i:975;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:15724;}i:976;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:15724;}i:977;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:" -4712 to 9999 (excluding year 0)  ";}i:2;i:15725;}i:978;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:15760;}i:979;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:15760;}i:980;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" Any nonzero integer  ";}i:2;i:15761;}i:981;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:15783;}i:982;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:15784;}i:983;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:15784;}i:984;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:15784;}i:985;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" MONTH  ";}i:2;i:15786;}i:986;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:15794;}i:987;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:15794;}i:988;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" 01 to 12  ";}i:2;i:15795;}i:989;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:15806;}i:990;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:15806;}i:991;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" 0 to 11  ";}i:2;i:15807;}i:992;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:15817;}i:993;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:15818;}i:994;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:15818;}i:995;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:15818;}i:996;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" DAY  ";}i:2;i:15820;}i:997;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:15826;}i:998;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:15826;}i:999;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:108:" 01 to 31 (limited by the values of MONTH and YEAR, according to the rules of the calendar for the locale)  ";}i:2;i:15827;}i:1000;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:15935;}i:1001;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:15935;}i:1002;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" Any nonzero integer  ";}i:2;i:15936;}i:1003;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:15958;}i:1004;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:15959;}i:1005;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:15959;}i:1006;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:15959;}i:1007;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" HOUR  ";}i:2;i:15961;}i:1008;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:15968;}i:1009;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:15968;}i:1010;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" 00 to 23  ";}i:2;i:15969;}i:1011;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:15980;}i:1012;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:15980;}i:1013;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" 0 to 23  ";}i:2;i:15981;}i:1014;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:15991;}i:1015;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:15992;}i:1016;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:15992;}i:1017;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:15992;}i:1018;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" MINUTE  ";}i:2;i:15994;}i:1019;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16003;}i:1020;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:16003;}i:1021;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" 00 to 59  ";}i:2;i:16004;}i:1022;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16015;}i:1023;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:16015;}i:1024;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" 0 to 59  ";}i:2;i:16016;}i:1025;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16026;}i:1026;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:16027;}i:1027;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:16027;}i:1028;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:16027;}i:1029;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" SECOND  ";}i:2;i:16029;}i:1030;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16038;}i:1031;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:16038;}i:1032;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:" 00 to 59.9(n), where 9(n) is the precision of time fractional seconds  ";}i:2;i:16039;}i:1033;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16111;}i:1034;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:16111;}i:1035;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:" 0 to 59.9(n), where 9(n) is the precision of interval fractional seconds  ";}i:2;i:16112;}i:1036;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16187;}i:1037;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:16188;}i:1038;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:16188;}i:1039;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:16188;}i:1040;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" TIMEZONE_HOUR  ";}i:2;i:16190;}i:1041;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16206;}i:1042;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:16206;}i:1043;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:" -12 to 14 (range accommodates daylight savings time changes)	 ";}i:2;i:16207;}i:1044;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16270;}i:1045;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:16270;}i:1046;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" Not applicable  ";}i:2;i:16271;}i:1047;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16288;}i:1048;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:16289;}i:1049;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:16289;}i:1050;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:16289;}i:1051;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" TIMEZONE_MINUTE  ";}i:2;i:16291;}i:1052;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16309;}i:1053;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:16309;}i:1054;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" 00 to 59  ";}i:2;i:16310;}i:1055;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16321;}i:1056;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:16321;}i:1057;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" Not applicable  ";}i:2;i:16322;}i:1058;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16339;}i:1059;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:16340;}i:1060;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:16340;}i:1061;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:16340;}i:1062;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" TIMEZONE_REGION  ";}i:2;i:16342;}i:1063;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16360;}i:1064;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:16360;}i:1065;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:" Found in the dynamic performance view V$TIMEZONE_NAMES  ";}i:2;i:16361;}i:1066;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16418;}i:1067;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:16418;}i:1068;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" Not applicable  ";}i:2;i:16419;}i:1069;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16436;}i:1070;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:16437;}i:1071;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:16437;}i:1072;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:16437;}i:1073;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" TIMEZONE_ABBR  ";}i:2;i:16439;}i:1074;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16455;}i:1075;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:16455;}i:1076;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:" Found in the dynamic performance view V$TIMEZONE_NAMES  ";}i:2;i:16456;}i:1077;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16513;}i:1078;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:16513;}i:1079;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" Not applicable  ";}i:2;i:16514;}i:1080;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:16531;}i:1081;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:16532;}i:1082;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:16532;}i:2;i:16532;}i:1083;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:16535;}i:1084;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:36:"PL/SQL Large Object (LOB) Data Types";i:1;i:3;i:2;i:16535;}i:2;i:16535;}i:1085;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:16535;}i:1086;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:16535;}i:1087;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:242:"Large object (LOB) data types refer large to data items such as text, graphic images, video clips, and sound waveforms. LOB data types allow efficient, random, piecewise access to this data. Following are the predefined PL/SQL LOB data types:";}i:2;i:16583;}i:1088;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:16826;}i:1089;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:16826;}i:1090;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:16826;}i:1091;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:16826;}i:1092;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:135:" BFILE	Used to store large binary objects in operating system files outside the database.	System-dependent. Cannot exceed 4 gigabytes (";}i:2;i:16830;}i:1093;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:2:"GB";}i:2;i:16965;}i:1094;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:").";}i:2;i:16967;}i:1095;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:16969;}i:1096;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:16969;}i:1097;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:16969;}i:1098;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:16969;}i:1099;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:81:" BLOB	Used to store large binary objects in the database.	8 to 128 terabytes (TB)";}i:2;i:16973;}i:1100;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:17054;}i:1101;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:17054;}i:1102;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:17054;}i:1103;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:17054;}i:1104;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:79:" CLOB	Used to store large blocks of character data in the database.	8 to 128 TB";}i:2;i:17058;}i:1105;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:17137;}i:1106;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:17137;}i:1107;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:17137;}i:1108;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:17137;}i:1109;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:" NCLOB	Used to store large blocks of NCHAR data in the database.	8 to 128 TB";}i:2;i:17141;}i:1110;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:17217;}i:1111;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:17217;}i:1112;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:17217;}i:1113;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:17219;}i:1114;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"PL/SQL User-Defined Subtypes";i:1;i:3;i:2;i:17219;}i:2;i:17219;}i:1115;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:17219;}i:1116;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17219;}i:1117;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:171:"A subtype is a subset of another data type, which is called its base type. A subtype has the same valid operations as its base type, but only a subset of its valid values.";}i:2;i:17259;}i:1118;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:17430;}i:1119;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17430;}i:1120;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:133:"PL/SQL predefines several subtypes in package STANDARD. For example, PL/SQL predefines the subtypes CHARACTER and INTEGER as follows:";}i:2;i:17432;}i:1121;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:17566;}i:1122;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:59:"SUBTYPE CHARACTER IS CHAR;
SUBTYPE INTEGER IS NUMBER(38,0);";}i:2;i:17566;}i:1123;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17566;}i:1124;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:118:"You can define and use your own subtypes. The following program illustrates defining and using a user-defined subtype:";}i:2;i:17632;}i:1125;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:17751;}i:1126;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:268:"DECLARE
   SUBTYPE name IS char(20);
   SUBTYPE message IS varchar2(100);
   salutation name;
   greetings message;
BEGIN
   salutation := 'Reader ';
   greetings := 'Welcome to the World of PL/SQL';
   dbms_output.put_line('Hello ' || salutation || greetings);
END;
/";}i:2;i:17751;}i:1127;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:17751;}i:1128;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:18044;}i:1129;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18125;}i:1130;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:43:"Hello Reader Welcome to the World of PL/SQL";}i:2;i:18125;}i:1131;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:41:"PL/SQL procedure successfully completed.
";}i:2;i:18172;}i:1132;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:18219;}i:1133;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"NULLs in PL/SQL";i:1;i:3;i:2;i:18219;}i:2;i:18219;}i:1134;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:18219;}i:1135;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18219;}i:1136;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:299:"PL/SQL NULL values represent missing or unknown data and they are not an integer, a character, or any other specific data type. Note that NULL is not the same as an empty data string or the null character value '\0'. A null can be assigned but it cannot be equated with anything, including itself.  ";}i:2;i:18246;}i:1137;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18545;}i:1138;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:18552;}i:1139;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"PL/SQL - Variables";i:1;i:2;i:2;i:18552;}i:2;i:18552;}i:1140;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:18552;}i:1141;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18552;}i:1142;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:324:"A variable is nothing but a name given to a storage area that our programs can manipulate. Each variable in PL/SQL has a specific data type, which determines the size and layout of the variable's memory; the range of values that can be stored within that memory and the set of operations that can be applied to the variable.";}i:2;i:18584;}i:1143;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:18908;}i:1144;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:18908;}i:1145;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:290:"The name of a PL/SQL variable consists of a letter optionally followed by more letters, numerals, dollar signs, underscores, and number signs and should not exceed 30 characters. By default, variable names are not case-sensitive. You cannot use a reserved PL/SQL keyword as a variable name.";}i:2;i:18910;}i:1146;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19200;}i:1147;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19200;}i:1148;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:227:"PL/SQL programming language allows to define various types of variables, which we will cover in subsequent chapters like date time data types, records, collections, etc. For this chapter, let us study only basic variable types.";}i:2;i:19202;}i:1149;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19429;}i:1150;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:19431;}i:1151;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:30:"Variable Declaration in PL/SQL";i:1;i:3;i:2;i:19431;}i:2;i:19431;}i:1152;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:19431;}i:1153;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19431;}i:1154;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:237:"PL/SQL variables must be declared in the declaration section or in a package as a global variable. When you declare a variable, PL/SQL allocates memory for the variable's value and the storage location is identified by the variable name.";}i:2;i:19474;}i:1155;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19711;}i:1156;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19711;}i:1157;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"The syntax for declaring a variable is:";}i:2;i:19713;}i:1158;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:19753;}i:1159;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:73:"variable_name [CONSTANT] datatype [NOT NULL] [:= | DEFAULT initial_value]";}i:2;i:19753;}i:1160;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:19753;}i:1161;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:252:"Where, variable_name is a valid identifier in PL/SQL, datatype must be a valid PL/SQL data type or any user defined data type which we already have discussed in last chapter. Some valid variable declarations along with their definition are shown below:";}i:2;i:19831;}i:1162;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20084;}i:1163;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:103:"sales number(10, 2);
pi CONSTANT double precision := 3.1415;
name varchar2(25);
address varchar2(100);
";}i:2;i:20084;}i:1164;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20084;}i:1165;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:85:"When you provide a size, scale or precision limit with the data type, it is called a ";}i:2;i:20199;}i:1166;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:20284;}i:1167;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"constrained declaration";}i:2;i:20286;}i:1168;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:20309;}i:1169;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:". Constrained declarations require less memory than unconstrained declarations. For example:";}i:2;i:20311;}i:1170;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20404;}i:1171;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:62:"sales number(10, 2);
name varchar2(25);
address varchar2(100);";}i:2;i:20404;}i:1172;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:20475;}i:1173;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:32:"Initializing Variables in PL/SQL";i:1;i:3;i:2;i:20475;}i:2;i:20475;}i:1174;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:20475;}i:1175;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20475;}i:1176;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:221:"Whenever you declare a variable, PL/SQL assigns it a default value of NULL. If you want to initialize a variable with a value other than the NULL value, you can do so during the declaration, using either of the following:";}i:2;i:20520;}i:1177;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20742;}i:1178;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:20742;}i:1179;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:20742;}i:1180;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:20742;}i:1181;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" The DEFAULT keyword";}i:2;i:20746;}i:1182;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:20766;}i:1183;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:20766;}i:1184;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:20766;}i:1185;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:20766;}i:1186;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" The assignment operator";}i:2;i:20770;}i:1187;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:20794;}i:1188;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:20794;}i:1189;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:20794;}i:1190;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20794;}i:1191;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"For example: ";}i:2;i:20796;}i:1192;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:20810;}i:1193;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:78:"counter binary_integer := 0;
greetings varchar2(20) DEFAULT 'Have a Good Day';";}i:2;i:20810;}i:1194;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:20810;}i:1195;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:"You can also specify that a variable should not have a ";}i:2;i:20895;}i:1196;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:20950;}i:1197;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:"NULL";}i:2;i:20952;}i:1198;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:20956;}i:1199;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" value using the ";}i:2;i:20958;}i:1200;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:20975;}i:1201;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"NOT NULL";}i:2;i:20977;}i:1202;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:20985;}i:1203;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:111:" constraint. If you use the NOT NULL constraint, you must explicitly assign an initial value for that variable.";}i:2;i:20987;}i:1204;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21098;}i:1205;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21098;}i:1206;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:203:"It is a good programming practice to initialize variables properly otherwise, sometimes program would produce unexpected result. Try the following example which makes use of various types of variables:  ";}i:2;i:21100;}i:1207;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21304;}i:1208;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:192:"DECLARE
 a integer := 10;
 b integer := 20;
 c integer;
 f real;
BEGIN
 c := a + b;
 dbms_output.put_line('Value of c: ' || c);
 f := 70.0/3.0;
 dbms_output.put_line('Value of f: ' || f);
END;";}i:2;i:21304;}i:1209;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:21521;}i:1210;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"Variable Scope in PL/SQL";i:1;i:3;i:2;i:21521;}i:2;i:21521;}i:1211;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:21521;}i:1212;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:21521;}i:1213;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:342:"PL/SQL allows the nesting of Blocks, i.e., each program block may contain another inner block. If a variable is declared within an inner block, it is not accessible to the outer block. However, if a variable is declared and accessible to an outer Block, it is also accessible to all nested inner Blocks. There are two types of variable scope:";}i:2;i:21558;}i:1214;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:21901;}i:1215;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:21901;}i:1216;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:21901;}i:1217;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:21901;}i:1218;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:" Local variables - variables declared in an inner block and not accessible to outer blocks.";}i:2;i:21905;}i:1219;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:21996;}i:1220;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:21996;}i:1221;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:21996;}i:1222;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:21996;}i:1223;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:" Global variables - variables declared in the outermost block or a package.";}i:2;i:22000;}i:1224;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:22075;}i:1225;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:22075;}i:1226;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:22075;}i:1227;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:22075;}i:1228;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:83:"Following example shows the usage of Local and Global variables in its simple form:";}i:2;i:22077;}i:1229;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:22161;}i:1230;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:411:"DECLARE
 -- Global variables 
 num1 number := 95; 
 num2 number := 85; 
BEGIN 
 dbms_output.put_line('Outer Variable num1: ' || num1);
 dbms_output.put_line('Outer Variable num2: ' || num2);
 DECLARE 
    -- Local variables
    num1 number := 195; 
    num2 number := 185; 
 BEGIN 
    dbms_output.put_line('Inner Variable num1: ' || num1);
    dbms_output.put_line('Inner Variable num2: ' || num2);
 END; 
END;";}i:2;i:22161;}i:1231;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:22607;}i:1232;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:47:"Assigning SQL Query Results to PL/SQL Variables";i:1;i:3;i:2;i:22607;}i:2;i:22607;}i:1233;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:22607;}i:1234;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:22607;}i:1235;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:276:"You can use the SELECT INTO statement of SQL to assign values to PL/SQL variables. For each item in the SELECT list, there must be a corresponding, type-compatible variable in the INTO list. The following example illustrates the concept: Let us create a table named CUSTOMERS:";}i:2;i:22667;}i:1236;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:22943;}i:1237;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:22943;}i:1238;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"(For SQL statements please look at the ";}i:2;i:22945;}i:1239;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:43:"http://www.tutorialspoint.com/sql/index.htm";i:1;s:12:"SQL tutorial";}i:2;i:22984;}i:1240;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:")";}i:2;i:23044;}i:1241;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:23046;}i:1242;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:166:"CREATE TABLE CUSTOMERS(
 ID   INT NOT NULL,
 NAME VARCHAR (20) NOT NULL,
 AGE INT NOT NULL,
 ADDRESS CHAR (25),
 SALARY   DECIMAL (18, 2),       
 PRIMARY KEY (ID)
);";}i:2;i:23046;}i:1243;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:23046;}i:1244;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:"Next, let us insert some values in the table:";}i:2;i:23231;}i:1245;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:23277;}i:1246;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:99:"INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (1, 'Ramesh', 32, 'Ahmedabad', 2000.00 );";}i:2;i:23277;}i:1247;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:95:"INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (2, 'Khilan', 25, 'Delhi', 1500.00 );";}i:2;i:23382;}i:1248;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:95:"INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (3, 'kaushik', 23, 'Kota', 2000.00 );";}i:2;i:23483;}i:1249;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:98:"INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (4, 'Chaitali', 25, 'Mumbai', 6500.00 );";}i:2;i:23584;}i:1250;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:96:"INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (5, 'Hardik', 27, 'Bhopal', 8500.00 );";}i:2;i:23688;}i:1251;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:91:"INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (6, 'Komal', 22, 'MP', 4500.00 );";}i:2;i:23790;}i:1252;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:23790;}i:1253;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:"The following program assigns values from the above table to PL/SQL variables using the SELECT INTO clause of SQL:";}i:2;i:23888;}i:1254;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24003;}i:1255;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:241:"DECLARE
   c_id customers.id%type := 1;
   c_name  customers.name%type;
   c_addr customers.address%type;
   c_sal  customers.salary%type;
BEGIN
   SELECT name, address, salary INTO c_name, c_addr, c_sal
   FROM customers
   WHERE id = c_id;";}i:2;i:24003;}i:1256;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:99:"   dbms_output.put_line
   ('Customer ' ||c_name || ' from ' || c_addr || ' earns ' || c_sal);
END;";}i:2;i:24264;}i:1257;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:24373;}i:1258;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:31:"PL/SQL - Constants and Literals";i:1;i:2;i:2;i:24373;}i:2;i:24373;}i:1259;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:24373;}i:1260;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24373;}i:1261;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:228:"A constant holds a value that once declared, does not change in the program. A constant declaration specifies its name, data type, and value, and allocates storage for it. The declaration can also impose the NOT NULL constraint.";}i:2;i:24418;}i:1262;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24646;}i:1263;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:24648;}i:1264;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"Declaring a consant";i:1;i:3;i:2;i:24648;}i:2;i:24648;}i:1265;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:24648;}i:1266;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:24648;}i:1267;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:137:"A constant is declared using the CONSTANT keyword. It requires an initial value and does not allow that value to be changed. For example:";}i:2;i:24679;}i:1268;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:24817;}i:1269;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:34:"PI CONSTANT NUMBER := 3.141592654;";}i:2;i:24817;}i:1270;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:552:"DECLARE
   -- constant declaration
   pi constant number := 3.141592654;
   -- other declarations
   radius number(5,2); 
   dia number(5,2); 
   circumference number(7, 2);
   area number (10, 2);
BEGIN 
   -- processing
   radius := 9.5; 
   dia := radius * 2; 
   circumference := 2.0 * pi * radius;
   area := pi * radius * radius;
   -- output
   dbms_output.put_line('Radius: ' || radius);
   dbms_output.put_line('Diameter: ' || dia);
   dbms_output.put_line('Circumference: ' || circumference);
   dbms_output.put_line('Area: ' || area);
END;
/";}i:2;i:24855;}i:1271;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:25452;}i:1272;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"The PL/SQL Literals";i:1;i:3;i:2;i:25452;}i:2;i:25452;}i:1273;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:25452;}i:1274;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25452;}i:1275;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:289:"A literal is an explicit numeric, character, string, or Boolean value not represented by an identifier. For example, TRUE, 786, NULL, 'tutorialspoint' are all literals of type Boolean, number, or string. PL/SQL, literals are case-sensitive. PL/SQL supports the following kinds of literals:";}i:2;i:25483;}i:1276;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25773;}i:1277;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:25773;}i:1278;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:25773;}i:1279;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:25773;}i:1280;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" Numeric Literals";}i:2;i:25777;}i:1281;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:25794;}i:1282;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:25794;}i:1283;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:25794;}i:1284;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:25794;}i:1285;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" Character Literals";}i:2;i:25798;}i:1286;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:25817;}i:1287;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:25817;}i:1288;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:25817;}i:1289;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:25817;}i:1290;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" String Literals";}i:2;i:25821;}i:1291;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:25837;}i:1292;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:25837;}i:1293;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:25837;}i:1294;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:25837;}i:1295;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" BOOLEAN Literals";}i:2;i:25841;}i:1296;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:25858;}i:1297;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:25858;}i:1298;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:25858;}i:1299;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:25858;}i:1300;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" Date and Time Literals";}i:2;i:25862;}i:1301;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:25885;}i:1302;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:25885;}i:1303;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:25885;}i:1304;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:25885;}i:1305;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:82:"The following table provides examples from all these categories of literal values.";}i:2;i:25887;}i:1306;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:25970;}i:1307;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:134:"050 78 -14 0 +32767
6.6667 0.0 -12.0 3.14159 +7800.00
6E5 1.0E-8 3.14159e0 -1E38 -9.5e-3
'Hello, world!'
'Tutorials Point'
'19-NOV-12'";}i:2;i:25970;}i:1308;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:2;i:1;i:6;i:2;i:26119;}i:2;i:26118;}i:1309;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:26118;}i:1310;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:26118;}i:1311;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:26118;}i:1312;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" Literal type  ";}i:2;i:26120;}i:1313;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:26135;}i:1314;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:26135;}i:1315;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" Example   ";}i:2;i:26136;}i:1316;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:26147;}i:1317;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:26148;}i:1318;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:26148;}i:1319;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:26148;}i:1320;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:2;i:1;s:4:"left";i:2;i:1;}i:2;i:26148;}i:1321;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" Numeric Literals  ";}i:2;i:26150;}i:1322;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26169;}i:1323;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:26171;}i:1324;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:26171;}i:1325;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:26171;}i:1326;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" Character Literals  ";}i:2;i:26173;}i:1327;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26194;}i:1328;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:26194;}i:1329;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" 'A' '%' '9' ' ' 'z' '('  ";}i:2;i:26195;}i:1330;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26221;}i:1331;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:26222;}i:1332;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:26222;}i:1333;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:2;i:1;s:4:"left";i:2;i:1;}i:2;i:26222;}i:1334;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" String Literals  ";}i:2;i:26224;}i:1335;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26242;}i:1336;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:26244;}i:1337;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:26244;}i:1338;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:26244;}i:1339;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" BOOLEAN Literals  ";}i:2;i:26246;}i:1340;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26265;}i:1341;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:26265;}i:1342;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" TRUE, FALSE and NULL  ";}i:2;i:26266;}i:1343;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26289;}i:1344;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:26290;}i:1345;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:26290;}i:1346;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:26290;}i:1347;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:" Date and Time Literals  ";}i:2;i:26292;}i:1348;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26317;}i:1349;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:26317;}i:1350;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" DATE '1978-12-25'; ";}i:2;i:26318;}i:1351;a:3:{i:0;s:9:"linebreak";i:1;a:0:{}i:2;i:26338;}i:1352;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:"TIMESTAMP '2012-10-29 12:01:01';   ";}i:2;i:26341;}i:1353;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:26376;}i:1354;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:26377;}i:1355;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:26377;}i:2;i:26377;}i:1356;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:26377;}i:1357;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:106:"To embed single quotes within a string literal, place two single quotes next to each other as shown below:";}i:2;i:26379;}i:1358;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26486;}i:1359;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:114:"DECLARE
   message  varchar2(30):= ''That''s tutorialspoint.com!'';
BEGIN
   dbms_output.put_line(message);
END;
/";}i:2;i:26486;}i:1360;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:26616;}i:1361;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"PL/SQL - Operators";i:1;i:2;i:2;i:26616;}i:2;i:26616;}i:1362;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:26616;}i:1363;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:26616;}i:1364;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:198:"An operator is a symbol that tells the compiler to perform specific mathematical or logical manipulation. PL/SQL language is rich in built-in operators and provides the following types of operators:";}i:2;i:26648;}i:1365;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:26847;}i:1366;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:26847;}i:1367;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:26847;}i:1368;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:26847;}i:1369;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" Arithmetic operators";}i:2;i:26851;}i:1370;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:26872;}i:1371;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:26872;}i:1372;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:26872;}i:1373;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:26872;}i:1374;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" Relational operators";}i:2;i:26876;}i:1375;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:26897;}i:1376;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:26897;}i:1377;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:26897;}i:1378;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:26897;}i:1379;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" Comparison operators";}i:2;i:26901;}i:1380;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:26922;}i:1381;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:26922;}i:1382;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:26922;}i:1383;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:26922;}i:1384;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" Logical operators";}i:2;i:26926;}i:1385;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:26944;}i:1386;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:26944;}i:1387;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:26944;}i:1388;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:26944;}i:1389;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" String operators";}i:2;i:26948;}i:1390;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:26965;}i:1391;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:26965;}i:1392;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:26965;}i:1393;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:26965;}i:1394;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:158:"This tutorial will explain the arithmetic, relational, comparison and logical operators one by one. The String operators will be discussed under the chapter: ";}i:2;i:26967;}i:1395;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:27125;}i:1396;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"PL/SQL - Strings";}i:2;i:27127;}i:1397;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:27143;}i:1398;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" (LINK).";}i:2;i:27145;}i:1399;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27153;}i:1400;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:27155;}i:1401;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"Arithmetic Operators";i:1;i:3;i:2;i:27155;}i:2;i:27155;}i:1402;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:27155;}i:1403;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27155;}i:1404;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:127:"Following table shows all the arithmetic operators supported by PL/SQL. Assume variable A holds 10 and variable B holds 5 then:";}i:2;i:27187;}i:1405;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27315;}i:1406;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:3;i:1;i:6;i:2;i:27316;}i:2;i:27315;}i:1407;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:27315;}i:1408;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:27315;}i:1409;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27315;}i:1410;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" Operator ";}i:2;i:27317;}i:1411;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:27327;}i:1412;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27327;}i:1413;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" Description ";}i:2;i:27328;}i:1414;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:27341;}i:1415;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27341;}i:1416;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" Example ";}i:2;i:27342;}i:1417;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:27351;}i:1418;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:27352;}i:1419;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:27352;}i:1420;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:27352;}i:1421;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27352;}i:1422;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:" + ";}i:2;i:27354;}i:1423;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27357;}i:1424;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27357;}i:1425;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" Adds two operands ";}i:2;i:27358;}i:1426;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27377;}i:1427;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27377;}i:1428;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" A + B will give 15 ";}i:2;i:27378;}i:1429;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27398;}i:1430;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:27399;}i:1431;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:27399;}i:1432;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27399;}i:1433;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:" - ";}i:2;i:27401;}i:1434;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27404;}i:1435;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27404;}i:1436;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:" Substracts second operand from the first ";}i:2;i:27405;}i:1437;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27447;}i:1438;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27447;}i:1439;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" A - B will give 5 ";}i:2;i:27448;}i:1440;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27467;}i:1441;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:27468;}i:1442;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:27468;}i:1443;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27468;}i:1444;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:" * ";}i:2;i:27470;}i:1445;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27473;}i:1446;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27473;}i:1447;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" Multiplies both operands ";}i:2;i:27474;}i:1448;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27500;}i:1449;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27500;}i:1450;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" A * B will give 50 ";}i:2;i:27501;}i:1451;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27521;}i:1452;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:27522;}i:1453;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:27522;}i:1454;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27522;}i:1455;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:" / ";}i:2;i:27524;}i:1456;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27527;}i:1457;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27527;}i:1458;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:" Divides numerator by de-numerator ";}i:2;i:27528;}i:1459;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27563;}i:1460;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27563;}i:1461;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" A / B will give 2 ";}i:2;i:27564;}i:1462;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27583;}i:1463;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:27584;}i:1464;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:27584;}i:1465;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27584;}i:1466;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" * * ";}i:2;i:27586;}i:1467;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27591;}i:1468;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27591;}i:1469;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:" Exponentiation operator, raises one operand to the power of other ";}i:2;i:27592;}i:1470;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27659;}i:1471;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27659;}i:1472;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" * * B will give 100000 ";}i:2;i:27660;}i:1473;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27684;}i:1474;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:27685;}i:1475;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:27685;}i:2;i:27685;}i:1476;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:27687;}i:1477;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"Relational operators";i:1;i:3;i:2;i:27687;}i:2;i:27687;}i:1478;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:27687;}i:1479;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27687;}i:1480;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:213:"Relational operators compare two expressions or values and return a Boolean result. Following table shows all the relational operators supported by PL/SQL. Assume variable A holds 10 and variable B holds 20, then:";}i:2;i:27719;}i:1481;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27932;}i:1482;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27932;}i:1483;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"!=";}i:2;i:27934;}i:1484;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27936;}i:1485;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27936;}i:1486;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"<>";}i:2;i:27938;}i:1487;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27940;}i:1488;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:27940;}i:1489;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"~=";}i:2;i:27942;}i:1490;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:27945;}i:1491;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:3;i:1;i:7;i:2;i:27946;}i:2;i:27945;}i:1492;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:27945;}i:1493;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:27945;}i:1494;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27945;}i:1495;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" Operator ";}i:2;i:27947;}i:1496;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:27957;}i:1497;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27957;}i:1498;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" Description ";}i:2;i:27958;}i:1499;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:27971;}i:1500;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27971;}i:1501;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" Example ";}i:2;i:27972;}i:1502;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:27981;}i:1503;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:27982;}i:1504;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:27982;}i:1505;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:27982;}i:1506;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27982;}i:1507;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:" = ";}i:2;i:27984;}i:1508;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:27987;}i:1509;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:27987;}i:1510;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:" Checks if the values of two operands are equal or not, if yes then condition becomes true. ";}i:2;i:27988;}i:1511;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:28080;}i:1512;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:28080;}i:1513;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" (A = B) is not true. ";}i:2;i:28081;}i:1514;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:28103;}i:1515;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:28104;}i:1516;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:28104;}i:1517;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:28104;}i:1518;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:109:" Checks if the values of two operands are equal or not, if values are not equal then condition becomes true. ";}i:2;i:28106;}i:1519;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:28215;}i:1520;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:2;i:1;N;i:2;i:1;}i:2;i:28215;}i:1521;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" (A != B) is true. ";}i:2;i:28216;}i:1522;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:28235;}i:1523;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:28237;}i:1524;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:28237;}i:1525;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:28237;}i:1526;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:" > ";}i:2;i:28239;}i:1527;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:28242;}i:1528;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:28242;}i:1529;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:117:" Checks if the value of left operand is greater than the value of right operand, if yes then condition becomes true. ";}i:2;i:28243;}i:1530;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:28360;}i:1531;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:28360;}i:1532;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" (A > B) is not true. ";}i:2;i:28361;}i:1533;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:28383;}i:1534;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:28384;}i:1535;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:28384;}i:1536;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:28384;}i:1537;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:" < ";}i:2;i:28386;}i:1538;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:28389;}i:1539;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:28389;}i:1540;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:" Checks if the value of left operand is less than the value of right operand, if yes then condition becomes true. ";}i:2;i:28390;}i:1541;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:28504;}i:1542;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:28504;}i:1543;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" (A < B) is true. ";}i:2;i:28505;}i:1544;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:28523;}i:1545;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:28524;}i:1546;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:28524;}i:1547;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:28524;}i:1548;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" >= ";}i:2;i:28526;}i:1549;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:28530;}i:1550;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:28530;}i:1551;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:129:" Checks if the value of left operand is greater than or equal to the value of right operand, if yes then condition becomes true. ";}i:2;i:28531;}i:1552;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:28660;}i:1553;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:28660;}i:1554;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" (A >= B) is not true. ";}i:2;i:28661;}i:1555;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:28684;}i:1556;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:28685;}i:1557;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:28685;}i:1558;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:28685;}i:1559;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:28687;}i:1560;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"<=";}i:2;i:28688;}i:1561;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:28690;}i:1562;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:28691;}i:1563;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:28691;}i:1564;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:126:" Checks if the value of left operand is less than or equal to the value of right operand, if yes then condition becomes true. ";}i:2;i:28692;}i:1565;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:28818;}i:1566;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:28818;}i:1567;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:" A ";}i:2;i:28819;}i:1568;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"<=";}i:2;i:28822;}i:1569;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" B) is true. ";}i:2;i:28824;}i:1570;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:28837;}i:1571;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:28838;}i:1572;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:28838;}i:2;i:28838;}i:1573;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:28841;}i:1574;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"Comparison operator";i:1;i:3;i:2;i:28841;}i:2;i:28841;}i:1575;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:28841;}i:1576;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:28841;}i:1577;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:119:"Comparison operators are used for comparing one expression to another. The result is always either TRUE, FALSE OR NULL.";}i:2;i:28872;}i:1578;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:28992;}i:1579;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:3;i:1;i:5;i:2;i:28993;}i:2;i:28992;}i:1580;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:28992;}i:1581;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:28992;}i:1582;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:28992;}i:1583;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" Operator ";}i:2;i:28994;}i:1584;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:29004;}i:1585;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:29004;}i:1586;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" Description ";}i:2;i:29005;}i:1587;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:29018;}i:1588;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:29018;}i:1589;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" Example ";}i:2;i:29019;}i:1590;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:29028;}i:1591;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:29029;}i:1592;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:29029;}i:1593;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:29029;}i:1594;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:29029;}i:1595;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" LIKE ";}i:2;i:29031;}i:1596;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:29037;}i:1597;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:29037;}i:1598;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:152:" The LIKE operator compares a character, string, or CLOB value to a pattern and returns TRUE if the value matches the pattern and FALSE if it does not. ";}i:2;i:29038;}i:1599;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:29190;}i:1600;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:29190;}i:1601;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:112:" If 'Zara Ali' like 'Z% A_i' returns a Boolean true, whereas, 'Nuha Ali' like 'Z% A_i' returns a Boolean false. ";}i:2;i:29191;}i:1602;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:29303;}i:1603;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:29304;}i:1604;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:29304;}i:1605;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:29304;}i:1606;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" BETWEEN ";}i:2;i:29306;}i:1607;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:29315;}i:1608;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:29315;}i:1609;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:113:" The BETWEEN operator tests whether a value lies in a specified range. x BETWEEN a AND b means that x >= a and x ";}i:2;i:29316;}i:1610;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"<=";}i:2;i:29429;}i:1611;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" b. ";}i:2;i:29431;}i:1612;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:29435;}i:1613;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:29435;}i:1614;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:122:" If x = 10 then, x between 5 and 20 returns true, x between 5 and 10 returns true, but x between 11 and 20 returns false. ";}i:2;i:29436;}i:1615;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:29558;}i:1616;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:29559;}i:1617;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:29559;}i:1618;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:29559;}i:1619;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" IN ";}i:2;i:29561;}i:1620;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:29565;}i:1621;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:29565;}i:1622;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:" The IN operator tests set membership. x IN (set) means that x is equal to any member of set. ";}i:2;i:29566;}i:1623;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:29660;}i:1624;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:29660;}i:1625;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:108:" If x = 'm' then, x in ('a', 'b', 'c') returns boolean false but x in ('m', 'n', 'o') returns Boolean true. ";}i:2;i:29661;}i:1626;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:29769;}i:1627;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:29770;}i:1628;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:29770;}i:1629;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:29770;}i:1630;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" IS NULL ";}i:2;i:29772;}i:1631;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:29781;}i:1632;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:29781;}i:1633;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:157:" The IS NULL operator returns the BOOLEAN value TRUE if its operand is NULL or FALSE if it is not NULL. Comparisons involving NULL values always yield NULL. ";}i:2;i:29782;}i:1634;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:29939;}i:1635;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:29939;}i:1636;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:" If x = 'm', then 'x is null' returns Boolean false. ";}i:2;i:29940;}i:1637;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:29993;}i:1638;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:29994;}i:1639;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:29994;}i:2;i:29994;}i:1640;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:29996;}i:1641;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Logical operators";i:1;i:3;i:2;i:29996;}i:2;i:29996;}i:1642;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:29996;}i:1643;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:29996;}i:1644;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:202:"Following table shows the Logical operators supported by PL/SQL. All these operators work on Boolean operands and produces Boolean results. Assume variable A holds true and variable B holds false, then:";}i:2;i:30025;}i:1645;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:30228;}i:1646;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:3;i:1;i:4;i:2;i:30229;}i:2;i:30228;}i:1647;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:30228;}i:1648;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:30228;}i:1649;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:30228;}i:1650;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" Operator ";}i:2;i:30230;}i:1651;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:30240;}i:1652;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:30240;}i:1653;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" Description ";}i:2;i:30241;}i:1654;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:30254;}i:1655;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:30254;}i:1656;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" Example ";}i:2;i:30255;}i:1657;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:30264;}i:1658;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:30265;}i:1659;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:30265;}i:1660;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:30265;}i:1661;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:30265;}i:1662;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:30267;}i:1663;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:30272;}i:1664;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:30272;}i:1665;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:90:" Called logical AND operator. If both the operands are true then condition becomes true.	 ";}i:2;i:30273;}i:1666;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:30363;}i:1667;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:30363;}i:1668;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" (A and B) is false. ";}i:2;i:30364;}i:1669;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:30385;}i:1670;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:30386;}i:1671;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:30386;}i:1672;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:30386;}i:1673;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" or ";}i:2;i:30388;}i:1674;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:30392;}i:1675;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:30392;}i:1676;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:" Called logical OR Operator. If any of the two operands is true then condition becomes true. ";}i:2;i:30393;}i:1677;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:30486;}i:1678;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:30486;}i:1679;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" (A or B) is true. ";}i:2;i:30487;}i:1680;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:30506;}i:1681;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:30507;}i:1682;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:30507;}i:1683;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:30507;}i:1684;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" not ";}i:2;i:30509;}i:1685;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:30514;}i:1686;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:30514;}i:1687;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:149:" Called logical NOT Operator. Used to reverse the logical state of its operand. If a condition is true then Logical NOT operator will make it false. ";}i:2;i:30515;}i:1688;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:30664;}i:1689;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:30664;}i:1690;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" not (A and B) is true. ";}i:2;i:30665;}i:1691;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:30689;}i:1692;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:30690;}i:1693;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:30690;}i:2;i:30690;}i:1694;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:30692;}i:1695;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"PL/SQL Operator Precedence";i:1;i:3;i:2;i:30692;}i:2;i:30692;}i:1696;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:30692;}i:1697;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:30692;}i:1698;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:260:"Operator precedence determines the grouping of terms in an expression. This affects how an expression is evaluated. Certain operators have higher precedence than others; for example, the multiplication operator has higher precedence than the addition operator:";}i:2;i:30730;}i:1699;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:30990;}i:1700;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:30990;}i:1701;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:165:"For example x = 7 + 3 * 2; here, x is assigned 13, not 20 because operator * has higher precedence than +, so it first gets multiplied with 3*2 and then adds into 7.";}i:2;i:30992;}i:1702;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31157;}i:1703;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:31157;}i:1704;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:194:"Here, operators with the highest precedence appear at the top of the table, those with the lowest appear at the bottom. Within an expression, higher precedence operators will be evaluated first.";}i:2;i:31159;}i:1705;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31353;}i:1706;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:31353;}i:1707;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"=, <, >, ";}i:2;i:31355;}i:1708;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"<=";}i:2;i:31364;}i:1709;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:", >=, <>, !=, ~=, ^=,";}i:2;i:31366;}i:1710;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31387;}i:1711;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:31387;}i:1712;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"IS NULL, LIKE, BETWEEN, IN";}i:2;i:31389;}i:1713;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31416;}i:1714;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:2;i:1;i:9;i:2;i:31417;}i:2;i:31416;}i:1715;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:31416;}i:1716;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:31416;}i:1717;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:31416;}i:1718;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" Operator ";}i:2;i:31418;}i:1719;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:31428;}i:1720;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:31428;}i:1721;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" Operation ";}i:2;i:31429;}i:1722;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:31440;}i:1723;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:31442;}i:1724;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:31442;}i:1725;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:31442;}i:1726;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:31442;}i:1727;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" * * ";}i:2;i:31444;}i:1728;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:31449;}i:1729;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:31449;}i:1730;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" exponentiation ";}i:2;i:31450;}i:1731;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:31466;}i:1732;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:31467;}i:1733;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:31467;}i:1734;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:31467;}i:1735;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" +,- ";}i:2;i:31469;}i:1736;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:31474;}i:1737;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:31474;}i:1738;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" identity, negation ";}i:2;i:31475;}i:1739;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:31495;}i:1740;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:31496;}i:1741;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:31496;}i:1742;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:31496;}i:1743;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" *, / ";}i:2;i:31498;}i:1744;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:31504;}i:1745;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:31504;}i:1746;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" multiplication, division ";}i:2;i:31505;}i:1747;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:31531;}i:1748;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:31532;}i:1749;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:31532;}i:1750;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:31532;}i:1751;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" +, -, ";}i:2;i:31534;}i:1752;a:3:{i:0;s:13:"emphasis_open";i:1;a:0:{}i:2;i:31541;}i:1753;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"||";}i:2;i:31543;}i:1754;a:3:{i:0;s:14:"emphasis_close";i:1;a:0:{}i:2;i:31545;}i:1755;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:31547;}i:1756;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:31548;}i:1757;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:31548;}i:1758;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:" addition, subtraction, concatenation ";}i:2;i:31549;}i:1759;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:31587;}i:1760;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:31588;}i:1761;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:31588;}i:1762;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:2;i:1;N;i:2;i:1;}i:2;i:31588;}i:1763;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" comparison ";}i:2;i:31590;}i:1764;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:31602;}i:1765;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:31604;}i:1766;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:31604;}i:1767;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:31604;}i:1768;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" NOT ";}i:2;i:31606;}i:1769;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:31611;}i:1770;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:31611;}i:1771;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" logical negation ";}i:2;i:31612;}i:1772;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:31630;}i:1773;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:31631;}i:1774;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:31631;}i:1775;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:31631;}i:1776;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" AND ";}i:2;i:31633;}i:1777;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:31638;}i:1778;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:31638;}i:1779;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" conjunction ";}i:2;i:31639;}i:1780;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:31652;}i:1781;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:31653;}i:1782;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:31653;}i:1783;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:31653;}i:1784;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:4:" OR ";}i:2;i:31655;}i:1785;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:31659;}i:1786;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:31659;}i:1787;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" inclusion ";}i:2;i:31660;}i:1788;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:31671;}i:1789;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:31672;}i:1790;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:31672;}i:2;i:31672;}i:1791;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:31672;}i:1792;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"Example:";}i:2;i:31674;}i:1793;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:31682;}i:1794;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:6:"hidden";i:1;a:11:{s:6:"active";s:4:"true";s:7:"element";a:0:{}s:8:"onHidden";s:4:"Kuva";s:9:"onVisible";s:5:"Peida";s:12:"initialState";s:6:"hidden";s:5:"state";i:1;s:9:"printHead";b:1;s:13:"bytepos_start";i:31684;s:4:"edit";b:0;s:8:"editText";s:19:"Edit hidden section";s:11:"onExportPdf";s:5:"Peida";}i:2;i:1;i:3;s:8:"<hidden>";}i:2;i:31684;}i:1795;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:581:"DECLARE
   a number(2) := 20;
   b number(2) := 10;
   c number(2) := 15;
   d number(2) := 5;
   e number(2) ;
BEGIN
   e := (a + b) * c / d;      -- ( 30 * 15 ) / 5
   dbms_output.put_line('Value of (a + b) * c / d is : '|| e );
   e := ((a + b) * c) / d;   -- (30 * 15 ) / 5
   dbms_output.put_line('Value of ((a + b) * c) / d is  : ' ||  e );
   e := (a + b) * (c / d);   -- (30) * (15/5)
   dbms_output.put_line('Value of (a + b) * (c / d) is  : '||  e );
   e := a + (b * c) / d;     --  20 + (150/5)
   dbms_output.put_line('Value of a + (b * c) / d is  : ' ||  e );
END;
/
";}i:2;i:31693;}i:1796;a:3:{i:0;s:6:"plugin";i:1;a:4:{i:0;s:6:"hidden";i:1;a:2:{s:5:"state";i:4;s:11:"bytepos_end";i:32321;}i:2;i:4;i:3;s:9:"</hidden>";}i:2;i:32312;}i:1797;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:32324;}i:1798;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"PL/SQL - Conditions";i:1;i:2;i:2;i:32324;}i:2;i:32324;}i:1799;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:32324;}i:1800;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:32324;}i:1801;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:314:"Decision-making structures require that the programmer specify one or more conditions to be evaluated or tested by the program, along with a statement or statements to be executed if the condition is determined to be true, and optionally, other statements to be executed if the condition is determined to be false.";}i:2;i:32357;}i:1802;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:32671;}i:1803;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:32671;}i:1804;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:132:"Following is the general from of a typical conditional (i.e., decision making) structure found in most of the programming languages:";}i:2;i:32673;}i:1805;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:32805;}i:1806;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:32805;}i:1807;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:27:":nortal:decision_making.jpg";i:1;s:0:"";i:2;N;i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:6:"nolink";}i:2;i:32807;}i:1808;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:32846;}i:1809;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:32846;}i:1810;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:132:"PL/SQL programming language provides following types of decision-making statements. Click the following links to check their detail.";}i:2;i:32848;}i:1811;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:32981;}i:1812;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:2;i:1;i:7;i:2;i:32982;}i:2;i:32981;}i:1813;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:32981;}i:1814;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:32981;}i:1815;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:32981;}i:1816;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" Statement ";}i:2;i:32983;}i:1817;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:32994;}i:1818;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:32994;}i:1819;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" Description ";}i:2;i:32995;}i:1820;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:33008;}i:1821;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:33009;}i:1822;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:33009;}i:1823;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:33009;}i:1824;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:33009;}i:1825;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" IF - THEN statement ";}i:2;i:33011;}i:1826;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:33032;}i:1827;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:33032;}i:1828;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:241:" The IF statement associates a condition with a sequence of statements enclosed by the keywords THEN and END IF. If the condition is true, the statements get executed and if the condition is false or NULL then the IF statement does nothing. ";}i:2;i:33033;}i:1829;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:33274;}i:1830;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:33275;}i:1831;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:33275;}i:1832;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:33275;}i:1833;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" IF-THEN-ELSE statement ";}i:2;i:33277;}i:1834;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:33301;}i:1835;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:33301;}i:1836;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:251:" IF statement adds the keyword ELSE followed by an alternative sequence of statement. If the condition is false or NULL , then only the alternative sequence of statements get executed. It ensures that either of the sequence of statements is executed. ";}i:2;i:33302;}i:1837;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:33553;}i:1838;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:33554;}i:1839;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:33554;}i:1840;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:33554;}i:1841;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:" IF-THEN-ELSIF statement ";}i:2;i:33556;}i:1842;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:33581;}i:1843;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:33581;}i:1844;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:55:" It allows you to choose between several alternatives. ";}i:2;i:33582;}i:1845;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:33637;}i:1846;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:33638;}i:1847;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:33638;}i:1848;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:33638;}i:1849;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" Case statement ";}i:2;i:33640;}i:1850;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:33656;}i:1851;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:33656;}i:1852;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:287:" Like the IF statement, the CASE statement selects one sequence of statements to execute. However, to select the sequence, the CASE statement uses a selector rather than multiple Boolean expressions. A selector is an expression whose value is used to select one of several alternatives. ";}i:2;i:33657;}i:1853;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:33944;}i:1854;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:33945;}i:1855;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:33945;}i:1856;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:33945;}i:1857;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:" Searched CASE statement ";}i:2;i:33947;}i:1858;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:33972;}i:1859;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:33972;}i:1860;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:121:" The searched CASE statement has no selector, and it's WHEN clauses contain search conditions that yield Boolean values. ";}i:2;i:33973;}i:1861;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:34094;}i:1862;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:34095;}i:1863;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:34095;}i:1864;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:34095;}i:1865;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" nested IF-THEN-ELSE ";}i:2;i:34097;}i:1866;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:34118;}i:1867;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:34118;}i:1868;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:106:" You can use one IF-THEN or IF-THEN-ELSIF statement inside another IF-THEN or IF-THEN-ELSIF statement(s). ";}i:2;i:34119;}i:1869;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:34225;}i:1870;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:34226;}i:1871;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:34226;}i:2;i:34226;}i:1872;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:34228;}i:1873;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"PL/SQL - Loops";i:1;i:2;i:2;i:34228;}i:2;i:34228;}i:1874;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:34228;}i:1875;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34228;}i:1876;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:228:"There may be a situation when you need to execute a block of code several number of times. In general, statements are executed sequentially: The first statement in a function is executed first, followed by the second, and so on.";}i:2;i:34256;}i:1877;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34484;}i:1878;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34484;}i:1879;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:"Programming languages provide various control structures that allow for more complicated execution paths.";}i:2;i:34486;}i:1880;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34591;}i:1881;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34591;}i:1882;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:179:"A loop statement allows us to execute a statement or group of statements multiple times and following is the general form of a loop statement in most of the programming languages:";}i:2;i:34593;}i:1883;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34772;}i:1884;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34772;}i:1885;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:29:":nortal:loop_architecture.jpg";i:1;s:0:"";i:2;N;i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:6:"nolink";}i:2;i:34774;}i:1886;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:34815;}i:1887;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:34815;}i:1888;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:228:"There may be a situation when you need to execute a block of code several number of times. In general, statements are executed sequentially: The first statement in a function is executed first, followed by the second, and so on.";}i:2;i:34817;}i:1889;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:35045;}i:1890;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35045;}i:1891;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:"Programming languages provide various control structures that allow for more complicated execution paths.";}i:2;i:35047;}i:1892;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:35152;}i:1893;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35152;}i:1894;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:179:"A loop statement allows us to execute a statement or group of statements multiple times and following is the general form of a loop statement in most of the programming languages:";}i:2;i:35154;}i:1895;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:35334;}i:1896;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:2;i:1;i:5;i:2;i:35335;}i:2;i:35334;}i:1897;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:35334;}i:1898;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:35334;}i:1899;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:35334;}i:1900;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:" Loop Type ";}i:2;i:35336;}i:1901;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:35347;}i:1902;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:35347;}i:1903;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" Description ";}i:2;i:35348;}i:1904;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:35361;}i:1905;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:35362;}i:1906;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:35362;}i:1907;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:35362;}i:1908;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:35362;}i:1909;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" LOOP Basic ";}i:2;i:35364;}i:1910;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:35376;}i:1911;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:35376;}i:1912;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:209:" In this loop structure, sequence of statements is enclosed between the LOOP and END LOOP statements. At each iteration, the sequence of statements is executed and then control resumes at the top of the loop. ";}i:2;i:35377;}i:1913;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:35586;}i:1914;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:35587;}i:1915;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:35587;}i:1916;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:35587;}i:1917;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" LOOP WHILE ";}i:2;i:35589;}i:1918;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:35601;}i:1919;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:35601;}i:1920;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:132:" Repeats a statement or group of statements while a given condition is true. It tests the condition before executing the loop body. ";}i:2;i:35602;}i:1921;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:35734;}i:1922;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:35735;}i:1923;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:35735;}i:1924;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:35735;}i:1925;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" LOOP FOR ";}i:2;i:35737;}i:1926;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:35747;}i:1927;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:35747;}i:1928;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:106:" Execute a sequence of statements multiple times and abbreviates the code that manages the loop variable. ";}i:2;i:35748;}i:1929;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:35854;}i:1930;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:35855;}i:1931;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:35855;}i:1932;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:35855;}i:1933;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" Nested loops in PL/SQL ";}i:2;i:35857;}i:1934;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:35881;}i:1935;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:35881;}i:1936;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:" You can use one or more loop inside any another basic loop, while or for loop. ";}i:2;i:35882;}i:1937;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:35962;}i:1938;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:35963;}i:1939;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:35963;}i:2;i:35963;}i:1940;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:35965;}i:1941;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"Labeling a PL/SQL Loop";i:1;i:3;i:2;i:35965;}i:2;i:35965;}i:1942;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:35965;}i:1943;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:35965;}i:1944;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:84:"PL/SQL loops can be labeled. The label should be enclosed by double angle brackets (";}i:2;i:35999;}i:1945;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"<<";}i:2;i:36083;}i:1946;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" and ";}i:2;i:36085;}i:1947;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:">>";}i:2;i:36090;}i:1948;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:184:") and appear at the beginning of the LOOP statement. The label name can also appear at the end of the LOOP statement. You may use the label in the EXIT statement to exit from the loop.";}i:2;i:36092;}i:1949;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:36276;}i:1950;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:36276;}i:1951;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:"The following program illustrates the concept:";}i:2;i:36278;}i:1952;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:36325;}i:1953;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:260:"DECLARE
   i number(1);
   j number(1);
BEGIN
   << outer_loop >>
   FOR i IN 1..3 LOOP
      << inner_loop >>
      FOR j IN 1..3 LOOP
         dbms_output.put_line('i is: '|| i || ' and j is: ' || j);
      END loop inner_loop;
   END loop outer_loop;
END;
/";}i:2;i:36325;}i:1954;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:36614;}i:1955;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:27:"The Loop Control Statements";i:1;i:3;i:2;i:36614;}i:2;i:36614;}i:1956;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:36614;}i:1957;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:36614;}i:1958;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:166:"Loop control statements change execution from its normal sequence. When execution leaves a scope, all automatic objects that were created in that scope are destroyed.";}i:2;i:36653;}i:1959;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:36819;}i:1960;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:36819;}i:1961;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:163:"PL/SQL supports the following control statements. Labeling loops also helps in taking the control outside a loop. Click the following links to check their details.";}i:2;i:36821;}i:1962;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:36985;}i:1963;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:2;i:1;i:4;i:2;i:36986;}i:2;i:36985;}i:1964;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:36985;}i:1965;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:36985;}i:1966;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:36985;}i:1967;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" Control Statement ";}i:2;i:36987;}i:1968;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:37006;}i:1969;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:37006;}i:1970;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" Description ";}i:2;i:37007;}i:1971;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:37020;}i:1972;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:37021;}i:1973;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:37021;}i:1974;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:37021;}i:1975;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:37021;}i:1976;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" EXIT statement ";}i:2;i:37023;}i:1977;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:37039;}i:1978;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:37039;}i:1979;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:102:" The Exit statement completes the loop and control passes to the statement immediately after END LOOP ";}i:2;i:37040;}i:1980;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:37142;}i:1981;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:37143;}i:1982;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:37143;}i:1983;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:37143;}i:1984;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" CONTINUE statement ";}i:2;i:37145;}i:1985;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:37165;}i:1986;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:37165;}i:1987;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:110:" Causes the loop to skip the remainder of its body and immediately retest its condition prior to reiterating. ";}i:2;i:37166;}i:1988;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:37276;}i:1989;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:37277;}i:1990;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:37277;}i:1991;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:37277;}i:1992;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" GOTO statement ";}i:2;i:37279;}i:1993;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:37295;}i:1994;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:37295;}i:1995;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:109:" Transfers control to the labeled statement. Though it is not advised to use GOTO statement in your program. ";}i:2;i:37296;}i:1996;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:37405;}i:1997;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:37406;}i:1998;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:37406;}i:2;i:37406;}i:1999;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:37408;}i:2000;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"PL/SQL - Strings";i:1;i:2;i:2;i:37408;}i:2;i:37408;}i:2001;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:37408;}i:2002;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:37408;}i:2003;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:225:"The string in PL/SQL is actually a sequence of characters with an optional size specification. The characters could be numeric, letters, blank, special characters or a combination of all. PL/SQL offers three kinds of strings:";}i:2;i:37438;}i:2004;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:37664;}i:2005;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:37664;}i:2006;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:37664;}i:2007;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:37664;}i:2008;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:165:" Fixed-length strings: In such strings, programmers specify the length while declaring the string. The string is right-padded with spaces to the length so specified.";}i:2;i:37668;}i:2009;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:37833;}i:2010;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:37833;}i:2011;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:37833;}i:2012;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:37833;}i:2013;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:129:" Variable-length strings: In such strings, a maximum length up to 32,767, for the string is specified and no padding takes place.";}i:2;i:37837;}i:2014;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:37966;}i:2015;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:37966;}i:2016;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:37966;}i:2017;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:37966;}i:2018;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:100:" Character large objects (CLOBs): These are variable-length strings that can be up to 128 terabytes.";}i:2;i:37970;}i:2019;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:38070;}i:2020;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:38070;}i:2021;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:38070;}i:2022;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38070;}i:2023;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:119:"PL/SQL strings could be either variables or literals. A string literal is enclosed within quotation marks. For example,";}i:2;i:38072;}i:2024;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38192;}i:2025;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:44:"'This is a string literal.' Or 'hello world'";}i:2;i:38192;}i:2026;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38192;}i:2027;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:112:"To include a single quote inside a string literal, you need to type two single quotes next to one another, like:";}i:2;i:38240;}i:2028;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38353;}i:2029;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:32:"'this isn''t what it looks like'";}i:2;i:38353;}i:2030;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:38389;}i:2031;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"Declaring String Variables";i:1;i:3;i:2;i:38389;}i:2;i:38389;}i:2032;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:38389;}i:2033;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38389;}i:2034;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:219:"Oracle database provides numerous string datatypes , like, CHAR, NCHAR, VARCHAR2, NVARCHAR2, CLOB, and NCLOB. The datatypes prefixed with an 'N' are 'national character set' datatypes, that store Unicode character data.";}i:2;i:38427;}i:2035;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38646;}i:2036;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38646;}i:2037;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:214:"If you need to declare a variable-length string, you must provide the maximum length of that string. For example, the VARCHAR2 data type. The following example illustrates declaring and using some string variables:";}i:2;i:38648;}i:2038;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:38863;}i:2039;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:387:"DECLARE
   name varchar2(20);
   company varchar2(30);
   introduction clob;
   choice char(1);
BEGIN
   name := 'John Smith';
   company := 'Infotech';
   introduction := ' Hello! I''m John Smith from Infotech.';
   choice := 'y';
   IF choice = 'y' THEN
      dbms_output.put_line(name);
      dbms_output.put_line(company);
      dbms_output.put_line(introduction);
   END IF;
END;
/
";}i:2;i:38863;}i:2040;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:38863;}i:2041;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:287:"To declare a fixed-length string, use the CHAR datatype. Here you do not have to specify a maximum length for a fixed-length variable. If you leave off the length constraint, Oracle Database automatically uses a maximum length required. So following two declarations below are identical:";}i:2;i:39288;}i:2042;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39576;}i:2043;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:53:" red_flag CHAR(1) := 'Y';
 red_flag CHAR    := 'Y';  ";}i:2;i:39576;}i:2044;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:39636;}i:2045;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:37:"PL/SQL String Functions and Operators";i:1;i:2;i:2;i:39636;}i:2;i:39636;}i:2046;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:39636;}i:2047;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:39636;}i:2048;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:140:"PL/SQL offers the concatenation operator (||) for joining two strings. The following table provides the string functions provided by PL/SQL:";}i:2;i:39687;}i:2049;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:39828;}i:2050;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:39828;}i:2051;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:39828;}i:2052;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:39828;}i:2053;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:39832;}i:2054;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:5:"ASCII";}i:2;i:39833;}i:2055;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"(x); Returns the ";}i:2;i:39838;}i:2056;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:5:"ASCII";}i:2;i:39855;}i:2057;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" value of the character x.";}i:2;i:39860;}i:2058;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:39886;}i:2059;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:39886;}i:2060;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:39886;}i:2061;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:39886;}i:2062;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:" CHR(x); Returns the character with the ";}i:2;i:39890;}i:2063;a:3:{i:0;s:7:"acronym";i:1;a:1:{i:0;s:5:"ASCII";}i:2;i:39930;}i:2064;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" value of x.";}i:2;i:39935;}i:2065;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:39947;}i:2066;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:39947;}i:2067;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:39947;}i:2068;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:39947;}i:2069;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:79:" CONCAT(x, y); Concatenates the strings x and y and return the appended string.";}i:2;i:39951;}i:2070;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:40030;}i:2071;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:40030;}i:2072;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:40030;}i:2073;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:40030;}i:2074;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:" INITCAP(x); Converts the initial letter of each word in x to uppercase and returns that string.";}i:2;i:40034;}i:2075;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:40130;}i:2076;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:40130;}i:2077;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:40130;}i:2078;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:40130;}i:2079;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:123:" INSTR(x, find_string [, start] [, occurrence]); Searches for find_string in x and returns the position at which it occurs.";}i:2;i:40134;}i:2080;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:40257;}i:2081;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:40257;}i:2082;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:40257;}i:2083;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:40257;}i:2084;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:99:" INSTRB(x); Returns the location of a string within another string, but returns the value in bytes.";}i:2;i:40261;}i:2085;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:40360;}i:2086;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:40360;}i:2087;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:40360;}i:2088;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:40360;}i:2089;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" LENGTH(x); Returns the number of characters in x.";}i:2;i:40364;}i:2090;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:40414;}i:2091;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:40414;}i:2092;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:40414;}i:2093;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:40414;}i:2094;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:" LENGTHB(x); Returns the length of a character string in bytes for single byte character set.";}i:2;i:40418;}i:2095;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:40511;}i:2096;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:40511;}i:2097;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:40511;}i:2098;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:40511;}i:2099;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:" LOWER(x); Converts the letters in x to lowercase and returns that string.";}i:2;i:40515;}i:2100;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:40589;}i:2101;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:40589;}i:2102;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:40589;}i:2103;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:40589;}i:2104;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:123:" LPAD(x, width [, pad_string]); Pads x with spaces to left, to bring the total length of the string up to width characters.";}i:2;i:40593;}i:2105;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:40716;}i:2106;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:40716;}i:2107;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:40716;}i:2108;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:40716;}i:2109;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:" LTRIM(x [, trim_string]); Trims characters from the left of x.";}i:2;i:40720;}i:2110;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:40783;}i:2111;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:40783;}i:2112;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:40783;}i:2113;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:40783;}i:2114;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:107:" NANVL(x, value); Returns value if x matches the NaN special value (not a number), otherwise x is returned.";}i:2;i:40787;}i:2115;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:40894;}i:2116;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:40894;}i:2117;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:40894;}i:2118;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:40894;}i:2119;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:117:" NLS_INITCAP(x); Same as the INITCAP function except that it can use a different sort method as specified by NLSSORT.";}i:2;i:40898;}i:2120;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:41015;}i:2121;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:41015;}i:2122;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:41015;}i:2123;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:41015;}i:2124;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:113:" NLS_LOWER(x); Same as the LOWER function except that it can use a different sort method as specified by NLSSORT.";}i:2;i:41019;}i:2125;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:41132;}i:2126;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:41132;}i:2127;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:41132;}i:2128;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:41132;}i:2129;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:113:" NLS_UPPER(x); Same as the UPPER function except that it can use a different sort method as specified by NLSSORT.";}i:2;i:41136;}i:2130;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:41249;}i:2131;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:41249;}i:2132;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:41249;}i:2133;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:41249;}i:2134;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:143:" NLSSORT(x); Changes the method of sorting the characters. Must be specified before any NLS function; otherwise, the default sort will be used.";}i:2;i:41253;}i:2135;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:41396;}i:2136;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:41396;}i:2137;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:41396;}i:2138;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:41396;}i:2139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:" NVL(x, value); Returns value if x is null; otherwise, x is returned.";}i:2;i:41400;}i:2140;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:41469;}i:2141;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:41469;}i:2142;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:41469;}i:2143;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:41469;}i:2144;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:" NVL2(x, value1, value2); Returns value1 if x is not null; if x is null, value2 is returned.";}i:2;i:41473;}i:2145;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:41565;}i:2146;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:41565;}i:2147;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:41565;}i:2148;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:41565;}i:2149;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:109:" REPLACE(x, search_string, replace_string); Searches x for search_string and replaces it with replace_string.";}i:2;i:41569;}i:2150;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:41678;}i:2151;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:41678;}i:2152;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:41678;}i:2153;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:41678;}i:2154;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:" RPAD(x, width [, pad_string]); Pads x to the right.";}i:2;i:41682;}i:2155;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:41734;}i:2156;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:41734;}i:2157;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:41734;}i:2158;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:41734;}i:2159;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" RTRIM(x [, trim_string]); Trims x from the right.";}i:2;i:41738;}i:2160;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:41788;}i:2161;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:41788;}i:2162;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:41788;}i:2163;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:41788;}i:2164;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:" SOUNDEX(x); Returns a string containing the phonetic representation of x.";}i:2;i:41792;}i:2165;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:41866;}i:2166;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:41866;}i:2167;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:41866;}i:2168;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:41866;}i:2169;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:156:" SUBSTR(x, start [, length]); Returns a substring of x that begins at the position specified by start. An optional length for the substring may be supplied.";}i:2;i:41870;}i:2170;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:42026;}i:2171;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:42026;}i:2172;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:42026;}i:2173;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:42026;}i:2174;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:132:" SUBSTRB(x); Same as SUBSTR except the parameters are expressed in bytes instead of characters for the single-byte character systems";}i:2;i:42030;}i:2175;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:42162;}i:2176;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:42162;}i:2177;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:42162;}i:2178;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:42162;}i:2179;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:" TRIM([trim_char FROM) x); Trims characters from the left and right of x.";}i:2;i:42166;}i:2180;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:42239;}i:2181;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:42239;}i:2182;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:42239;}i:2183;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:42239;}i:2184;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:" UPPER(x); Converts the letters in x to uppercase and returns that string.";}i:2;i:42243;}i:2185;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:42317;}i:2186;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:42317;}i:2187;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:42317;}i:2188;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:42317;}i:2189;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:42319;}i:2190;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"Example 1";}i:2;i:42321;}i:2191;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:42330;}i:2192;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:42332;}i:2193;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:42333;}i:2194;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:100:"DECLARE
   greetings varchar2(11) := 'hello world';
BEGIN
   dbms_output.put_line(UPPER(greetings));";}i:2;i:42333;}i:2195;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:42:"   dbms_output.put_line(LOWER(greetings));";}i:2;i:42443;}i:2196;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:44:"   dbms_output.put_line(INITCAP(greetings));";}i:2;i:42489;}i:2197;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:104:"   /* retrieve the first character in the string */
   dbms_output.put_line ( SUBSTR (greetings, 1, 1));";}i:2;i:42537;}i:2198;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:104:"   /* retrieve the last character in the string */
   dbms_output.put_line ( SUBSTR (greetings, -1, 1));";}i:2;i:42647;}i:2199;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:130:"   /* retrieve five characters, 
      starting from the seventh position. */
   dbms_output.put_line ( SUBSTR (greetings, 7, 5));";}i:2;i:42757;}i:2200;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:137:"   /* retrieve the remainder of the string,
      starting from the second position. */
   dbms_output.put_line ( SUBSTR (greetings, 2));";}i:2;i:42895;}i:2201;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:102:"   /* find the location of the first "e" */
   dbms_output.put_line ( INSTR (greetings, 'e'));
END;
/
";}i:2;i:43040;}i:2202;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:43155;}i:2203;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:15:"PL/SQL - Arrays";i:1;i:2;i:2;i:43155;}i:2;i:43155;}i:2204;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:43155;}i:2205;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:43155;}i:2206;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:306:"PL/SQL programming language provides a data structure called the VARRAY, which can store a fixed-size sequential collection of elements of the same type. A varray is used to store an ordered collection of data, but it is often more useful to think of an array as a collection of variables of the same type.";}i:2;i:43184;}i:2207;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:43490;}i:2208;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:43490;}i:2209;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:148:"All varrays consist of contiguous memory locations. The lowest address corresponds to the first element and the highest address to the last element.";}i:2;i:43492;}i:2210;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:43640;}i:2211;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:43640;}i:2212;a:3:{i:0;s:13:"internalmedia";i:1;a:7:{i:0;s:19:":nortal:varrays.jpg";i:1;s:0:"";i:2;N;i:3;N;i:4;N;i:5;s:5:"cache";i:6;s:7:"details";}i:2;i:43642;}i:2213;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:43666;}i:2214;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:43666;}i:2215;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:160:"An array is a part of collection type data and it stands for variable-size arrays. We will study other collection types in a later chapter 'PL/SQL Collections'.";}i:2;i:43668;}i:2216;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:43828;}i:2217;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:43828;}i:2218;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:117:"Each element in a varray has an index associated with it. It also has a maximum size that can be changed dynamically.";}i:2;i:43830;}i:2219;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:43947;}i:2220;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:43949;}i:2221;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"Creating a Varray Type";i:1;i:3;i:2;i:43949;}i:2;i:43949;}i:2222;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:43949;}i:2223;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:43949;}i:2224;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:137:"A varray type is created with the CREATE TYPE statement. You must specify the maximum size and the type of elements stored in the varray.";}i:2;i:43983;}i:2225;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:44120;}i:2226;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:44120;}i:2227;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:"The basic syntax for creating a VRRAY type at the schema level is:";}i:2;i:44122;}i:2228;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:44189;}i:2229;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:70:"CREATE OR REPLACE TYPE varray_type_name IS VARRAY(n) of <element_type>";}i:2;i:44189;}i:2230;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:44189;}i:2231;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"Where,";}i:2;i:44263;}i:2232;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:44270;}i:2233;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:44270;}i:2234;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:44270;}i:2235;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:44270;}i:2236;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:" varray_type_name is a valid attribute name,";}i:2;i:44274;}i:2237;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:44318;}i:2238;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:44318;}i:2239;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:44318;}i:2240;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:44318;}i:2241;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:" n is the number of elements (maximum) in the varray,";}i:2;i:44322;}i:2242;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:44375;}i:2243;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:44375;}i:2244;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:44375;}i:2245;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:44375;}i:2246;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:" element_type is the data type of the elements of the array.";}i:2;i:44379;}i:2247;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:44439;}i:2248;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:44439;}i:2249;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:44439;}i:2250;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:44439;}i:2251;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:"Maximum size of a varray can be changed using the ALTER TYPE statement.";}i:2;i:44441;}i:2252;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:44512;}i:2253;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:44512;}i:2254;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"For example,";}i:2;i:44514;}i:2255;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:44527;}i:2256;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:78:"CREATE Or REPLACE TYPE namearray AS VARRAY(3) OF VARCHAR2(10);
/
Type created.";}i:2;i:44527;}i:2257;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:44527;}i:2258;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:"The basic syntax for creating a VRRAY type within a PL/SQL block is:";}i:2;i:44611;}i:2259;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:44680;}i:2260;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:52:"TYPE varray_type_name IS VARRAY(n) of <element_type>";}i:2;i:44680;}i:2261;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:44680;}i:2262;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"For example:";}i:2;i:44736;}i:2263;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:44749;}i:2264;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:82:"TYPE namearray IS VARRAY(5) OF VARCHAR2(10);
Type grades IS VARRAY(5) OF INTEGER;
";}i:2;i:44749;}i:2265;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:44749;}i:2266;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:44839;}i:2267;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"Example 1";}i:2;i:44841;}i:2268;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:44850;}i:2269;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:"
The following program illustrates using varrays:  ";}i:2;i:44852;}i:2270;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:44903;}i:2271;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:484:"DECLARE
   type namesarray IS VARRAY(5) OF VARCHAR2(10);
   type grades IS VARRAY(5) OF INTEGER;
   names namesarray;
   marks grades;
   total integer;
BEGIN
   names := namesarray('Kavita', 'Pritam', 'Ayan', 'Rishav', 'Aziz');
   marks:= grades(98, 97, 78, 87, 92);
   total := names.count;
   dbms_output.put_line('Total '|| total || ' Students');
   FOR i in 1 .. total LOOP
      dbms_output.put_line('Student: ' || names(i) || '
      Marks: ' || marks(i));
   END LOOP;
END;
/
";}i:2;i:44903;}i:2272;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:44903;}i:2273;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"Please note:";}i:2;i:45425;}i:2274;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:45438;}i:2275;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:45438;}i:2276;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:45438;}i:2277;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:45438;}i:2278;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:" In oracle environment, the starting index for varrays is always 1.";}i:2;i:45442;}i:2279;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:45509;}i:2280;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:45509;}i:2281;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:45509;}i:2282;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:45509;}i:2283;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:127:" You can initialize the varray elements using the constructor method of the varray type, which has the same name as the varray.";}i:2;i:45513;}i:2284;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:45640;}i:2285;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:45640;}i:2286;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:45640;}i:2287;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:45640;}i:2288;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:" Varrays are one-dimensional arrays.";}i:2;i:45644;}i:2289;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:45680;}i:2290;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:45680;}i:2291;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:45680;}i:2292;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:45680;}i:2293;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:114:" A varray is automatically NULL when it is declared and must be initialized before its elements can be referenced.";}i:2;i:45684;}i:2294;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:45798;}i:2295;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:45798;}i:2296;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:45798;}i:2297;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:45801;}i:2298;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"PL/SQL - Procedures";i:1;i:2;i:2;i:45801;}i:2;i:45801;}i:2299;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:45801;}i:2300;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:45801;}i:2301;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"A ";}i:2;i:45834;}i:2302;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:45836;}i:2303;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"subprogram";}i:2;i:45838;}i:2304;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:45848;}i:2305;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:259:" is a program unit/module that performs a particular task. These subprograms are combined to form larger programs. This is basically called the 'Modular design'. A subprogram can be invoked by another subprogram or program which is called the calling program.";}i:2;i:45850;}i:2306;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:46109;}i:2307;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:46109;}i:2308;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"A subprogram can be created:";}i:2;i:46111;}i:2309;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:46140;}i:2310;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:46140;}i:2311;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:46140;}i:2312;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:46140;}i:2313;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" At schema level";}i:2;i:46144;}i:2314;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:46160;}i:2315;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:46160;}i:2316;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:46160;}i:2317;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:46160;}i:2318;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" Inside a package";}i:2;i:46164;}i:2319;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:46181;}i:2320;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:46181;}i:2321;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:46181;}i:2322;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:46181;}i:2323;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" Inside a PL/SQL block";}i:2;i:46185;}i:2324;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:46207;}i:2325;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:46207;}i:2326;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:46207;}i:2327;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:46207;}i:2328;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:223:"A schema level subprogram is a standalone subprogram. It is created with the CREATE PROCEDURE or CREATE FUNCTION statement. It is stored in the database and can be deleted with the DROP PROCEDURE or DROP FUNCTION statement.";}i:2;i:46209;}i:2329;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:46432;}i:2330;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:46432;}i:2331;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:238:"A subprogram created inside a package is a packaged subprogram. It is stored in the database and can be deleted only when the package is deleted with the DROP PACKAGE statement. We will discuss packages in the chapter 'PL/SQL - Packages'.";}i:2;i:46434;}i:2332;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:46672;}i:2333;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:46672;}i:2334;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:130:"PL/SQL subprograms are named PL/SQL blocks that can be invoked with a set of parameters. PL/SQL provides two kinds of subprograms:";}i:2;i:46674;}i:2335;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:46805;}i:2336;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:46805;}i:2337;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:46805;}i:2338;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:46805;}i:2339;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:95:" Functions: these subprograms return a single value, mainly used to compute and return a value.";}i:2;i:46809;}i:2340;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:46904;}i:2341;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:46904;}i:2342;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:46904;}i:2343;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:46904;}i:2344;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:96:" Procedures: these subprograms do not return a value directly, mainly used to perform an action.";}i:2;i:46908;}i:2345;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:47004;}i:2346;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:47004;}i:2347;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:47004;}i:2348;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:47004;}i:2349;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:121:"This chapter is going to cover important aspects of a PL/SQL procedure and we will cover PL/SQL function in next chapter.";}i:2;i:47006;}i:2350;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:47127;}i:2351;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:47129;}i:2352;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:28:"Parts of a PL/SQL Subprogram";i:1;i:3;i:2;i:47129;}i:2;i:47129;}i:2353;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:47129;}i:2354;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:47129;}i:2355;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:168:"Each PL/SQL subprogram has a name, and may have a parameter list. Like anonymous PL/SQL blocks and, the named blocks a subprograms will also have following three parts:";}i:2;i:47169;}i:2356;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:47338;}i:2357;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:2;i:1;i:4;i:2;i:47339;}i:2;i:47338;}i:2358;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:47338;}i:2359;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:47338;}i:2360;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:47338;}i:2361;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" S.N. ";}i:2;i:47340;}i:2362;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:47346;}i:2363;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:47346;}i:2364;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" Parts & Description ";}i:2;i:47347;}i:2365;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:47368;}i:2366;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:47369;}i:2367;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:47369;}i:2368;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:47369;}i:2369;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:47369;}i:2370;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:" 1 ";}i:2;i:47371;}i:2371;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:47374;}i:2372;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:47374;}i:2373;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:47375;}i:2374;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:47376;}i:2375;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"Declarative Part";}i:2;i:47378;}i:2376;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:47394;}i:2377;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:318:" - It is an optional part. However, the declarative part for a subprogram does not start with the DECLARE keyword. It contains declarations of types, cursors, constants, variables, exceptions, and nested subprograms. These items are local to the subprogram and cease to exist when the subprogram completes execution.  ";}i:2;i:47396;}i:2378;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:47714;}i:2379;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:47715;}i:2380;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:47715;}i:2381;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:47715;}i:2382;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:" 2 ";}i:2;i:47717;}i:2383;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:47720;}i:2384;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:47720;}i:2385;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:47721;}i:2386;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:47722;}i:2387;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"Executable Part";}i:2;i:47724;}i:2388;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:47739;}i:2389;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:" - This is a mandatory part and contains statements that perform the designated action. ";}i:2;i:47741;}i:2390;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:47829;}i:2391;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:47830;}i:2392;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:47830;}i:2393;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:47830;}i:2394;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:" 3 ";}i:2;i:47832;}i:2395;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:47835;}i:2396;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:47835;}i:2397;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:47836;}i:2398;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:47837;}i:2399;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"Exception-handling";}i:2;i:47839;}i:2400;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:47857;}i:2401;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:" - This is again an optional part. It contains the code that handles run-time errors.  ";}i:2;i:47859;}i:2402;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:47946;}i:2403;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:47947;}i:2404;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:47947;}i:2;i:47947;}i:2405;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:47949;}i:2406;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"Creating a Procedure";i:1;i:3;i:2;i:47949;}i:2;i:47949;}i:2407;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:47949;}i:2408;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:47949;}i:2409;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:153:"A procedure is created with the CREATE OR REPLACE PROCEDURE statement. The simplified syntax for the CREATE OR REPLACE PROCEDURE statement is as follows:";}i:2;i:47981;}i:2410;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:48135;}i:2411;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:154:"CREATE [OR REPLACE] PROCEDURE procedure_name
[(parameter_name [IN | OUT | IN OUT] type [, ...])]
{IS | AS}
BEGIN
  < procedure_body >
END procedure_name;
";}i:2;i:48135;}i:2412;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:48135;}i:2413;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"Where,";}i:2;i:48305;}i:2414;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:48312;}i:2415;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:48312;}i:2416;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:48312;}i:2417;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:48312;}i:2418;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:" procedure-name specifies the name of the procedure.";}i:2;i:48316;}i:2419;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:48368;}i:2420;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:48368;}i:2421;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:48368;}i:2422;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:48368;}i:2423;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:60:" [OR REPLACE] option allows modifying an existing procedure.";}i:2;i:48372;}i:2424;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:48432;}i:2425;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:48432;}i:2426;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:48432;}i:2427;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:48432;}i:2428;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:226:" The optional parameter list contains name, mode and types of the parameters. IN represents that value will be passed from outside and OUT represents that this parameter will be used to return a value outside of the procedure.";}i:2;i:48436;}i:2429;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:48662;}i:2430;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:48662;}i:2431;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:48662;}i:2432;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:48662;}i:2433;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:" procedure-body contains the executable part.";}i:2;i:48666;}i:2434;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:48711;}i:2435;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:48711;}i:2436;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:48711;}i:2437;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:48711;}i:2438;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:" The AS keyword is used instead of the IS keyword for creating a standalone procedure.  ";}i:2;i:48715;}i:2439;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:48803;}i:2440;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:48803;}i:2441;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:48803;}i:2442;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:48803;}i:2443;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:48805;}i:2444;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Example";}i:2;i:48807;}i:2445;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:48814;}i:2446;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:48816;}i:2447;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:48816;}i:2448;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:117:"The following example creates a simple procedure that displays the string 'Hello World!' on the screen when executed.";}i:2;i:48818;}i:2449;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:48936;}i:2450;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:95:"CREATE OR REPLACE PROCEDURE greetings
AS
BEGIN
   dbms_output.put_line('Hello World!');
END;
/
";}i:2;i:48936;}i:2451;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:49047;}i:2452;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:32:"Executing a Standalone Procedure";i:1;i:3;i:2;i:49047;}i:2;i:49047;}i:2453;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:49047;}i:2454;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:49047;}i:2455;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"A standalone procedure can be called in two ways:";}i:2;i:49091;}i:2456;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:49141;}i:2457;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:49141;}i:2458;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:49141;}i:2459;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:49141;}i:2460;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" Using the EXECUTE keyword";}i:2;i:49145;}i:2461;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:49171;}i:2462;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:49171;}i:2463;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:49171;}i:2464;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:49171;}i:2465;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:" Calling the name of the procedure from a PL/SQL block";}i:2;i:49175;}i:2466;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:49229;}i:2467;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:49229;}i:2468;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:49229;}i:2469;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:49229;}i:2470;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"The above procedure named 'greetings' can be called with the EXECUTE keyword as:";}i:2;i:49231;}i:2471;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:49312;}i:2472;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:18:"EXECUTE greetings;";}i:2;i:49312;}i:2473;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:49312;}i:2474;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"The above call would display:";}i:2;i:49334;}i:2475;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:49364;}i:2476;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:11:"Hello World";}i:2;i:49364;}i:2477;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:40:"PL/SQL procedure successfully completed.";}i:2;i:49378;}i:2478;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:49378;}i:2479;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:"The procedure can also be called from another PL/SQL block:";}i:2;i:49422;}i:2480;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:49482;}i:2481;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:27:"BEGIN
   greetings;
END;
/
";}i:2;i:49482;}i:2482;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:49482;}i:2483;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"The above call would display:";}i:2;i:49521;}i:2484;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:49551;}i:2485;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:11:"Hello World";}i:2;i:49551;}i:2486;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:41:"PL/SQL procedure successfully completed.
";}i:2;i:49566;}i:2487;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:49613;}i:2488;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:31:"Deleting a Standalone Procedure";i:1;i:3;i:2;i:49613;}i:2;i:49613;}i:2489;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:49613;}i:2490;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:49613;}i:2491;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:104:"A standalone procedure is deleted with the DROP PROCEDURE statement. Syntax for deleting a procedure is:";}i:2;i:49656;}i:2492;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:49761;}i:2493;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:30:"DROP PROCEDURE procedure-name;";}i:2;i:49761;}i:2494;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:49761;}i:2495;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:"So you can drop greetings procedure by using the following statement:";}i:2;i:49795;}i:2496;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:49865;}i:2497;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:25:"DROP PROCEDURE greetings;";}i:2;i:49865;}i:2498;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:49894;}i:2499;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:37:"Parameter Modes in PL/SQL Subprograms";i:1;i:3;i:2;i:49894;}i:2;i:49894;}i:2500;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:49894;}i:2501;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:2;i:1;i:4;i:2;i:49943;}i:2;i:49942;}i:2502;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:49942;}i:2503;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:49942;}i:2504;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:49942;}i:2505;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" S.N. ";}i:2;i:49944;}i:2506;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:49950;}i:2507;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:49950;}i:2508;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:" Parameter Mode & Description ";}i:2;i:49951;}i:2509;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:49981;}i:2510;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:49982;}i:2511;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:49982;}i:2512;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:49982;}i:2513;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:49982;}i:2514;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:" 1 ";}i:2;i:49984;}i:2515;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:49987;}i:2516;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:49987;}i:2517;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:49988;}i:2518;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:49989;}i:2519;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"IN";}i:2;i:49991;}i:2520;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:49993;}i:2521;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:462:" - An IN parameter lets you pass a value to the subprogram. It is a read-only parameter. Inside the subprogram, an IN parameter acts like a constant. It cannot be assigned a value. You can pass a constant, literal, initialized variable, or expression as an IN parameter. You can also initialize it to a default value; however, in that case, it is omitted from the subprogram call. It is the default mode of parameter passing. Parameters are passed by reference. ";}i:2;i:49995;}i:2522;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:50457;}i:2523;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:50458;}i:2524;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:50458;}i:2525;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:50458;}i:2526;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:" 2 ";}i:2;i:50460;}i:2527;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:50463;}i:2528;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:50463;}i:2529;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:50464;}i:2530;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:50465;}i:2531;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:"OUT";}i:2;i:50467;}i:2532;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:50470;}i:2533;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:256:" - An OUT parameter returns a value to the calling program. Inside the subprogram, an OUT parameter acts like a variable. You can change its value and reference the value after assigning it. The actual parameter must be variable and it is passed by value. ";}i:2;i:50472;}i:2534;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:50728;}i:2535;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:50729;}i:2536;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:50729;}i:2537;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:50729;}i:2538;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:3:" 3 ";}i:2;i:50731;}i:2539;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:50734;}i:2540;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:50734;}i:2541;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:50735;}i:2542;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:50736;}i:2543;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"IN OUT";}i:2;i:50738;}i:2544;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:50744;}i:2545;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:359:" - An IN OUT parameter passes an initial value to a subprogram and returns an updated value to the caller. It can be assigned a value and its value can be read. The actual parameter corresponding to an IN OUT formal parameter must be a variable, not a constant or an expression. Formal parameter must be assigned a value. Actual parameter is passed by value. ";}i:2;i:50746;}i:2546;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:51105;}i:2547;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:51106;}i:2548;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:51106;}i:2;i:51106;}i:2549;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:51106;}i:2550;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:51108;}i:2551;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"IN & OUT Mode Example 1";}i:2;i:51110;}i:2552;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:51133;}i:2553;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:51135;}i:2554;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:51135;}i:2555;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:140:"This program finds the minimum of two values, here procedure takes two numbers using IN mode and returns their minimum using OUT parameters.";}i:2;i:51137;}i:2556;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:51278;}i:2557;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:46:"DECLARE
   a number;
   b number;
   c number;";}i:2;i:51278;}i:2558;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:134:"PROCEDURE findMin(x IN number, y IN number, z OUT number) IS
BEGIN
   IF x < y THEN
      z:= x;
   ELSE
      z:= y;
   END IF;
END; ";}i:2;i:51334;}i:2559;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:112:"BEGIN
   a:= 23;
   b:= 45;
   findMin(a, b, c);
   dbms_output.put_line(' Minimum of (23, 45) : ' || c);
END;
/";}i:2;i:51486;}i:2560;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:51486;}i:2561;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:51615;}i:2562;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:51696;}i:2563;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:25:" Minimum of (23, 45) : 23";}i:2;i:51696;}i:2564;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:41:"PL/SQL procedure successfully completed.
";}i:2;i:51725;}i:2565;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:51772;}i:2566;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:30:"Methods for Passing Parameters";i:1;i:3;i:2;i:51772;}i:2;i:51772;}i:2567;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:51772;}i:2568;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:51772;}i:2569;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:"Actual parameters could be passed in three ways:";}i:2;i:51814;}i:2570;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:51863;}i:2571;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:51863;}i:2572;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:51863;}i:2573;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:51863;}i:2574;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" Positional notation";}i:2;i:51867;}i:2575;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:51887;}i:2576;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:51887;}i:2577;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:51887;}i:2578;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:51887;}i:2579;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" Named notation";}i:2;i:51891;}i:2580;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:51906;}i:2581;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:51906;}i:2582;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:51906;}i:2583;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:51906;}i:2584;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" Mixed notation";}i:2;i:51910;}i:2585;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:51925;}i:2586;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:51925;}i:2587;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:51925;}i:2588;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:51927;}i:2589;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"POSITIONAL NOTATION";i:1;i:4;i:2;i:51927;}i:2;i:51927;}i:2590;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:51927;}i:2591;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:51927;}i:2592;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:"In positional notation, you can call the procedure as:";}i:2;i:51956;}i:2593;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:52010;}i:2594;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:20:"findMin(a, b, c, d);";}i:2;i:52010;}i:2595;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:52010;}i:2596;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:287:"In positional notation, the first actual parameter is substituted for the first formal parameter; the second actual parameter is substituted for the second formal parameter, and so on. So, a is substituted for x, b is substituted for y, c is substituted for z and d is substituted for m.";}i:2;i:52033;}i:2597;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:52320;}i:2598;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:52322;}i:2599;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"NAMED NOTATION";i:1;i:4;i:2;i:52322;}i:2;i:52322;}i:2600;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:52322;}i:2601;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:52322;}i:2602;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:"In named notation, the actual parameter is associated with the formal parameter using the arrow symbol ( ";}i:2;i:52346;}i:2603;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"=>";}i:2;i:52451;}i:2604;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:" ). So the procedure call would look like:";}i:2;i:52453;}i:2605;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:52495;}i:2606;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:33:"findMin(x=>a, y=>b, z=>c, m=>d);
";}i:2;i:52495;}i:2607;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:52534;}i:2608;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"MIXED NOTATION";i:1;i:4;i:2;i:52534;}i:2;i:52534;}i:2609;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:52534;}i:2610;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:52534;}i:2611;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:132:"In mixed notation, you can mix both notations in procedure call; however, the positional notation should precede the named notation.";}i:2;i:52558;}i:2612;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:52690;}i:2613;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:52690;}i:2614;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"The following call is legal:";}i:2;i:52692;}i:2615;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:52720;}i:2616;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:23:"findMin(a, b, c, m=>d);";}i:2;i:52720;}i:2617;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:52720;}i:2618;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"But this is not legal:";}i:2;i:52747;}i:2619;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:52769;}i:2620;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:25:"findMin(x=>a, b, c, d);  ";}i:2;i:52769;}i:2621;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:52801;}i:2622;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"PL/SQL - Functions";i:1;i:2;i:2;i:52801;}i:2;i:52801;}i:2623;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:52801;}i:2624;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:52801;}i:2625;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:153:"PL/SQL function is same as a procedure except that it returns a value. Therefore, all the discussions of the previous chapter are true for functions too.";}i:2;i:52833;}i:2626;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:52986;}i:2627;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:52988;}i:2628;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"Creating a Function";i:1;i:3;i:2;i:52988;}i:2;i:52988;}i:2629;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:52988;}i:2630;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:52988;}i:2631;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:152:"A standalone function is created using the CREATE FUNCTION statement. The simplified syntax for the CREATE OR REPLACE PROCEDURE statement is as follows:";}i:2;i:53019;}i:2632;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:53172;}i:2633;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:175:"CREATE [OR REPLACE] FUNCTION function_name
[(parameter_name [IN | OUT | IN OUT] type [, ...])]
RETURN return_datatype
{IS | AS}
BEGIN
   < function_body >
END [function_name];";}i:2;i:53172;}i:2634;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:53172;}i:2635;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"Where,";}i:2;i:53364;}i:2636;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:53370;}i:2637;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:53370;}i:2638;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:53370;}i:2639;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:53370;}i:2640;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" function-name specifies the name of the function.";}i:2;i:53375;}i:2641;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:53425;}i:2642;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:53425;}i:2643;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:53425;}i:2644;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:53425;}i:2645;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:" [OR REPLACE] option allows modifying an existing function.";}i:2;i:53429;}i:2646;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:53488;}i:2647;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:53488;}i:2648;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:53488;}i:2649;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:53488;}i:2650;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:226:" The optional parameter list contains name, mode and types of the parameters. IN represents that value will be passed from outside and OUT represents that this parameter will be used to return a value outside of the procedure.";}i:2;i:53492;}i:2651;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:53718;}i:2652;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:53718;}i:2653;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:53718;}i:2654;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:53718;}i:2655;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:46:" The function must contain a return statement.";}i:2;i:53722;}i:2656;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:53768;}i:2657;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:53768;}i:2658;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:53768;}i:2659;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:53768;}i:2660;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:82:" RETURN clause specifies that data type you are going to return from the function.";}i:2;i:53772;}i:2661;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:53854;}i:2662;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:53854;}i:2663;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:53854;}i:2664;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:53854;}i:2665;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:" function-body contains the executable part.";}i:2;i:53858;}i:2666;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:53902;}i:2667;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:53902;}i:2668;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:53902;}i:2669;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:53902;}i:2670;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:85:" The AS keyword is used instead of the IS keyword for creating a standalone function.";}i:2;i:53906;}i:2671;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:53991;}i:2672;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:53991;}i:2673;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:53991;}i:2674;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:53991;}i:2675;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:53993;}i:2676;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Example";}i:2;i:53995;}i:2677;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:54002;}i:2678;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:54004;}i:2679;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:54004;}i:2680;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:236:"The following example illustrates creating and calling a standalone function. This function returns the total number of CUSTOMERS in the customers table. We will use the CUSTOMERS table, which we had created in PL/SQL Variables chapter:";}i:2;i:54006;}i:2681;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:54243;}i:2682;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:24:"Select * from customers;";}i:2;i:54243;}i:2683;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:469:"+----+----------+-----+-----------+----------+
| ID | NAME     | AGE | ADDRESS   | SALARY   |
+----+----------+-----+-----------+----------+
|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
|  2 | Khilan   |  25 | Delhi     |  1500.00 |
|  3 | kaushik  |  23 | Kota      |  2000.00 |
|  4 | Chaitali |  25 | Mumbai    |  6500.00 |
|  5 | Hardik   |  27 | Bhopal    |  8500.00 |
|  6 | Komal    |  22 | MP        |  4500.00 |
+----+----------+-----+-----------+----------+";}i:2;i:54271;}i:2684;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:138:"CREATE OR REPLACE FUNCTION totalCustomers
RETURN number IS
   total number(2) := 0;
BEGIN
   SELECT count(*) into total
   FROM customers;";}i:2;i:54762;}i:2685;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:24:"   RETURN total;
END;
/
";}i:2;i:54914;}i:2686;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:54914;}i:2687;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:83:"When above code is executed using SQL prompt, it will produce the following result:";}i:2;i:54948;}i:2688;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:55031;}i:2689;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:55033;}i:2690;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"Calling a function";i:1;i:3;i:2;i:55033;}i:2;i:55033;}i:2691;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:55033;}i:2692;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:55033;}i:2693;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:252:"While creating a function, you give a definition of what the function has to do. To use a function, you will have to call that function to perform the defined task. When a program calls a function, program control is transferred to the called function.";}i:2;i:55063;}i:2694;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:55315;}i:2695;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:55315;}i:2696;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:176:"A called function performs defined task and when its return statement is executed or when it last end statement is reached, it returns program control back to the main program.";}i:2;i:55317;}i:2697;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:55493;}i:2698;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:55493;}i:2699;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:235:"To call a function you simply need to pass the required parameters along with function name and if function returns a value then you can store returned value. Following program calls the function totalCustomers from an anonymous block:";}i:2;i:55495;}i:2700;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:55731;}i:2701;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:121:"DECLARE
   c number(2);
BEGIN
   c := totalCustomers();
   dbms_output.put_line('Total no. of Customers: ' || c);
END;
/
";}i:2;i:55731;}i:2702;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:55731;}i:2703;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:55870;}i:2704;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Example";}i:2;i:55872;}i:2705;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:55879;}i:2706;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:55881;}i:2707;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:55881;}i:2708;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:164:"The following is one more example which demonstrates Declaring, Defining, and Invoking a Simple PL/SQL Function that computes and returns the maximum of two values.";}i:2;i:55883;}i:2709;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:56048;}i:2710;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:189:"DECLARE
   a number;
   b number;
   c number;
FUNCTION findMax(x IN number, y IN number) 
RETURN number
IS
    z number;
BEGIN
   IF x > y THEN
      z:= x;
   ELSE
      Z:= y;
   END IF;";}i:2;i:56048;}i:2711;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:46:"   RETURN z;
END; 
BEGIN
   a:= 23;
   b:= 45;";}i:2;i:56267;}i:2712;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:85:"   c := findMax(a, b);
   dbms_output.put_line(' Maximum of (23,45): ' || c);
END;
/
";}i:2;i:56325;}i:2713;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:56422;}i:2714;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"PL/SQL Recursive Functions";i:1;i:3;i:2;i:56422;}i:2;i:56422;}i:2715;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:56422;}i:2716;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:56422;}i:2717;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:179:"We have seen that a program or subprogram may call another subprogram. When a subprogram calls itself, it is referred to as a recursive call and the process is known as recursion.";}i:2;i:56460;}i:2718;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:56639;}i:2719;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:56639;}i:2720;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:111:"To illustrate the concept, let us calculate the factorial of a number. Factorial of a number n is defined as:  ";}i:2;i:56641;}i:2721;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:56753;}i:2722;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:73:"n! = n*(n-1)!
   = n*(n-1)*(n-2)!
      ...
   = n*(n-1)*(n-2)*(n-3)... 1";}i:2;i:56753;}i:2723;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:56753;}i:2724;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:95:"The following program calculates the factorial of a given number by calling itself recursively:";}i:2;i:56837;}i:2725;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:56933;}i:2726;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:43:"DECLARE
   num number;
   factorial number;";}i:2;i:56933;}i:2727;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:149:"FUNCTION fact(x number)
RETURN number 
IS
   f number;
BEGIN
   IF x=0 THEN
      f := 1;
   ELSE
      f := x * fact(x-1);
   END IF;
RETURN f;
END;";}i:2;i:56984;}i:2728;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:120:"BEGIN
   num:= 6;
   factorial := fact(num);
   dbms_output.put_line(' Factorial '|| num || ' is ' || factorial);
END;
/";}i:2;i:57159;}i:2729;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:57295;}i:2730;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"PL/SQL - Cursors";i:1;i:2;i:2;i:57295;}i:2;i:57295;}i:2731;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:57295;}i:2732;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:57295;}i:2733;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:197:"Oracle creates a memory area, known as context area, for processing an SQL statement, which contains all information needed for processing the statement, for example, number of rows processed, etc.";}i:2;i:57325;}i:2734;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:57522;}i:2735;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:57522;}i:2736;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:228:"A cursor is a pointer to this context area. PL/SQL controls the context area through a cursor. A cursor holds the rows (one or more) returned by a SQL statement. The set of rows the cursor holds is referred to as the active set.";}i:2;i:57524;}i:2737;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:57752;}i:2738;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:57752;}i:2739;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:174:"You can name a cursor so that it could be referred to in a program to fetch and process the rows returned by the SQL statement, one at a time. There are two types of cursors:";}i:2;i:57754;}i:2740;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:57929;}i:2741;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:57929;}i:2742;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:57929;}i:2743;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:57929;}i:2744;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" Implicit cursors";}i:2;i:57933;}i:2745;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:57950;}i:2746;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:57950;}i:2747;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:57950;}i:2748;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:57950;}i:2749;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" Explicit cursors";}i:2;i:57954;}i:2750;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:57971;}i:2751;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:57971;}i:2752;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:57971;}i:2753;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:57973;}i:2754;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"Implicit Cursors";i:1;i:3;i:2;i:57973;}i:2;i:57973;}i:2755;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:57973;}i:2756;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:57973;}i:2757;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:218:"Implicit cursors are automatically created by Oracle whenever an SQL statement is executed, when there is no explicit cursor for the statement. Programmers cannot control the implicit cursors and the information in it.";}i:2;i:58001;}i:2758;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:58219;}i:2759;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:58219;}i:2760;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:282:"Whenever a DML statement (INSERT, UPDATE and DELETE) is issued, an implicit cursor is associated with this statement. For INSERT operations, the cursor holds the data that needs to be inserted. For UPDATE and DELETE operations, the cursor identifies the rows that would be affected.";}i:2;i:58221;}i:2761;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:58503;}i:2762;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:58503;}i:2763;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:355:"In PL/SQL, you can refer to the most recent implicit cursor as the SQL cursor, which always has the attributes like %FOUND, %ISOPEN, %NOTFOUND, and %ROWCOUNT. The SQL cursor has additional attributes, %BULK_ROWCOUNT and %BULK_EXCEPTIONS, designed for use with the FORALL statement. The following table provides the description of the most used attributes:";}i:2;i:58505;}i:2764;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:58861;}i:2765;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:58861;}i:2766;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:58861;}i:2767;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:58861;}i:2768;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:58865;}i:2769;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:58866;}i:2770;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"%FOUND";}i:2;i:58868;}i:2771;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:58874;}i:2772;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:166:" - Returns TRUE if an INSERT, UPDATE, or DELETE statement affected one or more rows or a SELECT INTO statement returned one or more rows. Otherwise, it returns FALSE.";}i:2;i:58876;}i:2773;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:59042;}i:2774;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:59042;}i:2775;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:59042;}i:2776;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:59042;}i:2777;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:59046;}i:2778;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:59047;}i:2779;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"%NOTFOUND";}i:2;i:59049;}i:2780;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:59058;}i:2781;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:184:" - The logical opposite of %FOUND. It returns TRUE if an INSERT, UPDATE, or DELETE statement affected no rows, or a SELECT INTO statement returned no rows. Otherwise, it returns FALSE.";}i:2;i:59060;}i:2782;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:59244;}i:2783;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:59244;}i:2784;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:59244;}i:2785;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:59244;}i:2786;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:59248;}i:2787;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:59249;}i:2788;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"%ISOPEN";}i:2;i:59251;}i:2789;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:59258;}i:2790;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:142:" - Always returns FALSE for implicit cursors, because Oracle closes the SQL cursor automatically after executing its associated SQL statement.";}i:2;i:59260;}i:2791;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:59402;}i:2792;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:59402;}i:2793;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:59402;}i:2794;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:59402;}i:2795;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:59406;}i:2796;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:59407;}i:2797;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"%ROWCOUNT";}i:2;i:59409;}i:2798;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:59418;}i:2799;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:121:" - Returns the number of rows affected by an INSERT, UPDATE, or DELETE statement, or returned by a SELECT INTO statement.";}i:2;i:59420;}i:2800;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:59541;}i:2801;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:59541;}i:2802;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:59541;}i:2803;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:59541;}i:2804;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:"Any SQL cursor attribute will be accessed as ";}i:2;i:59543;}i:2805;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:59588;}i:2806;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"sql%attribute_name";}i:2;i:59590;}i:2807;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:59608;}i:2808;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:" as shown below in the example.";}i:2;i:59610;}i:2809;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:59641;}i:2810;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:59641;}i:2811;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:59643;}i:2812;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Example";}i:2;i:59645;}i:2813;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:59652;}i:2814;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:59654;}i:2815;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:59654;}i:2816;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:86:"We will be using the CUSTOMERS table we had created and used in the previous chapters.";}i:2;i:59656;}i:2817;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:59743;}i:2818;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:26:"  Select * from customers;";}i:2;i:59743;}i:2819;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:489:"  +----+----------+-----+-----------+----------+
  | ID | NAME     | AGE | ADDRESS   | SALARY   |
  +----+----------+-----+-----------+----------+
  |  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
  |  2 | Khilan   |  25 | Delhi     |  1500.00 |
  |  3 | kaushik  |  23 | Kota      |  2000.00 |
  |  4 | Chaitali |  25 | Mumbai    |  6500.00 |
  |  5 | Hardik   |  27 | Bhopal    |  8500.00 |
  |  6 | Komal    |  22 | MP        |  4500.00 |
  +----+----------+-----+-----------+----------+";}i:2;i:59773;}i:2820;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:59773;}i:2821;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:165:"The following program would update the table and increase salary of each customer by 500 and use the SQL%ROWCOUNT attribute to determine the number of rows affected:";}i:2;i:60285;}i:2822;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:60451;}i:2823;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:310:"DECLARE 
   total_rows number(2);
BEGIN
   UPDATE customers
   SET salary = salary + 500;
   IF sql%notfound THEN
      dbms_output.put_line('no customers selected');
   ELSIF sql%found THEN
      total_rows := sql%rowcount;
      dbms_output.put_line( total_rows || ' customers selected ');
   END IF; 
END;
/";}i:2;i:60451;}i:2824;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:60790;}i:2825;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"Explicit Cursors";i:1;i:3;i:2;i:60790;}i:2;i:60790;}i:2826;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:60790;}i:2827;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:60790;}i:2828;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:249:"Explicit cursors are programmer defined cursors for gaining more control over the context area. An explicit cursor should be defined in the declaration section of the PL/SQL Block. It is created on a SELECT Statement which returns more than one row.";}i:2;i:60818;}i:2829;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:61067;}i:2830;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:61067;}i:2831;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:"The syntax for creating an explicit cursor is :";}i:2;i:61069;}i:2832;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:61116;}i:2833;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:61116;}i:2834;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:"CURSOR cursor_name IS select_statement;
Working with an explicit cursor involves four steps:";}i:2;i:61118;}i:2835;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:61211;}i:2836;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:61211;}i:2837;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:61211;}i:2838;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:61211;}i:2839;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:" Declaring the cursor for initializing in the memory";}i:2;i:61215;}i:2840;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:61267;}i:2841;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:61267;}i:2842;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:61267;}i:2843;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:61267;}i:2844;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:" Opening the cursor for allocating memory";}i:2;i:61271;}i:2845;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:61312;}i:2846;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:61312;}i:2847;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:61312;}i:2848;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:61312;}i:2849;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:" Fetching the cursor for retrieving data";}i:2;i:61316;}i:2850;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:61356;}i:2851;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:61356;}i:2852;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:61356;}i:2853;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:61356;}i:2854;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:" Closing the cursor to release allocated memory";}i:2;i:61360;}i:2855;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:61407;}i:2856;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:61407;}i:2857;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:61407;}i:2858;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:61407;}i:2859;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:61409;}i:2860;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"Declaring the Cursor";}i:2;i:61411;}i:2861;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:61431;}i:2862;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:61433;}i:2863;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:61433;}i:2864;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:101:"Declaring the cursor defines the cursor with a name and the associated SELECT statement. For example:";}i:2;i:61435;}i:2865;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:61537;}i:2866;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:216:"CURSOR c_customers IS
   SELECT id, name, address FROM customers;
Opening the Cursor
Opening the cursor allocates memory for the cursor and makes it ready for fetching the rows returned by the SQL statement into it.
";}i:2;i:61537;}i:2867;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:61537;}i:2868;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:"For example, we will open above-defined cursor as follows:";}i:2;i:61765;}i:2869;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:61824;}i:2870;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:17:"OPEN c_customers;";}i:2;i:61824;}i:2871;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:61824;}i:2872;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:61846;}i:2873;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"Fetching the Cursor";}i:2;i:61848;}i:2874;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:61867;}i:2875;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:61869;}i:2876;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:61869;}i:2877;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:129:"Fetching the cursor involves accessing one row at a time. For example we will fetch rows from the above-opened cursor as follows:";}i:2;i:61871;}i:2878;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:62001;}i:2879;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:44:"FETCH c_customers INTO c_id, c_name, c_addr;";}i:2;i:62001;}i:2880;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:62001;}i:2881;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:62050;}i:2882;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"Closing the Cursor";}i:2;i:62052;}i:2883;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:62070;}i:2884;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:62072;}i:2885;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:62072;}i:2886;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:115:"Closing the cursor means releasing the allocated memory. For example, we will close above-opened cursor as follows:";}i:2;i:62074;}i:2887;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:62190;}i:2888;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:18:"CLOSE c_customers;";}i:2;i:62190;}i:2889;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:62190;}i:2890;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:62213;}i:2891;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Example";}i:2;i:62215;}i:2892;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:62222;}i:2893;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:62224;}i:2894;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:62224;}i:2895;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:79:"Following is a complete example to illustrate the concepts of explicit cursors:";}i:2;i:62226;}i:2896;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:62306;}i:2897;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:405:"DECLARE
   c_id customers.id%type;
   c_name customers.name%type;
   c_addr customers.address%type;
   CURSOR c_customers is
      SELECT id, name, address FROM customers;
BEGIN
   OPEN c_customers;
   LOOP
      FETCH c_customers into c_id, c_name, c_addr;
      EXIT WHEN c_customers%notfound;
      dbms_output.put_line(c_id || ' ' || c_name || ' ' || c_addr);
   END LOOP;
   CLOSE c_customers;
END;
/";}i:2;i:62306;}i:2898;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:62306;}i:2899;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:62746;}i:2900;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:62827;}i:2901;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:104:"1 Ramesh Ahmedabad 
2 Khilan Delhi 
3 kaushik Kota    
4 Chaitali Mumbai 
5 Hardik Bhopal  
6 Komal MP  ";}i:2;i:62827;}i:2902;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:62827;}i:2903;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"PL/SQL procedure successfully completed.";}i:2;i:62946;}i:2904;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:62986;}i:2905;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:62988;}i:2906;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"PL/SQL - Records";i:1;i:2;i:2;i:62988;}i:2;i:62988;}i:2907;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:62988;}i:2908;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:62988;}i:2909;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:155:"A PL/SQL record is a data structure that can hold data items of different kinds. Records consist of different fields, similar to a row of a database table.";}i:2;i:63018;}i:2910;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:63173;}i:2911;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:63173;}i:2912;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:334:"For example, you want to keep track of your books in a library. You might want to track the following attributes about each book like, Title, Author, Subject, Book ID. A record containing a field for each of these items allows treating a BOOK as a logical unit and allows you to organize and represent its information in a better way.";}i:2;i:63175;}i:2913;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:63509;}i:2914;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:63509;}i:2915;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"PL/SQL can handle the following types of records:";}i:2;i:63511;}i:2916;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:63560;}i:2917;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:63560;}i:2918;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:63560;}i:2919;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:63560;}i:2920;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" Table-based";}i:2;i:63564;}i:2921;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:63576;}i:2922;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:63576;}i:2923;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:63576;}i:2924;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:63576;}i:2925;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" Cursor-based records";}i:2;i:63580;}i:2926;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:63601;}i:2927;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:63601;}i:2928;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:63601;}i:2929;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:63601;}i:2930;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" User-defined records";}i:2;i:63605;}i:2931;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:63626;}i:2932;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:63626;}i:2933;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:63626;}i:2934;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:63628;}i:2935;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"Table-Based Records";i:1;i:3;i:2;i:63628;}i:2;i:63628;}i:2936;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:63628;}i:2937;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:63628;}i:2938;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:"The %ROWTYPE attribute enables a programmer to create table-based and cursor-based records.";}i:2;i:63659;}i:2939;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:63750;}i:2940;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:63750;}i:2941;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:161:"The following example would illustrate the concept of table-based records. We will be using the CUSTOMERS table we had created and used in the previous chapters:";}i:2;i:63752;}i:2942;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:63914;}i:2943;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:113:"DECLARE
   customer_rec customers%rowtype;
BEGIN
   SELECT * into customer_rec
   FROM customers
   WHERE id = 5;";}i:2;i:63914;}i:2944;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:273:"   dbms_output.put_line('Customer ID: ' || customer_rec.id);
   dbms_output.put_line('Customer Name: ' || customer_rec.name);
   dbms_output.put_line('Customer Address: ' || customer_rec.address);
   dbms_output.put_line('Customer Salary: ' || customer_rec.salary);
END;
/
";}i:2;i:64041;}i:2945;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:64330;}i:2946;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"Cursor-Based Records";i:1;i:3;i:2;i:64330;}i:2;i:64330;}i:2947;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:64330;}i:2948;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:64330;}i:2949;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:164:"The following example would illustrate the concept of cursor-based records. We will be using the CUSTOMERS table we had created and used in the previous chapters:  ";}i:2;i:64362;}i:2950;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:64527;}i:2951;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:337:"DECLARE
   CURSOR customer_cur is
      SELECT id, name, address 
      FROM customers;
   customer_rec customer_cur%rowtype;
BEGIN
   OPEN customer_cur;
   LOOP
      FETCH customer_cur into customer_rec;
      EXIT WHEN customer_cur%notfound;
      DBMS_OUTPUT.put_line(customer_rec.id || ' ' || customer_rec.name);
   END LOOP;
END;
/";}i:2;i:64527;}i:2952;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:64895;}i:2953;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"User-Defined Records";i:1;i:3;i:2;i:64895;}i:2;i:64895;}i:2954;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:64895;}i:2955;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:64895;}i:2956;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:259:"PL/SQL provides a user-defined record type that allows you to define different record structures. Records consist of different fields. Suppose you want to keep track of your books in a library. You might want to track the following attributes about each book:";}i:2;i:64927;}i:2957;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:65186;}i:2958;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:65186;}i:2959;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:65186;}i:2960;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:65186;}i:2961;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" Title";}i:2;i:65190;}i:2962;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:65196;}i:2963;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:65196;}i:2964;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:65196;}i:2965;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:65196;}i:2966;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" Author";}i:2;i:65200;}i:2967;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:65207;}i:2968;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:65207;}i:2969;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:65207;}i:2970;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:65207;}i:2971;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" Subject";}i:2;i:65211;}i:2972;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:65219;}i:2973;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:65219;}i:2974;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:65219;}i:2975;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:65219;}i:2976;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" Book ID";}i:2;i:65223;}i:2977;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:65231;}i:2978;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:65231;}i:2979;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:65231;}i:2980;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:65233;}i:2981;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Defining a Record";i:1;i:3;i:2;i:65233;}i:2;i:65233;}i:2982;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:65233;}i:2983;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:65233;}i:2984;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"The record type is defined as:";}i:2;i:65262;}i:2985;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:65293;}i:2986;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:250:"TYPE
type_name IS RECORD
  ( field_name1  datatype1  [NOT NULL]  [:= DEFAULT EXPRESSION],
   field_name2   datatype2   [NOT NULL]  [:= DEFAULT EXPRESSION],
   ...
   field_nameN  datatypeN  [NOT NULL]  [:= DEFAULT EXPRESSION);
record-name  type_name;";}i:2;i:65293;}i:2987;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:65293;}i:2988;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:"Here is the way you would declare the Book record:";}i:2;i:65560;}i:2989;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:65611;}i:2990;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:149:"DECLARE
TYPE books IS RECORD
(title  varchar(50),
    author  varchar(50),
    subject varchar(100),
    book_id   number);
book1 books;
book2 books;";}i:2;i:65611;}i:2991;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:65779;}i:2992;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"Accessing Fields";i:1;i:3;i:2;i:65779;}i:2;i:65779;}i:2993;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:65779;}i:2994;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:65779;}i:2995;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:233:"To access any field of a record, we use the dot (.) operator. The member access operator is coded as a period between the record variable name and the field that we wish to access. Following is the example to explain usage of record:";}i:2;i:65807;}i:2996;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:66041;}i:2997;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:346:"DECLARE
   type books is record
      (title varchar(50),
       author varchar(50),
       subject varchar(100),
       book_id number);
   book1 books;
   book2 books;
BEGIN
   -- Book 1 specification
   book1.title  := 'C Programming';
   book1.author := 'Nuha Ali '; 
   book1.subject := 'C Programming Tutorial';
   book1.book_id := 6495407;";}i:2;i:66041;}i:2998;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:66417;}i:2999;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:66417;}i:3000;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:66417;}i:3001;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"- Book 2 specification";}i:2;i:66424;}i:3002;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:66446;}i:3003;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:66446;}i:3004;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:66446;}i:3005;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:66446;}i:3006;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:"     book2.title := 'Telecom Billing';";}i:2;i:66447;}i:3007;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:66485;}i:3008;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:107:"   book2.author := 'Zara Ali';
   book2.subject := 'Telecom Billing Tutorial';
   book2.book_id := 6495700;";}i:2;i:66485;}i:3009;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:66600;}i:3010;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:66600;}i:3011;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:66600;}i:3012;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"- Print book 1 record";}i:2;i:66607;}i:3013;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:66628;}i:3014;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:66628;}i:3015;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:66628;}i:3016;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:66628;}i:3017;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:"     dbms_output.put_line('Book 1 title : '|| book1.title);";}i:2;i:66629;}i:3018;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:66688;}i:3019;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:184:"   dbms_output.put_line('Book 1 author : '|| book1.author);
   dbms_output.put_line('Book 1 subject : '|| book1.subject);
   dbms_output.put_line('Book 1 book_id : ' || book1.book_id);";}i:2;i:66688;}i:3020;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:66880;}i:3021;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:66880;}i:3022;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:66880;}i:3023;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:"- Print book 2 record";}i:2;i:66887;}i:3024;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:66908;}i:3025;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:66908;}i:3026;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:66908;}i:3027;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:66908;}i:3028;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:"     dbms_output.put_line('Book 2 title : '|| book2.title);";}i:2;i:66909;}i:3029;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:66968;}i:3030;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:191:"   dbms_output.put_line('Book 2 author : '|| book2.author);
   dbms_output.put_line('Book 2 subject : '|| book2.subject);
   dbms_output.put_line('Book 2 book_id : '|| book2.book_id);
END;
/
";}i:2;i:66968;}i:3031;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:67173;}i:3032;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:32:"Records as Subprogram Parameters";i:1;i:3;i:2;i:67173;}i:2;i:67173;}i:3033;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:67173;}i:3034;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:67173;}i:3035;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:198:"You can pass a record as a subprogram parameter in very similar way as you pass any other variable. You would access the record fields in the similar way as you have accessed in the above example:  ";}i:2;i:67217;}i:3036;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:67416;}i:3037;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:170:"DECLARE
   type books is record
      (title  varchar(50),
      author  varchar(50),
      subject varchar(100),
      book_id   number);
   book1 books;
   book2 books;";}i:2;i:67416;}i:3038;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:287:"PROCEDURE printbook (book books) IS
BEGIN
   dbms_output.put_line ('Book  title :  ' || book.title);
   dbms_output.put_line('Book  author : ' || book.author);
   dbms_output.put_line( 'Book  subject : ' || book.subject);
   dbms_output.put_line( 'Book book_id : ' || book.book_id);
END;";}i:2;i:67604;}i:3039;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:176:"BEGIN
   -- Book 1 specification
   book1.title  := 'C Programming';
   book1.author := 'Nuha Ali '; 
   book1.subject := 'C Programming Tutorial';
   book1.book_id := 6495407;";}i:2;i:67907;}i:3040;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:68097;}i:3041;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:68097;}i:3042;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:68097;}i:3043;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"- Book 2 specification";}i:2;i:68104;}i:3044;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:68126;}i:3045;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:68126;}i:3046;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:68126;}i:3047;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:68126;}i:3048;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:"     book2.title := 'Telecom Billing';";}i:2;i:68127;}i:3049;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:68165;}i:3050;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:107:"   book2.author := 'Zara Ali';
   book2.subject := 'Telecom Billing Tutorial';
   book2.book_id := 6495700;";}i:2;i:68165;}i:3051;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:68280;}i:3052;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:68280;}i:3053;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:68280;}i:3054;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:"- Use procedure to print book info";}i:2;i:68287;}i:3055;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:68321;}i:3056;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:68321;}i:3057;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:68321;}i:3058;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:68321;}i:3059;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"     printbook(book1);";}i:2;i:68322;}i:3060;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:68344;}i:3061;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:27:"   printbook(book2);
END;
/";}i:2;i:68344;}i:3062;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:68380;}i:3063;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:19:"PL/SQL - Exceptions";i:1;i:2;i:2;i:68380;}i:2;i:68380;}i:3064;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:68380;}i:3065;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:68380;}i:3066;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:268:"An error condition during a program execution is called an exception in PL/SQL. PL/SQL supports programmers to catch such conditions using EXCEPTION block in the program and an appropriate action is taken against the error condition. There are two types of exceptions:";}i:2;i:68413;}i:3067;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:68681;}i:3068;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:68681;}i:3069;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:68681;}i:3070;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:68681;}i:3071;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:" System-defined exceptions";}i:2;i:68685;}i:3072;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:68711;}i:3073;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:68711;}i:3074;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:68711;}i:3075;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:68711;}i:3076;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" User-defined exceptions";}i:2;i:68715;}i:3077;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:68739;}i:3078;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:68739;}i:3079;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:68739;}i:3080;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:68741;}i:3081;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:29:"Syntax for Exception Handling";i:1;i:3;i:2;i:68741;}i:2;i:68741;}i:3082;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:68741;}i:3083;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:68741;}i:3084;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:183:"The General Syntax for exception handling is as follows. Here you can list down as many as exceptions you want to handle. The default exception will be handled using WHEN others THEN:";}i:2;i:68782;}i:3085;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:68966;}i:3086;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:376:"DECLARE
   <declarations section>
BEGIN
   <executable command(s)>
EXCEPTION
   <exception handling goes here >
   WHEN exception1 THEN 
       exception1-handling-statements 
   WHEN exception2  THEN 
      exception2-handling-statements 
   WHEN exception3 THEN 
      exception3-handling-statements
   ........
   WHEN others THEN
      exception3-handling-statements
END;
";}i:2;i:68966;}i:3087;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:68966;}i:3088;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:69378;}i:3089;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Example";}i:2;i:69380;}i:3090;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:69387;}i:3091;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:69389;}i:3092;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:69389;}i:3093;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:143:"Let us write some simple code to illustrate the concept. We will be using the CUSTOMERS table we had created and used in the previous chapters:";}i:2;i:69391;}i:3094;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:69535;}i:3095;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:195:"DECLARE
   c_id customers.id%type := 8;
   c_name  customers.name%type;
   c_addr customers.address%type;
BEGIN
   SELECT  name, address INTO  c_name, c_addr
   FROM customers
   WHERE id = c_id;";}i:2;i:69535;}i:3096;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:248:"   DBMS_OUTPUT.PUT_LINE ('Name: '||  c_name);
   DBMS_OUTPUT.PUT_LINE ('Address: ' || c_addr);
EXCEPTION
   WHEN no_data_found THEN
      dbms_output.put_line('No such customer!');
   WHEN others THEN
      dbms_output.put_line('Error!');
END;
/  
";}i:2;i:69748;}i:3097;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:69748;}i:3098;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:70018;}i:3099;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:70099;}i:3100;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:58:"No such customer!
PL/SQL procedure successfully completed.";}i:2;i:70099;}i:3101;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:70099;}i:3102;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:237:"The above program displays the name and address of a customer whose ID is given. Since there is no customer with ID value 8 in our database, the program raises the run-time exception NO_DATA_FOUND, which is captured in EXCEPTION block.  ";}i:2;i:70162;}i:3103;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:70399;}i:3104;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:70401;}i:3105;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"Raising Exceptions";i:1;i:3;i:2;i:70401;}i:2;i:70401;}i:3106;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:70401;}i:3107;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:70401;}i:3108;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:247:"Exceptions are raised by the database server automatically whenever there is any internal database error, but exceptions can be raised explicitly by the programmer by using the command RAISE. Following is the simple syntax of raising an exception:";}i:2;i:70431;}i:3109;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:70679;}i:3110;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:159:"DECLARE
   exception_name EXCEPTION;
BEGIN
   IF condition THEN
      RAISE exception_name;
   END IF;
EXCEPTION
   WHEN exception_name THEN
   statement;
END;";}i:2;i:70679;}i:3111;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:70679;}i:3112;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:227:"You can use above syntax in raising Oracle standard exception or any user-defined exception. Next section will give you an example on raising user-defined exception, similar way you can raise Oracle standard exceptions as well.";}i:2;i:70861;}i:3113;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:71088;}i:3114;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:71090;}i:3115;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"User-defined Exceptions";i:1;i:3;i:2;i:71090;}i:2;i:71090;}i:3116;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:71090;}i:3117;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:71090;}i:3118;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:243:"PL/SQL allows you to define your own exceptions according to the need of your program. A user-defined exception must be declared and then raised explicitly, using either a RAISE statement or the procedure DBMS_STANDARD.RAISE_APPLICATION_ERROR.";}i:2;i:71125;}i:3119;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:71368;}i:3120;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:71368;}i:3121;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:"The syntax for declaring an exception is:";}i:2;i:71370;}i:3122;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:71412;}i:3123;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:34:"DECLARE
   my-exception EXCEPTION;";}i:2;i:71412;}i:3124;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:71412;}i:3125;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:71453;}i:3126;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Example";}i:2;i:71455;}i:3127;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:71462;}i:3128;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:71464;}i:3129;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:71464;}i:3130;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:155:"The following example illustrates the concept. This program asks for a customer ID, when the user enters an invalid ID, the exception invalid_id is raised.";}i:2;i:71466;}i:3131;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:71622;}i:3132;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:110:"DECLARE
   c_id customers.id%type := &cc_id;
   c_name  customers.name%type;
   c_addr customers.address%type;";}i:2;i:71622;}i:3133;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:71742;}i:3134;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:71742;}i:3135;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:71742;}i:3136;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"- user defined exception";}i:2;i:71749;}i:3137;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:71773;}i:3138;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:71773;}i:3139;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:71773;}i:3140;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:71773;}i:3141;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"     ex_invalid_id  EXCEPTION;";}i:2;i:71774;}i:3142;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:71804;}i:3143;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:154:"BEGIN
   IF c_id <= 0 THEN
      RAISE ex_invalid_id;
   ELSE
      SELECT  name, address INTO  c_name, c_addr
      FROM customers
      WHERE id = c_id;";}i:2;i:71804;}i:3144;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:351:"      DBMS_OUTPUT.PUT_LINE ('Name: '||  c_name);
      DBMS_OUTPUT.PUT_LINE ('Address: ' || c_addr);
   END IF;
EXCEPTION
   WHEN ex_invalid_id THEN
      dbms_output.put_line('ID must be greater than zero!');
   WHEN no_data_found THEN
      dbms_output.put_line('No such customer!');
   WHEN others THEN
      dbms_output.put_line('Error!'); 
END;
/";}i:2;i:71974;}i:3145;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:71974;}i:3146;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:72352;}i:3147;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:72433;}i:3148;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:160:"Enter value for cc_id: -6 (let's enter a value -6)
old  2: c_id customers.id%type := &cc_id;
new  2: c_id customers.id%type := -6;
ID must be greater than zero!";}i:2;i:72433;}i:3149;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:41:"PL/SQL procedure successfully completed.
";}i:2;i:72603;}i:3150;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:72650;}i:3151;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"Pre-defined Exceptions";i:1;i:3;i:2;i:72650;}i:2;i:72650;}i:3152;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:72650;}i:3153;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:72650;}i:3154;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:293:"PL/SQL provides many pre-defined exceptions, which are executed when any database rule is violated by a program. For example, the predefined exception NO_DATA_FOUND is raised when a SELECT INTO statement returns no rows. The following table lists few of the important pre-defined exceptions:  ";}i:2;i:72684;}i:3155;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:72978;}i:3156;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:4;i:1;i:17;i:2;i:72979;}i:2;i:72978;}i:3157;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:72978;}i:3158;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:72978;}i:3159;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:72978;}i:3160;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" Exception  ";}i:2;i:72980;}i:3161;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:72992;}i:3162;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:72992;}i:3163;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" Oracle error  ";}i:2;i:72993;}i:3164;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:73008;}i:3165;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:73008;}i:3166;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" SQLCODE  ";}i:2;i:73009;}i:3167;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:73019;}i:3168;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:73019;}i:3169;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" Description  ";}i:2;i:73020;}i:3170;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:73034;}i:3171;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:73035;}i:3172;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:73035;}i:3173;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:73035;}i:3174;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:73035;}i:3175;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" ACCESS_INTO_NULL  ";}i:2;i:73037;}i:3176;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:73056;}i:3177;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:73056;}i:3178;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"  06530  ";}i:2;i:73057;}i:3179;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:73066;}i:3180;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:73066;}i:3181;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"  -6530   ";}i:2;i:73067;}i:3182;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:73077;}i:3183;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:73077;}i:3184;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:" It is raised when a null object is automatically assigned a value.  ";}i:2;i:73078;}i:3185;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:73147;}i:3186;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:73148;}i:3187;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:73148;}i:3188;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:73148;}i:3189;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" CASE_NOT_FOUND  ";}i:2;i:73150;}i:3190;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:73167;}i:3191;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:73167;}i:3192;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"  06592  ";}i:2;i:73168;}i:3193;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:73177;}i:3194;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:73177;}i:3195;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"  -6592   ";}i:2;i:73178;}i:3196;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:73188;}i:3197;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:73188;}i:3198;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:122:" It is raised when none of the choices in the WHEN clauses of a CASE statement is selected, and there is no ELSE clause.  ";}i:2;i:73189;}i:3199;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:73311;}i:3200;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:73313;}i:3201;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:73313;}i:3202;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:73313;}i:3203;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" COLLECTION_IS_NULL  ";}i:2;i:73315;}i:3204;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:73336;}i:3205;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:73336;}i:3206;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"  06531  ";}i:2;i:73337;}i:3207;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:73346;}i:3208;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:73346;}i:3209;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"  -6531   ";}i:2;i:73347;}i:3210;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:73357;}i:3211;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:73357;}i:3212;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:230:" It is raised when a program attempts to apply collection methods other than EXISTS to an uninitialized nested table or varray, or the program attempts to assign values to the elements of an uninitialized nested table or varray.  ";}i:2;i:73358;}i:3213;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:73588;}i:3214;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:73589;}i:3215;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:73589;}i:3216;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:73589;}i:3217;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" DUP_VAL_ON_INDEX  ";}i:2;i:73591;}i:3218;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:73610;}i:3219;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:73610;}i:3220;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"  00001  ";}i:2;i:73611;}i:3221;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:73620;}i:3222;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:73620;}i:3223;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"  -1   ";}i:2;i:73621;}i:3224;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:73628;}i:3225;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:73628;}i:3226;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:95:" It is raised when duplicate values are attempted to be stored in a column with unique index.  ";}i:2;i:73629;}i:3227;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:73724;}i:3228;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:73725;}i:3229;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:73725;}i:3230;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:73725;}i:3231;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" INVALID_CURSOR  ";}i:2;i:73727;}i:3232;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:73744;}i:3233;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:73744;}i:3234;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"  01001  ";}i:2;i:73745;}i:3235;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:73754;}i:3236;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:73754;}i:3237;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"  -1001   ";}i:2;i:73755;}i:3238;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:73765;}i:3239;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:73765;}i:3240;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:122:" It is raised when attempts are made to make a cursor operation that is not allowed, such as closing an unopened cursor.  ";}i:2;i:73766;}i:3241;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:73888;}i:3242;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:73889;}i:3243;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:73889;}i:3244;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:73889;}i:3245;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" INVALID_NUMBER  ";}i:2;i:73891;}i:3246;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:73908;}i:3247;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:73908;}i:3248;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"  01722  ";}i:2;i:73909;}i:3249;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:73918;}i:3250;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:73918;}i:3251;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"  -1722   ";}i:2;i:73919;}i:3252;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:73929;}i:3253;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:73929;}i:3254;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:131:" It is raised when the conversion of a character string into a number fails because the string does not represent a valid number.  ";}i:2;i:73930;}i:3255;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74061;}i:3256;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:74062;}i:3257;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:74062;}i:3258;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:74062;}i:3259;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" LOGIN_DENIED  ";}i:2;i:74064;}i:3260;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74079;}i:3261;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:74079;}i:3262;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"  01017  ";}i:2;i:74080;}i:3263;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74089;}i:3264;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:74089;}i:3265;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"  -1017   ";}i:2;i:74090;}i:3266;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74100;}i:3267;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:74100;}i:3268;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:103:" It is raised when s program attempts to log on to the database with an invalid username or password.  ";}i:2;i:74101;}i:3269;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74204;}i:3270;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:74205;}i:3271;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:74205;}i:3272;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:74205;}i:3273;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" NO_DATA_FOUND  ";}i:2;i:74207;}i:3274;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74223;}i:3275;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:74223;}i:3276;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"  01403  ";}i:2;i:74224;}i:3277;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74233;}i:3278;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:74233;}i:3279;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"  +100   ";}i:2;i:74234;}i:3280;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74243;}i:3281;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:74243;}i:3282;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:61:" It is raised when a SELECT INTO statement returns no rows.  ";}i:2;i:74244;}i:3283;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74305;}i:3284;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:74306;}i:3285;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:74306;}i:3286;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:74306;}i:3287;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" NOT_LOGGED_ON  ";}i:2;i:74308;}i:3288;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74324;}i:3289;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:74324;}i:3290;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"  01012  ";}i:2;i:74325;}i:3291;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74334;}i:3292;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:74334;}i:3293;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"  -1012   ";}i:2;i:74335;}i:3294;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74345;}i:3295;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:74345;}i:3296;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:" It is raised when a database call is issued without being connected to the database.  ";}i:2;i:74346;}i:3297;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74433;}i:3298;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:74434;}i:3299;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:74434;}i:3300;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:74434;}i:3301;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" PROGRAM_ERROR  ";}i:2;i:74436;}i:3302;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74452;}i:3303;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:74452;}i:3304;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"  06501  ";}i:2;i:74453;}i:3305;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74462;}i:3306;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:74462;}i:3307;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"  -6501   ";}i:2;i:74463;}i:3308;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74473;}i:3309;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:74473;}i:3310;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:" It is raised when PL/SQL has an internal problem.  ";}i:2;i:74474;}i:3311;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74526;}i:3312;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:74527;}i:3313;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:74527;}i:3314;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:74527;}i:3315;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:" ROWTYPE_MISMATCH  ";}i:2;i:74529;}i:3316;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74548;}i:3317;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:74548;}i:3318;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"  06504  ";}i:2;i:74549;}i:3319;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74558;}i:3320;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:74558;}i:3321;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"  -6504   ";}i:2;i:74559;}i:3322;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74569;}i:3323;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:74569;}i:3324;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:88:" It is raised when a cursor fetches value in a variable having incompatible data type.  ";}i:2;i:74570;}i:3325;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74658;}i:3326;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:74659;}i:3327;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:74659;}i:3328;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:74659;}i:3329;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" SELF_IS_NULL  ";}i:2;i:74661;}i:3330;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74676;}i:3331;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:74676;}i:3332;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"  30625  ";}i:2;i:74677;}i:3333;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74686;}i:3334;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:74686;}i:3335;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"  -30625   ";}i:2;i:74687;}i:3336;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74698;}i:3337;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:74698;}i:3338;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:" It is raised when a member method is invoked, but the instance of the object type was not initialized.  ";}i:2;i:74699;}i:3339;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74804;}i:3340;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:74805;}i:3341;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:74805;}i:3342;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:74805;}i:3343;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" STORAGE_ERROR  ";}i:2;i:74807;}i:3344;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74823;}i:3345;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:74823;}i:3346;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"  06500  ";}i:2;i:74824;}i:3347;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74833;}i:3348;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:74833;}i:3349;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"  -6500   ";}i:2;i:74834;}i:3350;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74844;}i:3351;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:74844;}i:3352;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:" It is raised when PL/SQL ran out of memory or memory was corrupted.  ";}i:2;i:74845;}i:3353;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74915;}i:3354;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:74916;}i:3355;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:74916;}i:3356;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:74916;}i:3357;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" TOO_MANY_ROWS  ";}i:2;i:74918;}i:3358;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74934;}i:3359;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:74934;}i:3360;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"  01422  ";}i:2;i:74935;}i:3361;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74944;}i:3362;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:74944;}i:3363;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"  -1422   ";}i:2;i:74945;}i:3364;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:74955;}i:3365;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:74955;}i:3366;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:" It is raised when s SELECT INTO statement returns more than one row.  ";}i:2;i:74956;}i:3367;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:75027;}i:3368;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:75028;}i:3369;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:75028;}i:3370;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:75028;}i:3371;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" VALUE_ERROR  ";}i:2;i:75030;}i:3372;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:75044;}i:3373;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:75044;}i:3374;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"  06502  ";}i:2;i:75045;}i:3375;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:75054;}i:3376;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:75054;}i:3377;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"  -6502   ";}i:2;i:75055;}i:3378;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:75065;}i:3379;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:75065;}i:3380;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:92:" It is raised when an arithmetic, conversion, truncation, or size-constraint error occurs.  ";}i:2;i:75066;}i:3381;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:75158;}i:3382;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:75159;}i:3383;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:75159;}i:3384;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:75159;}i:3385;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:14:" ZERO_DIVIDE  ";}i:2;i:75161;}i:3386;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:75175;}i:3387;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:75175;}i:3388;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"  01476  ";}i:2;i:75176;}i:3389;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:75185;}i:3390;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:75185;}i:3391;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:"  1476   ";}i:2;i:75186;}i:3392;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:75195;}i:3393;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:75195;}i:3394;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:" It is raised when an attempt is made to divide a number by zero.  ";}i:2;i:75196;}i:3395;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:75263;}i:3396;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:75264;}i:3397;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:75264;}i:2;i:75264;}i:3398;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:75266;}i:3399;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"PL/SQL - Triggers";i:1;i:2;i:2;i:75266;}i:2;i:75266;}i:3400;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:75266;}i:3401;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:75266;}i:3402;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:185:"Triggers are stored programs, which are automatically executed or fired when some events occur. Triggers are, in fact, written to be executed in response to any of the following events:";}i:2;i:75297;}i:3403;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:75482;}i:3404;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:75482;}i:3405;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:75482;}i:3406;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:75482;}i:3407;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:" A database manipulation (DML) statement (DELETE, INSERT, or UPDATE).";}i:2;i:75486;}i:3408;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:75555;}i:3409;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:75555;}i:3410;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:75555;}i:3411;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:75555;}i:3412;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:" A database definition (DDL) statement (CREATE, ALTER, or DROP).";}i:2;i:75559;}i:3413;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:75623;}i:3414;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:75623;}i:3415;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:75623;}i:3416;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:75623;}i:3417;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:" A database operation (SERVERERROR, LOGON, LOGOFF, STARTUP, or SHUTDOWN).";}i:2;i:75627;}i:3418;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:75700;}i:3419;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:75700;}i:3420;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:75700;}i:3421;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:75700;}i:3422;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:101:"Triggers could be defined on the table, view, schema, or database with which the event is associated.";}i:2;i:75702;}i:3423;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:75803;}i:3424;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:75805;}i:3425;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"Benefits of Triggers";i:1;i:3;i:2;i:75805;}i:2;i:75805;}i:3426;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:75805;}i:3427;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:75805;}i:3428;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:"Triggers can be written for the following purposes:";}i:2;i:75837;}i:3429;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:75888;}i:3430;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:75888;}i:3431;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:75888;}i:3432;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:75888;}i:3433;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:" Generating some derived column values automatically";}i:2;i:75892;}i:3434;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:75944;}i:3435;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:75944;}i:3436;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:75944;}i:3437;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:75944;}i:3438;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" Enforcing referential integrity";}i:2;i:75948;}i:3439;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:75980;}i:3440;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:75980;}i:3441;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:75980;}i:3442;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:75980;}i:3443;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:" Event logging and storing information on table access";}i:2;i:75984;}i:3444;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:76038;}i:3445;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:76038;}i:3446;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:76038;}i:3447;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:76038;}i:3448;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" Auditing";}i:2;i:76042;}i:3449;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:76051;}i:3450;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:76051;}i:3451;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:76051;}i:3452;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:76051;}i:3453;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" Synchronous replication of tables";}i:2;i:76055;}i:3454;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:76089;}i:3455;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:76089;}i:3456;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:76089;}i:3457;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:76089;}i:3458;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:33:" Imposing security authorizations";}i:2;i:76093;}i:3459;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:76126;}i:3460;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:76126;}i:3461;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:76126;}i:3462;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:76126;}i:3463;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" Preventing invalid transactions";}i:2;i:76130;}i:3464;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:76162;}i:3465;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:76162;}i:3466;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:76162;}i:3467;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:76164;}i:3468;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"Creating Triggers";i:1;i:3;i:2;i:76164;}i:2;i:76164;}i:3469;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:76164;}i:3470;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:76164;}i:3471;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:"The syntax for creating a trigger is:";}i:2;i:76193;}i:3472;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:76231;}i:3473;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:324:"CREATE [OR REPLACE ] TRIGGER trigger_name 
{BEFORE | AFTER | INSTEAD OF } 
{INSERT [OR] | UPDATE [OR] | DELETE} 
[OF col_name] 
ON table_name 
[REFERENCING OLD AS o NEW AS n] 
[FOR EACH ROW] 
WHEN (condition)  
DECLARE
   Declaration-statements
BEGIN 
   Executable-statements
EXCEPTION
   Exception-handling-statements
END;";}i:2;i:76231;}i:3474;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:76231;}i:3475;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"Where,";}i:2;i:76588;}i:3476;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:76595;}i:3477;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:76595;}i:3478;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:76595;}i:3479;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:76595;}i:3480;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:" CREATE [OR REPLACE] TRIGGER trigger_name: Creates or replaces an existing trigger with the trigger_name.";}i:2;i:76599;}i:3481;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:76704;}i:3482;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:76704;}i:3483;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:76704;}i:3484;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:76704;}i:3485;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:145:" {BEFORE | AFTER | INSTEAD OF} : This specifies when the trigger would be executed. The INSTEAD OF clause is used for creating trigger on a view.";}i:2;i:76708;}i:3486;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:76853;}i:3487;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:76853;}i:3488;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:76853;}i:3489;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:76853;}i:3490;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:" {INSERT [OR] | UPDATE [OR] | DELETE}: This specifies the DML operation.";}i:2;i:76857;}i:3491;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:76929;}i:3492;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:76929;}i:3493;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:76929;}i:3494;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:76929;}i:3495;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:" [OF col_name]: This specifies the column name that would be updated.";}i:2;i:76933;}i:3496;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:77002;}i:3497;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:77002;}i:3498;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:77002;}i:3499;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:77002;}i:3500;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:83:" [ON table_name]: This specifies the name of the table associated with the trigger.";}i:2;i:77006;}i:3501;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:77089;}i:3502;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:77089;}i:3503;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:77089;}i:3504;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:77089;}i:3505;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:138:" [REFERENCING OLD AS o NEW AS n]: This allows you to refer new and old values for various DML statements, like INSERT, UPDATE, and DELETE.";}i:2;i:77093;}i:3506;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:77231;}i:3507;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:77231;}i:3508;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:77231;}i:3509;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:77231;}i:3510;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:237:" [FOR EACH ROW]: This specifies a row level trigger, i.e., the trigger would be executed for each row being affected. Otherwise the trigger will execute just once when the SQL statement is executed, which is called a table level trigger.";}i:2;i:77235;}i:3511;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:77472;}i:3512;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:77472;}i:3513;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:77472;}i:3514;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:77472;}i:3515;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:137:" WHEN (condition): This provides a condition for rows for which the trigger would fire. This clause is valid only for row level triggers.";}i:2;i:77476;}i:3516;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:77613;}i:3517;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:77613;}i:3518;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:77613;}i:3519;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:77613;}i:3520;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:77615;}i:3521;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Example";}i:2;i:77617;}i:3522;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:77624;}i:3523;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:77626;}i:3524;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:77626;}i:3525;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:101:"To start with, we will be using the CUSTOMERS table we had created and used in the previous chapters:";}i:2;i:77628;}i:3526;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:77729;}i:3527;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:77729;}i:3528;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"Select * from customers;";}i:2;i:77731;}i:3529;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:77756;}i:3530;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:469:"+----+----------+-----+-----------+----------+
| ID | NAME     | AGE | ADDRESS   | SALARY   |
+----+----------+-----+-----------+----------+
|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
|  2 | Khilan   |  25 | Delhi     |  1500.00 |
|  3 | kaushik  |  23 | Kota      |  2000.00 |
|  4 | Chaitali |  25 | Mumbai    |  6500.00 |
|  5 | Hardik   |  27 | Bhopal    |  8500.00 |
|  6 | Komal    |  22 | MP        |  4500.00 |
+----+----------+-----+-----------+----------+";}i:2;i:77756;}i:3531;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:77756;}i:3532;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:252:"The following program creates a row level trigger for the customers table that would fire for INSERT or UPDATE or DELETE operations performed on the CUSTOMERS table. This trigger will display the salary difference between the old values and new values:";}i:2;i:78248;}i:3533;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:78501;}i:3534;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:382:"CREATE OR REPLACE TRIGGER display_salary_changes
BEFORE DELETE OR INSERT OR UPDATE ON customers
FOR EACH ROW
WHEN (NEW.ID > 0)
DECLARE
   sal_diff number;
BEGIN
   sal_diff := :NEW.salary  - :OLD.salary;
   dbms_output.put_line('Old salary: ' || :OLD.salary);
   dbms_output.put_line('New salary: ' || :NEW.salary);
   dbms_output.put_line('Salary difference: ' || sal_diff);
END;
/";}i:2;i:78501;}i:3535;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:78501;}i:3536;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:78912;}i:3537;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:78993;}i:3538;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:16:"Trigger created.";}i:2;i:78993;}i:3539;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:78993;}i:3540;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:"Here following two points are important and should be noted carefully:";}i:2;i:79014;}i:3541;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79084;}i:3542;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:79084;}i:3543;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:79084;}i:3544;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:79084;}i:3545;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:118:" OLD and NEW references are not available for table level triggers, rather you can use them for record level triggers.";}i:2;i:79088;}i:3546;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:79206;}i:3547;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:79206;}i:3548;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:79206;}i:3549;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:79206;}i:3550;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:235:" If you want to query the table in the same trigger, then you should use the AFTER keyword, because triggers can query the table or change it again only after the initial changes are applied and the table is back in a consistent state.";}i:2;i:79210;}i:3551;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:79445;}i:3552;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:79445;}i:3553;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:79445;}i:3554;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:79445;}i:3555;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:306:" Above trigger has been written in such a way that it will fire before any DELETE or INSERT or UPDATE operation on the table, but you can write your trigger on a single or multiple operations, for example BEFORE DELETE, which will fire whenever a record will be deleted using DELETE operation on the table.";}i:2;i:79449;}i:3556;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:79755;}i:3557;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:79755;}i:3558;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:79755;}i:3559;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:79757;}i:3560;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"Triggering a Trigger";i:1;i:3;i:2;i:79757;}i:2;i:79757;}i:3561;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:79757;}i:3562;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79757;}i:3563;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:133:"Let us perform some DML operations on the CUSTOMERS table. Here is one INSERT statement, which will create a new record in the table:";}i:2;i:79789;}i:3564;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:79923;}i:3565;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:91:"INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (7, 'Kriti', 22, 'HP', 7500.00 );";}i:2;i:79923;}i:3566;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:79923;}i:3567;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:"When a record is created in CUSTOMERS table, above create trigger ";}i:2;i:80021;}i:3568;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:80087;}i:3569;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"display_salary_changes";}i:2;i:80089;}i:3570;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:80111;}i:3571;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:" will be fired and it will display the following result:";}i:2;i:80113;}i:3572;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:80170;}i:3573;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:47:"Old salary:
New salary: 7500
Salary difference:";}i:2;i:80170;}i:3574;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:80170;}i:3575;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:243:"Because this is a new record so old salary is not available and above result is coming as null. Now, let us perform one more DML operation on the CUSTOMERS table. Here is one UPDATE statement, which will update an existing record in the table:";}i:2;i:80226;}i:3576;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:80470;}i:3577;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:56:"UPDATE customers
SET salary = salary + 500
WHERE id = 2;";}i:2;i:80470;}i:3578;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:80470;}i:3579;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:"When a record is updated in CUSTOMERS table, above create trigger ";}i:2;i:80535;}i:3580;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:80601;}i:3581;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"display_salary_changes";}i:2;i:80603;}i:3582;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:80625;}i:3583;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:56:" will be fired and it will display the following result:";}i:2;i:80627;}i:3584;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:80684;}i:3585;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:56:"Old salary: 1500
New salary: 2000
Salary difference: 500";}i:2;i:80684;}i:3586;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:80749;}i:3587;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:17:"PL/SQL - Packages";i:1;i:2;i:2;i:80749;}i:2;i:80749;}i:3588;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:80749;}i:3589;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:80749;}i:3590;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:105:"PL/SQL packages are schema objects that groups logically related PL/SQL types, variables and subprograms.";}i:2;i:80780;}i:3591;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:80885;}i:3592;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:80885;}i:3593;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"A package will have two mandatory parts:";}i:2;i:80887;}i:3594;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:80927;}i:3595;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:80927;}i:3596;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:80927;}i:3597;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:80927;}i:3598;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" Package specification";}i:2;i:80931;}i:3599;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:80953;}i:3600;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:80953;}i:3601;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:80953;}i:3602;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:80953;}i:3603;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:27:" Package body or definition";}i:2;i:80957;}i:3604;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:80984;}i:3605;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:80984;}i:3606;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:80984;}i:3607;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:80986;}i:3608;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Package Specification";i:1;i:3;i:2;i:80986;}i:2;i:80986;}i:3609;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:80986;}i:3610;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:80986;}i:3611;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:307:"The specification is the interface to the package. It just DECLARES the types, variables, constants, exceptions, cursors, and subprograms that can be referenced from outside the package. In other words, it contains all information about the content of the package, but excludes the code for the subprograms.";}i:2;i:81019;}i:3612;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:81326;}i:3613;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:81326;}i:3614;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:172:"All objects placed in the specification are called public objects. Any subprogram not in the package specification but coded in the package body is called a private object.";}i:2;i:81328;}i:3615;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:81500;}i:3616;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:81500;}i:3617;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:181:"The following code snippet shows a package specification having a single procedure. You can have many global variables defined and multiple procedures or functions inside a package.";}i:2;i:81502;}i:3618;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:81684;}i:3619;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:90:"CREATE PACKAGE cust_sal AS
   PROCEDURE find_sal(c_id customers.id%type);
END cust_sal;
/
";}i:2;i:81684;}i:3620;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:81684;}i:3621;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:81786;}i:3622;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:81867;}i:3623;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:19:"Package created.  
";}i:2;i:81867;}i:3624;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:81892;}i:3625;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"Package Body";i:1;i:3;i:2;i:81892;}i:2;i:81892;}i:3626;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:81892;}i:3627;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:81892;}i:3628;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:168:"The package body has the codes for various methods declared in the package specification and other private declarations, which are hidden from code outside the package.";}i:2;i:81916;}i:3629;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:82084;}i:3630;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:82084;}i:3631;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:262:"The CREATE PACKAGE BODY Statement is used for creating the package body. The following code snippet shows the package body declaration for the cust_sal package created above. I assumed that we already have CUSTOMERS table created in our database as mentioned in ";}i:2;i:82086;}i:3632;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:31:"nortal:plsql#pl_sql_-_variables";i:1;s:9:"Variables";}i:2;i:82348;}i:3633;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" chapter.";}i:2;i:82393;}i:3634;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:82403;}i:3635;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:289:"CREATE OR REPLACE PACKAGE BODY cust_sal AS
   PROCEDURE find_sal(c_id customers.id%TYPE) IS
   c_sal customers.salary%TYPE;
   BEGIN
      SELECT salary INTO c_sal
      FROM customers
      WHERE id = c_id;
      dbms_output.put_line('Salary: '|| c_sal);
   END find_sal;
END cust_sal;
/
";}i:2;i:82403;}i:3636;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:82403;}i:3637;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:82718;}i:3638;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:82799;}i:3639;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:21:"Package body created.";}i:2;i:82799;}i:3640;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:82825;}i:3641;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"Using the Package Elements";i:1;i:3;i:2;i:82825;}i:2;i:82825;}i:3642;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:82825;}i:3643;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:82825;}i:3644;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:97:"The package elements (variables, procedures or functions) are accessed with the following syntax:";}i:2;i:82863;}i:3645;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:82961;}i:3646;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:27:"package_name.element_name;
";}i:2;i:82961;}i:3647;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:82961;}i:3648;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:143:"Consider, we already have created above package in our database schema, the following program uses the find_sal method of the cust_sal package:";}i:2;i:82994;}i:3649;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:83138;}i:3650;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:85:"DECLARE
   code customers.id%type := &cc_id;
BEGIN
   cust_sal.find_sal(code);
END;
/";}i:2;i:83138;}i:3651;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:83138;}i:3652;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:148:"When the above code is executed at SQL prompt, it prompt to enter customer ID and when you enter an ID, it displays corresponding salary as follows:";}i:2;i:83238;}i:3653;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:83387;}i:3654;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:79:"Enter value for cc_id: 1
Salary: 3000
PL/SQL procedure successfully completed.
";}i:2;i:83387;}i:3655;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:83387;}i:3656;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:83476;}i:3657;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Example";}i:2;i:83478;}i:3658;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:83485;}i:3659;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:83487;}i:3660;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:83487;}i:3661;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:138:"The following program provides a more complete package. We will use the CUSTOMERS table stored in our database with the following records:";}i:2;i:83489;}i:3662;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:83628;}i:3663;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:24:"Select * from customers;";}i:2;i:83628;}i:3664;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:470:"+----+----------+-----+-----------+----------+
| ID | NAME     | AGE | ADDRESS   | SALARY   |
+----+----------+-----+-----------+----------+
|  1 | Ramesh   |  32 | Ahmedabad |  3000.00 |
|  2 | Khilan   |  25 | Delhi     |  3000.00 |
|  3 | kaushik  |  23 | Kota      |  3000.00 |
|  4 | Chaitali |  25 | Mumbai    |  7500.00 |
|  5 | Hardik   |  27 | Bhopal    |  9500.00 |
|  6 | Komal    |  22 | MP        |  5500.00 |
+----+----------+-----+-----------+----------+
";}i:2;i:83656;}i:3665;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:83656;}i:3666;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"THE PACKAGE SPECIFICATION:";}i:2;i:84150;}i:3667;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:84177;}i:3668;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:242:"CREATE OR REPLACE PACKAGE c_package AS
   -- Adds a customer
   PROCEDURE addCustomer(c_id   customers.id%type,
   c_name  customers.name%type,
   c_age  customers.age%type,
   c_addr customers.address%type, 
   c_sal  customers.salary%type);";}i:2;i:84177;}i:3669;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:84435;}i:3670;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:84435;}i:3671;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:84435;}i:3672;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"- Removes a customer";}i:2;i:84442;}i:3673;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:84462;}i:3674;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:84462;}i:3675;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:84462;}i:3676;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:84462;}i:3677;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:"     PROCEDURE delCustomer(c_id  customers.id%TYPE);";}i:2;i:84463;}i:3678;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:84515;}i:3679;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:84515;}i:3680;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:84515;}i:3681;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:84515;}i:3682;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"-Lists all customers";}i:2;i:84522;}i:3683;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:84542;}i:3684;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:84542;}i:3685;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:84542;}i:3686;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:84542;}i:3687;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"     PROCEDURE listCustomer;";}i:2;i:84543;}i:3688;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:84572;}i:3689;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:19:"END c_package;
/  
";}i:2;i:84572;}i:3690;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:84572;}i:3691;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:110:"When the above code is executed at SQL prompt, it creates the above package and displays the following result:";}i:2;i:84599;}i:3692;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:84710;}i:3693;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:18:"Package created.  ";}i:2;i:84710;}i:3694;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:84710;}i:3695;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:26:"CREATING THE PACKAGE BODY:";}i:2;i:84732;}i:3696;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:84759;}i:3697;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:381:"CREATE OR REPLACE PACKAGE BODY c_package AS
   PROCEDURE addCustomer(c_id  customers.id%type,
      c_name customers.name%type,
      c_age  customers.age%type,
      c_addr  customers.address%type, 
      c_sal   customers.salary%type)
   IS
   BEGIN
      INSERT INTO customers (id,name,age,address,salary)
         VALUES(c_id, c_name, c_age, c_addr, c_sal);
   END addCustomer;";}i:2;i:84759;}i:3698;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:137:"   PROCEDURE delCustomer(c_id   customers.id%type) IS
   BEGIN
       DELETE FROM customers
         WHERE id = c_id;
   END delCustomer;";}i:2;i:85164;}i:3699;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:456:"   PROCEDURE listCustomer IS
   CURSOR c_customers is
      SELECT  name FROM customers;
   TYPE c_list is TABLE OF customers.name%type;
   name_list c_list := c_list();
   counter integer :=0;
   BEGIN
      FOR n IN c_customers LOOP
      counter := counter +1;
      name_list.extend;
      name_list(counter)  := n.name;
      dbms_output.put_line('Customer(' ||counter|| ')'||name_list(counter));
      END LOOP;
   END listCustomer;
END c_package;
/
";}i:2;i:85313;}i:3700;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:85313;}i:3701;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:163:"Above example makes use of nested table which we will discuss in the next chapter. When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:85805;}i:3702;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:85969;}i:3703;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:21:"Package body created.";}i:2;i:85969;}i:3704;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:85969;}i:3705;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:"USING THE PACKAGE:";}i:2;i:85995;}i:3706;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:86013;}i:3707;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:86013;}i:3708;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:85:"The following program uses the methods declared and defined in the package c_package.";}i:2;i:86015;}i:3709;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:86101;}i:3710;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:272:"DECLARE
   code customers.id%type:= 8;
BEGIN
      c_package.addcustomer(7, 'Rajnish', 25, 'Chennai', 3500);
      c_package.addcustomer(8, 'Subham', 32, 'Delhi', 7500);
      c_package.listcustomer;
      c_package.delcustomer(code);
      c_package.listcustomer;
END;
/
";}i:2;i:86101;}i:3711;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:86101;}i:3712;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:86397;}i:3713;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:86478;}i:3714;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:321:"Customer(1): Ramesh 
Customer(2): Khilan 
Customer(3): kaushik    
Customer(4): Chaitali 
Customer(5): Hardik 
Customer(6): Komal
Customer(7): Rajnish
Customer(8): Subham
Customer(1): Ramesh 
Customer(2): Khilan 
Customer(3): kaushik    
Customer(4): Chaitali 
Customer(5): Hardik 
Customer(6): Komal
Customer(7): Rajnish";}i:2;i:86478;}i:3715;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:42:"PL/SQL procedure successfully completed  
";}i:2;i:86831;}i:3716;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:86879;}i:3717;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"PL/SQL - Collections";i:1;i:2;i:2;i:86879;}i:2;i:86879;}i:3718;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:86879;}i:3719;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:86879;}i:3720;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:168:"A collection is an ordered group of elements having the same data type. Each element is identified by a unique subscript that represents its position in the collection.";}i:2;i:86913;}i:3721;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:87081;}i:3722;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:87081;}i:3723;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:"PL/SQL provides three collection types:";}i:2;i:87083;}i:3724;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:87122;}i:3725;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:87122;}i:3726;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:87122;}i:3727;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:87122;}i:3728;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:37:" Index-by tables or Associative array";}i:2;i:87126;}i:3729;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:87163;}i:3730;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:87163;}i:3731;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:87163;}i:3732;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:87163;}i:3733;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" Nested table";}i:2;i:87167;}i:3734;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:87180;}i:3735;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:87180;}i:3736;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:87180;}i:3737;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:87180;}i:3738;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:" Variable-size array or Varray";}i:2;i:87184;}i:3739;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:87214;}i:3740;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:87214;}i:3741;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:87214;}i:3742;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:87214;}i:3743;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:89:"Oracle documentation provides the following characteristics for each type of collections:";}i:2;i:87216;}i:3744;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:87305;}i:3745;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:6;i:1;i:4;i:2;i:87306;}i:2;i:87305;}i:3746;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:87305;}i:3747;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:87305;}i:3748;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:87305;}i:3749;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" Collection type  ";}i:2;i:87307;}i:3750;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:87325;}i:3751;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:87325;}i:3752;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" Number of Elements  ";}i:2;i:87326;}i:3753;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:87347;}i:3754;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:87347;}i:3755;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" Subscript Type  ";}i:2;i:87348;}i:3756;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:87365;}i:3757;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:87365;}i:3758;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:18:" Dense or Sparse  ";}i:2;i:87366;}i:3759;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:87384;}i:3760;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:87384;}i:3761;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" Where Created  ";}i:2;i:87385;}i:3762;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:87401;}i:3763;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:87401;}i:3764;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:" Can Be Object Type Attribute  ";}i:2;i:87402;}i:3765;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:87433;}i:3766;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:87434;}i:3767;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:87434;}i:3768;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:87434;}i:3769;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:87434;}i:3770;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:" Associative array (or index-by table)  ";}i:2;i:87436;}i:3771;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:87476;}i:3772;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:87476;}i:3773;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" Unbounded  ";}i:2;i:87477;}i:3774;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:87489;}i:3775;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:87489;}i:3776;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" String or integer  ";}i:2;i:87490;}i:3777;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:87510;}i:3778;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:87510;}i:3779;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" Either  ";}i:2;i:87511;}i:3780;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:87520;}i:3781;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:87520;}i:3782;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" Only in PL/SQL block  ";}i:2;i:87521;}i:3783;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:87544;}i:3784;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:87544;}i:3785;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:"  No  ";}i:2;i:87545;}i:3786;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:87551;}i:3787;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:87552;}i:3788;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:87552;}i:3789;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:87552;}i:3790;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" Nested table  ";}i:2;i:87554;}i:3791;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:87569;}i:3792;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:87569;}i:3793;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" Unbounded  ";}i:2;i:87570;}i:3794;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:87582;}i:3795;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:87582;}i:3796;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"	Integer	 ";}i:2;i:87583;}i:3797;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:87593;}i:3798;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:87593;}i:3799;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" Starts dense, can become sparse  ";}i:2;i:87594;}i:3800;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:87628;}i:3801;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:87628;}i:3802;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:" Either in PL/SQL block or at schema level  ";}i:2;i:87629;}i:3803;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:87673;}i:3804;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:87673;}i:3805;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"  Yes  ";}i:2;i:87674;}i:3806;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:87681;}i:3807;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:87682;}i:3808;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:87682;}i:3809;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:87682;}i:3810;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:" Variable-size array (Varray)  ";}i:2;i:87684;}i:3811;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:87715;}i:3812;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:87715;}i:3813;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" Bounded  ";}i:2;i:87716;}i:3814;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:87726;}i:3815;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:87726;}i:3816;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" Integer  ";}i:2;i:87727;}i:3817;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:87737;}i:3818;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:87737;}i:3819;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" Always dense  ";}i:2;i:87738;}i:3820;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:87753;}i:3821;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:4:"left";i:2;i:1;}i:2;i:87753;}i:3822;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:" Either in PL/SQL block or at schema level  ";}i:2;i:87754;}i:3823;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:87798;}i:3824;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:6:"center";i:2;i:1;}i:2;i:87798;}i:3825;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"  Yes  ";}i:2;i:87799;}i:3826;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:87806;}i:3827;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:87807;}i:3828;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:87807;}i:2;i:87807;}i:3829;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:87807;}i:3830;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"We have already discussed varray in the chapter '";}i:2;i:87809;}i:3831;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:28:"nortal:plsql#pl_sql_-_arrays";i:1;s:13:"PL/SQL arrays";}i:2;i:87858;}i:3832;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:"'. In this chapter, we will discuss PL/SQL tables.";}i:2;i:87904;}i:3833;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:87954;}i:3834;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:87954;}i:3835;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:292:"Both types of PL/SQL tables, i.e., index-by tables and nested tables have the same structure and their rows are accessed using the subscript notation. However, these two types of tables differ in one aspect; the nested tables can be stored in a database column and the index-by tables cannot.";}i:2;i:87956;}i:3836;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:88248;}i:3837;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:88250;}i:3838;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"Index-By Table";i:1;i:3;i:2;i:88250;}i:2;i:88250;}i:3839;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:88250;}i:3840;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:88250;}i:3841;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:193:"An index-by table (also called an associative array) is a set of key-value pairs. Each key is unique and is used to locate the corresponding value. The key can be either an integer or a string.";}i:2;i:88277;}i:3842;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:88470;}i:3843;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:88470;}i:3844;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:196:"An index-by table is created using the following syntax. Here, we are creating an index-by table named table_name whose keys will be of subscript_type and associated values will be of element_type";}i:2;i:88472;}i:3845;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:88669;}i:3846;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:97:"TYPE type_name IS TABLE OF element_type [NOT NULL] INDEX BY subscript_type;
table_name type_name;";}i:2;i:88669;}i:3847;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:88669;}i:3848;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:88773;}i:3849;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Example";}i:2;i:88775;}i:3850;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:88782;}i:3851;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:88784;}i:3852;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:88784;}i:3853;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:130:"Following example shows how to create a table to store integer values along with names and later it prints the same list of names.";}i:2;i:88786;}i:3854;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:88917;}i:3855;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:297:"DECLARE
   TYPE salary IS TABLE OF NUMBER INDEX BY VARCHAR2(20);
   salary_list salary;
   name   VARCHAR2(20);
BEGIN
   -- adding elements to the table
   salary_list('Rajnish')  := 62000;
   salary_list('Minakshi')  := 75000;
   salary_list('Martin') := 100000;
   salary_list('James') := 78000;";}i:2;i:88917;}i:3856;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:89236;}i:3857;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:89236;}i:3858;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:89236;}i:3859;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:"- printing the table";}i:2;i:89243;}i:3860;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:89263;}i:3861;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:89263;}i:3862;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:89263;}i:3863;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:89263;}i:3864;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:"     name := salary_list.FIRST;";}i:2;i:89264;}i:3865;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:89295;}i:3866;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:185:"   WHILE name IS NOT null LOOP
      dbms_output.put_line
      ('Salary of ' || name || ' is ' || TO_CHAR(salary_list(name)));
      name := salary_list.NEXT(name);
   END LOOP;
END;
/";}i:2;i:89295;}i:3867;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:89295;}i:3868;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:89497;}i:3869;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:89578;}i:3870;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:106:"Salary of Rajnish is 62000
Salary of Minakshi is 75000
Salary of Martin is 100000
Salary of James is 78000";}i:2;i:89578;}i:3871;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:40:"PL/SQL procedure successfully completed.";}i:2;i:89694;}i:3872;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:89694;}i:3873;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:89739;}i:3874;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Example";}i:2;i:89741;}i:3875;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:89748;}i:3876;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:89750;}i:3877;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:89750;}i:3878;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:220:"Elements of an index-by table could also be a %ROWTYPE of any database table or %TYPE of any database table field. The following example illustrates the concept. We will use the CUSTOMERS table stored in our database as:";}i:2;i:89752;}i:3879;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:89973;}i:3880;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:24:"Select * from customers;";}i:2;i:89973;}i:3881;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:469:"+----+----------+-----+-----------+----------+
| ID | NAME     | AGE | ADDRESS   | SALARY   |
+----+----------+-----+-----------+----------+
|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
|  2 | Khilan   |  25 | Delhi     |  1500.00 |
|  3 | kaushik  |  23 | Kota      |  2000.00 |
|  4 | Chaitali |  25 | Mumbai    |  6500.00 |
|  5 | Hardik   |  27 | Bhopal    |  8500.00 |
|  6 | Komal    |  22 | MP        |  4500.00 |
+----+----------+-----+-----------+----------+";}i:2;i:90001;}i:3882;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:381:"DECLARE
   CURSOR c_customers is
      select  name from customers;
   TYPE c_list IS TABLE of customers.name%type INDEX BY binary_integer;
   name_list c_list;
   counter integer :=0;
BEGIN
   FOR n IN c_customers LOOP
      counter := counter +1;
      name_list(counter)  := n.name;
      dbms_output.put_line('Customer('||counter|| '):'||name_list(counter));
  END LOOP;
END;
/";}i:2;i:90493;}i:3883;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:90493;}i:3884;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:90905;}i:3885;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:90986;}i:3886;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:129:"Customer(1): Ramesh 
Customer(2): Khilan 
Customer(3): kaushik    
Customer(4): Chaitali 
Customer(5): Hardik 
Customer(6): Komal";}i:2;i:90986;}i:3887;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:39:"PL/SQL procedure successfully completed";}i:2;i:91129;}i:3888;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:91173;}i:3889;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"Nested Tables";i:1;i:3;i:2;i:91173;}i:2;i:91173;}i:3890;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:91173;}i:3891;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:91173;}i:3892;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:156:"A nested table is like a one-dimensional array with an arbitrary number of elements. However, a nested table differs from an array in the following aspects:";}i:2;i:91198;}i:3893;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:91354;}i:3894;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:91354;}i:3895;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:91354;}i:3896;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:91354;}i:3897;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:126:" An array has a declared number of elements, but a nested table does not. The size of a nested table can increase dynamically.";}i:2;i:91358;}i:3898;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:91484;}i:3899;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:91484;}i:3900;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:91484;}i:3901;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:91484;}i:3902;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:165:" An array is always dense, i.e., it always has consecutive subscripts. A nested array is dense initially, but it can become sparse when elements are deleted from it.";}i:2;i:91488;}i:3903;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:91653;}i:3904;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:91653;}i:3905;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:91653;}i:3906;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:91653;}i:3907;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:"A nested table is created using the following syntax:";}i:2;i:91655;}i:3908;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:91709;}i:3909;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:51:"TYPE type_name IS TABLE OF element_type [NOT NULL];";}i:2;i:91709;}i:3910;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:22:"table_name type_name;
";}i:2;i:91764;}i:3911;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:91764;}i:3912;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:97:"This declaration is similar to declaration of an index-by table, but there is no INDEX BY clause.";}i:2;i:91792;}i:3913;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:91889;}i:3914;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:91889;}i:3915;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:217:"A nested table can be stored in a database column and so it could be used for simplifying SQL operations where you join a single-column table with a larger table. An associative array cannot be stored in the database.";}i:2;i:91891;}i:3916;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:92108;}i:3917;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:92108;}i:3918;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:92110;}i:3919;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Example";}i:2;i:92112;}i:3920;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:92119;}i:3921;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:92121;}i:3922;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:92121;}i:3923;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:"The following examples illustrate the use of nested table:";}i:2;i:92123;}i:3924;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:92182;}i:3925;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:89:"DECLARE
   TYPE names_table IS TABLE OF VARCHAR2(10);
   TYPE grades IS TABLE OF INTEGER;";}i:2;i:92182;}i:3926;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:377:"   names names_table;
   marks grades;
   total integer;
BEGIN
   names := names_table('Kavita', 'Pritam', 'Ayan', 'Rishav', 'Aziz');
   marks:= grades(98, 97, 78, 87, 92);
   total := names.count;
   dbms_output.put_line('Total '|| total || ' Students');
   FOR i IN 1 .. total LOOP
      dbms_output.put_line('Student:'||names(i)||', Marks:' || marks(i));
   end loop;
END;
/";}i:2;i:92279;}i:3927;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:92279;}i:3928;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:92685;}i:3929;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:92766;}i:3930;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:137:"Total 5 Students
Student:Kavita, Marks:98
Student:Pritam, Marks:97
Student:Ayan, Marks:78
Student:Rishav, Marks:87
Student:Aziz, Marks:92";}i:2;i:92766;}i:3931;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:41:"PL/SQL procedure successfully completed.
";}i:2;i:92917;}i:3932;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:92917;}i:3933;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:92964;}i:3934;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Example";}i:2;i:92966;}i:3935;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:92973;}i:3936;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:92975;}i:3937;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:92975;}i:3938;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:217:"Elements of a nested table could also be a %ROWTYPE of any database table or %TYPE of any database table field. The following example illustrates the concept. We will use the CUSTOMERS table stored in our database as:";}i:2;i:92977;}i:3939;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:93195;}i:3940;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:24:"Select * from customers;";}i:2;i:93195;}i:3941;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:867:"+----+----------+-----+-----------+----------+
| ID | NAME     | AGE | ADDRESS   | SALARY   |
+----+----------+-----+-----------+----------+
|  1 | Ramesh   |  32 | Ahmedabad |  2000.00 |
|  2 | Khilan   |  25 | Delhi     |  1500.00 |
|  3 | kaushik  |  23 | Kota      |  2000.00 |
|  4 | Chaitali |  25 | Mumbai    |  6500.00 |
|  5 | Hardik   |  27 | Bhopal    |  8500.00 |
|  6 | Komal    |  22 | MP        |  4500.00 |
+----+----------+-----+-----------+----------+

  DECLARE
   CURSOR c_customers is 
      SELECT  name FROM customers;
   TYPE c_list IS TABLE of customers.name%type;
   name_list c_list := c_list();
   counter integer :=0;
BEGIN
   FOR n IN c_customers LOOP
      counter := counter +1;
      name_list.extend;
      name_list(counter)  := n.name;
      dbms_output.put_line('Customer('||counter||'):'||name_list(counter));
   END LOOP;
END;
/";}i:2;i:93223;}i:3942;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:93223;}i:3943;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:94144;}i:3944;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:94225;}i:3945;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:129:"Customer(1): Ramesh 
Customer(2): Khilan 
Customer(3): kaushik    
Customer(4): Chaitali 
Customer(5): Hardik 
Customer(6): Komal";}i:2;i:94225;}i:3946;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:40:"PL/SQL procedure successfully completed.";}i:2;i:94368;}i:3947;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:94413;}i:3948;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"Collection Methods";i:1;i:3;i:2;i:94413;}i:2;i:94413;}i:3949;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:94413;}i:3950;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:94413;}i:3951;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:141:"PL/SQL provides the built-in collection methods that make collections easier to use. The following table lists the methods and their purpose:";}i:2;i:94443;}i:3952;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:94585;}i:3953;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:94585;}i:3954;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:94585;}i:3955;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:94585;}i:3956;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:110:" Ordered List ItemEXISTS(n) - Returns TRUE if the nth element in a collection exists; otherwise returns FALSE.";}i:2;i:94589;}i:3957;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:94699;}i:3958;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:94699;}i:3959;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:94699;}i:3960;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:94699;}i:3961;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:77:" COUNT - Returns the number of elements that a collection currently contains.";}i:2;i:94703;}i:3962;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:94780;}i:3963;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:94780;}i:3964;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:94780;}i:3965;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:94780;}i:3966;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:" LIMIT - Checks the Maximum Size of a Collection.";}i:2;i:94784;}i:3967;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:94833;}i:3968;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:94833;}i:3969;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:94833;}i:3970;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:94833;}i:3971;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:97:" FIRST - Returns the first (smallest) index numbers in a collection that uses integer subscripts.";}i:2;i:94837;}i:3972;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:94934;}i:3973;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:94934;}i:3974;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:94934;}i:3975;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:94934;}i:3976;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:" LAST - Returns the last (largest) index numbers in a collection that uses integer subscripts.";}i:2;i:94938;}i:3977;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:95032;}i:3978;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:95032;}i:3979;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:95032;}i:3980;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:95032;}i:3981;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:75:" PRIOR(n) - Returns the index number that precedes index n in a collection.";}i:2;i:95036;}i:3982;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:95111;}i:3983;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:95111;}i:3984;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:95111;}i:3985;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:95111;}i:3986;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:" NEXT(n) - Returns the index number that succeeds index n.";}i:2;i:95115;}i:3987;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:95173;}i:3988;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:95173;}i:3989;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:95173;}i:3990;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:95173;}i:3991;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:" EXTEND - Appends one null element to a collection.";}i:2;i:95177;}i:3992;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:95228;}i:3993;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:95228;}i:3994;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:95228;}i:3995;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:95228;}i:3996;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:" EXTEND(n) - Appends n null elements to a collection.";}i:2;i:95232;}i:3997;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:95285;}i:3998;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:95285;}i:3999;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:95285;}i:4000;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:95285;}i:4001;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:" EXTEND(n,i) - Appends n copies of the ith element to a collection.";}i:2;i:95289;}i:4002;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:95356;}i:4003;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:95356;}i:4004;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:95356;}i:4005;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:95356;}i:4006;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:57:" TRIM - Removes one element from the end of a collection.";}i:2;i:95360;}i:4007;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:95417;}i:4008;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:95417;}i:4009;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:95417;}i:4010;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:95417;}i:4011;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:59:" TRIM(n) - Removes n elements from the end of a collection.";}i:2;i:95421;}i:4012;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:95480;}i:4013;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:95480;}i:4014;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:95480;}i:4015;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:95480;}i:4016;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:" DELETE - Removes all elements from a collection, setting COUNT to 0.";}i:2;i:95484;}i:4017;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:95553;}i:4018;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:95553;}i:4019;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:95553;}i:4020;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:95553;}i:4021;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:236:" DELETE(n) - Removes the nth element from an associative array with a numeric key or a nested table. If the associative array has a string key, the element corresponding to the key value is deleted. If n is null, DELETE(n) does nothing.";}i:2;i:95557;}i:4022;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:95793;}i:4023;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:95793;}i:4024;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:95793;}i:4025;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:95793;}i:4026;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:166:" DELETE(m,n) - Removes all elements in the range m..n from an associative array or nested table. If m is larger than n or if m or n is null, DELETE(m,n) does nothing.";}i:2;i:95797;}i:4027;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:95963;}i:4028;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:95963;}i:4029;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:95963;}i:4030;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:95965;}i:4031;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"Collection Exceptions";i:1;i:3;i:2;i:95965;}i:2;i:95965;}i:4032;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:95965;}i:4033;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:95965;}i:4034;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"The following table provides the collection exceptions and when they are raised:";}i:2;i:95998;}i:4035;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:96078;}i:4036;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:96078;}i:4037;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:96078;}i:4038;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:96078;}i:4039;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:" COLLECTION_IS_NULL - You try to operate on an atomically null collection.";}i:2;i:96082;}i:4040;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:96156;}i:4041;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:96156;}i:4042;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:96156;}i:4043;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:96156;}i:4044;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:118:" NO_DATA_FOUND - A subscript designates an element that was deleted, or a nonexistent element of an associative array.";}i:2;i:96160;}i:4045;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:96278;}i:4046;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:96278;}i:4047;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:96278;}i:4048;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:96278;}i:4049;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:85:" SUBSCRIPT_BEYOND_COUNT - A subscript exceeds the number of elements in a collection.";}i:2;i:96282;}i:4050;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:96367;}i:4051;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:96367;}i:4052;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:96367;}i:4053;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:96367;}i:4054;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:" SUBSCRIPT_OUTSIDE_LIMIT - A subscript is outside the allowed range.";}i:2;i:96371;}i:4055;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:96439;}i:4056;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:96439;}i:4057;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:96439;}i:4058;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:96439;}i:4059;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:184:" VALUE_ERROR - A subscript is null or not convertible to the key type. This exception might occur if the key is defined as a PLS_INTEGER range, and the subscript is outside this range.";}i:2;i:96443;}i:4060;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:96627;}i:4061;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:96627;}i:4062;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:96627;}i:4063;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:96629;}i:4064;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:21:"PL/SQL - Transactions";i:1;i:2;i:2;i:96629;}i:2;i:96629;}i:4065;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:96629;}i:4066;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:96629;}i:4067;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:343:"A database transaction is an atomic unit of work that may consist of one or more related SQL statements. It is called atomic because the database modifications brought about by the SQL statements that constitute a transaction can collectively be either committed, i.e., made permanent to the database or rolled back (undone) from the database.";}i:2;i:96664;}i:4068;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:97007;}i:4069;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:97007;}i:4070;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:270:"A successfully executed SQL statement and a committed transaction are not same. Even if an SQL statement is executed successfully, unless the transaction containing the statement is committed, it can be rolled back and all changes made by the statement(s) can be undone.";}i:2;i:97009;}i:4071;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:97279;}i:4072;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:97281;}i:4073;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:33:"Starting and Ending a Transaction";i:1;i:3;i:2;i:97281;}i:2;i:97281;}i:4074;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:97281;}i:4075;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:97281;}i:4076;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:107:"A transaction has a beginning and an end. A transaction starts when one of the following events take place:";}i:2;i:97326;}i:4077;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:97433;}i:4078;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:97433;}i:4079;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:97433;}i:4080;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:97433;}i:4081;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:" The first SQL statement is performed after connecting to the database.";}i:2;i:97437;}i:4082;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:97508;}i:4083;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:97508;}i:4084;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:97508;}i:4085;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:97508;}i:4086;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:67:" At each new SQL statement issued after a transaction is completed.";}i:2;i:97512;}i:4087;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:97579;}i:4088;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:97579;}i:4089;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:97579;}i:4090;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:97579;}i:4091;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:63:"A transaction ends when one of the following events take place:";}i:2;i:97581;}i:4092;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:97644;}i:4093;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:97644;}i:4094;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:97644;}i:4095;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:97644;}i:4096;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:44:" A COMMIT or a ROLLBACK statement is issued.";}i:2;i:97648;}i:4097;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:97692;}i:4098;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:97692;}i:4099;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:97692;}i:4100;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:97692;}i:4101;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:115:" A DDL statement, like CREATE TABLE statement, is issued; because in that case a COMMIT is automatically performed.";}i:2;i:97696;}i:4102;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:97811;}i:4103;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:97811;}i:4104;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:97811;}i:4105;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:97811;}i:4106;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:113:" A DCL statement, such as a GRANT statement, is issued; because in that case a COMMIT is automatically performed.";}i:2;i:97815;}i:4107;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:97928;}i:4108;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:97928;}i:4109;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:97928;}i:4110;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:97928;}i:4111;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:36:" User disconnects from the database.";}i:2;i:97932;}i:4112;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:97968;}i:4113;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:97968;}i:4114;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:97968;}i:4115;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:97968;}i:4116;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:" User exits from SQL*PLUS by issuing the EXIT command, a COMMIT is automatically performed.";}i:2;i:97972;}i:4117;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:98063;}i:4118;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:98063;}i:4119;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:98063;}i:4120;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:98063;}i:4121;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:" SQL*Plus terminates abnormally, a ROLLBACK is automatically performed.";}i:2;i:98067;}i:4122;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:98138;}i:4123;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:98138;}i:4124;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:98138;}i:4125;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:98138;}i:4126;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:106:" A DML statement fails; in that case a ROLLBACK is automatically performed for undoing that DML statement.";}i:2;i:98142;}i:4127;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:98248;}i:4128;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:98248;}i:4129;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:98248;}i:4130;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:98250;}i:4131;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"Committing a Transaction";i:1;i:3;i:2;i:98250;}i:2;i:98250;}i:4132;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:98250;}i:4133;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:98250;}i:4134;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:112:"A transaction is made permanent by issuing the SQL command COMMIT. The general syntax for the COMMIT command is:";}i:2;i:98286;}i:4135;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:98399;}i:4136;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:7:"COMMIT;";}i:2;i:98399;}i:4137;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:98399;}i:4138;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:98410;}i:4139;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Example";}i:2;i:98412;}i:4140;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:98419;}i:4141;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:98421;}i:4142;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:98422;}i:4143;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:587:"INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (1, 'Ramesh', 32, 'Ahmedabad', 2000.00 );
INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (2, 'Khilan', 25, 'Delhi', 1500.00 );
INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (3, 'kaushik', 23, 'Kota', 2000.00 );
INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (4, 'Chaitali', 25, 'Mumbai', 6500.00 );
INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (5, 'Hardik', 27, 'Bhopal', 8500.00 );
INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (6, 'Komal', 22, 'MP', 4500.00 );
COMMIT;";}i:2;i:98422;}i:4144;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:99039;}i:4145;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:25:"Rolling Back Transactions";i:1;i:3;i:2;i:99039;}i:2;i:99039;}i:4146;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:99039;}i:4147;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:99039;}i:4148;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:"Changes made to the database without COMMIT could be undone using the ROLLBACK command.";}i:2;i:99076;}i:4149;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:99163;}i:4150;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:99163;}i:4151;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:47:"The general syntax for the ROLLBACK command is:";}i:2;i:99165;}i:4152;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:99213;}i:4153;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:42:"ROLLBACK [TO SAVEPOINT < savepoint_name>];";}i:2;i:99213;}i:4154;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:99213;}i:4155;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:256:"When a transaction is aborted due to some unprecedented situation, like system failure, the entire transaction since a commit is automatically rolled back. If you are not using savepoint, then simply use the following statement to rollback all the changes:";}i:2;i:99259;}i:4156;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:99516;}i:4157;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:10:"ROLLBACK; ";}i:2;i:99516;}i:4158;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:99530;}i:4159;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Savepoints";i:1;i:3;i:2;i:99530;}i:2;i:99530;}i:4160;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:99530;}i:4161;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:99530;}i:4162;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:263:"Savepoints are sort of markers that help in splitting a long transaction into smaller units by setting some checkpoints. By setting savepoints within a long transaction, you can roll back to a checkpoint if required. This is done by issuing the SAVEPOINT command.";}i:2;i:99552;}i:4163;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:99815;}i:4164;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:99815;}i:4165;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:"The general syntax for the SAVEPOINT command is:";}i:2;i:99817;}i:4166;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:99865;}i:4167;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:29:"SAVEPOINT < savepoint_name >;";}i:2;i:99865;}i:4168;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:99865;}i:4169;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:99898;}i:4170;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Example";}i:2;i:99900;}i:4171;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:99907;}i:4172;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:99909;}i:4173;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:99910;}i:4174;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:202:"INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (7, 'Rajnish', 27, 'HP', 9500.00 );
INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)
VALUES (8, 'Riddhi', 21, 'WB', 4500.00 );
SAVEPOINT sav1;";}i:2;i:99910;}i:4175;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:62:"UPDATE CUSTOMERS
SET SALARY = SALARY + 1000;
ROLLBACK TO sav1;";}i:2;i:100124;}i:4176;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:123:"UPDATE CUSTOMERS
SET SALARY = SALARY + 1000
WHERE ID = 7;
UPDATE CUSTOMERS
SET SALARY = SALARY + 1000
WHERE ID = 8;
COMMIT;";}i:2;i:100194;}i:4177;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:100194;}i:4178;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:147:"Here,ROLLBACK TO sav1; statement rolls back the changes up to the point, where you had marked savepoint sav1 and after that new changes will start.";}i:2;i:100334;}i:4179;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:100481;}i:4180;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:100483;}i:4181;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:29:"Automatic Transaction Control";i:1;i:3;i:2;i:100483;}i:2;i:100483;}i:4182;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:100483;}i:4183;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:100483;}i:4184;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:143:"To execute a COMMIT automatically whenever an INSERT, UPDATE or DELETE command is executed, you can set the AUTOCOMMIT environment variable as:";}i:2;i:100524;}i:4185;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:100668;}i:4186;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:18:"SET AUTOCOMMIT ON;";}i:2;i:100668;}i:4187;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:100668;}i:4188;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:62:"You can turn-off auto commit mode using the following command:";}i:2;i:100691;}i:4189;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:100754;}i:4190;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:19:"SET AUTOCOMMIT OFF;";}i:2;i:100754;}i:4191;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:100778;}i:4192;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"PL/SQL - Date & Time";i:1;i:2;i:2;i:100778;}i:2;i:100778;}i:4193;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:100778;}i:4194;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:100778;}i:4195;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:"PL/SQL provides two classes of date and time related data types:";}i:2;i:100812;}i:4196;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:100876;}i:4197;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:100876;}i:4198;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:100876;}i:4199;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:100876;}i:4200;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" Datetime data types";}i:2;i:100880;}i:4201;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:100900;}i:4202;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:100900;}i:4203;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:100900;}i:4204;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:100900;}i:4205;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:20:" Interval data types";}i:2;i:100904;}i:4206;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:100924;}i:4207;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:100924;}i:4208;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:100924;}i:4209;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:100924;}i:4210;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"The Datetime data types are:";}i:2;i:100926;}i:4211;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:100954;}i:4212;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:100954;}i:4213;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:100954;}i:4214;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:100954;}i:4215;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" DATE";}i:2;i:100958;}i:4216;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:100963;}i:4217;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:100963;}i:4218;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:100963;}i:4219;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:100963;}i:4220;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" TIMESTAMP";}i:2;i:100967;}i:4221;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:100977;}i:4222;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:100977;}i:4223;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:100977;}i:4224;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:100977;}i:4225;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:" TIMESTAMP WITH TIME ZONE";}i:2;i:100981;}i:4226;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:101006;}i:4227;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:101006;}i:4228;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:101006;}i:4229;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:101006;}i:4230;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:31:" TIMESTAMP WITH LOCAL TIME ZONE";}i:2;i:101010;}i:4231;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:101041;}i:4232;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:101041;}i:4233;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:101041;}i:4234;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:101041;}i:4235;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"The Interval data types are:";}i:2;i:101043;}i:4236;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:101071;}i:4237;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:101071;}i:4238;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:101071;}i:4239;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:101071;}i:4240;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" INTERVAL YEAR TO MONTH";}i:2;i:101075;}i:4241;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:101098;}i:4242;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:101098;}i:4243;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:101098;}i:4244;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:101098;}i:4245;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" INTERVAL DAY TO SECOND";}i:2;i:101102;}i:4246;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:101125;}i:4247;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:101125;}i:4248;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:101125;}i:4249;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:101127;}i:4250;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:49:"Field Values for Datetime and Interval Data Types";i:1;i:3;i:2;i:101127;}i:2;i:101127;}i:4251;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:101127;}i:4252;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:101127;}i:4253;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:212:"Both datetime and interval data types consist of fields. The values of these fields determine the value of the datatype. The following table lists the fields and their possible values for datetimes and intervals.";}i:2;i:101188;}i:4254;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:101401;}i:4255;a:3:{i:0;s:10:"table_open";i:1;a:3:{i:0;i:3;i:1;i:11;i:2;i:101402;}i:2;i:101401;}i:4256;a:3:{i:0;s:15:"tablethead_open";i:1;a:0:{}i:2;i:101401;}i:4257;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:101401;}i:4258;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:101401;}i:4259;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:" Field Name ";}i:2;i:101403;}i:4260;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:101415;}i:4261;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:101415;}i:4262;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" Valid Datetime Values ";}i:2;i:101416;}i:4263;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:101439;}i:4264;a:3:{i:0;s:16:"tableheader_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:101439;}i:4265;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:" Valid Interval Values ";}i:2;i:101440;}i:4266;a:3:{i:0;s:17:"tableheader_close";i:1;a:0:{}i:2;i:101463;}i:4267;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:101464;}i:4268;a:3:{i:0;s:16:"tablethead_close";i:1;a:0:{}i:2;i:101464;}i:4269;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:101464;}i:4270;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:101464;}i:4271;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" YEAR ";}i:2;i:101466;}i:4272;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:101472;}i:4273;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:101472;}i:4274;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:34:" -4712 to 9999 (excluding year 0) ";}i:2;i:101473;}i:4275;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:101507;}i:4276;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:101507;}i:4277;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" Any nonzero integer ";}i:2;i:101508;}i:4278;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:101529;}i:4279;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:101530;}i:4280;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:101530;}i:4281;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:101530;}i:4282;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:" MONTH ";}i:2;i:101532;}i:4283;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:101539;}i:4284;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:101539;}i:4285;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" 01 to 12 ";}i:2;i:101540;}i:4286;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:101550;}i:4287;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:101550;}i:4288;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" 0 to 11 ";}i:2;i:101551;}i:4289;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:101560;}i:4290;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:101561;}i:4291;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:101561;}i:4292;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:101561;}i:4293;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:5:" DAY ";}i:2;i:101563;}i:4294;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:101568;}i:4295;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;s:5:"right";i:2;i:1;}i:2;i:101568;}i:4296;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:107:"	01 to 31 (limited by the values of MONTH and YEAR, according to the rules of the calendar for the locale) ";}i:2;i:101569;}i:4297;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:101676;}i:4298;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:101676;}i:4299;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:21:" Any nonzero integer ";}i:2;i:101677;}i:4300;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:101698;}i:4301;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:101699;}i:4302;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:101699;}i:4303;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:101699;}i:4304;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:6:" HOUR ";}i:2;i:101701;}i:4305;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:101707;}i:4306;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:101707;}i:4307;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" 00 to 23 ";}i:2;i:101708;}i:4308;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:101718;}i:4309;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:101718;}i:4310;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" 0 to 23 ";}i:2;i:101719;}i:4311;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:101728;}i:4312;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:101730;}i:4313;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:101730;}i:4314;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:101730;}i:4315;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" MINUTE ";}i:2;i:101732;}i:4316;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:101740;}i:4317;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:101740;}i:4318;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:" 00 to 59 ";}i:2;i:101741;}i:4319;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:101751;}i:4320;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:101751;}i:4321;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:9:" 0 to 59 ";}i:2;i:101752;}i:4322;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:101761;}i:4323;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:101763;}i:4324;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:101763;}i:4325;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:101763;}i:4326;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:" SECOND ";}i:2;i:101765;}i:4327;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:101773;}i:4328;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:101773;}i:4329;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:116:" 00 to 59.9(n), where 9(n) is the precision of time fractional seconds The 9(n) portion is not applicable for DATE. ";}i:2;i:101774;}i:4330;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:101890;}i:4331;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:101890;}i:4332;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:74:" 0 to 59.9(n), where 9(n) is the precision of interval fractional seconds ";}i:2;i:101891;}i:4333;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:101965;}i:4334;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:101967;}i:4335;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:101967;}i:4336;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:101967;}i:4337;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" TIMEZONE_HOUR ";}i:2;i:101969;}i:4338;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:101984;}i:4339;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:101984;}i:4340;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:101:" -12 to 14 (range accommodates daylight savings time changes). Not applicable for DATE or TIMESTAMP. ";}i:2;i:101985;}i:4341;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:102086;}i:4342;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:102086;}i:4343;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" Not applicable ";}i:2;i:102087;}i:4344;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:102103;}i:4345;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:102105;}i:4346;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:102105;}i:4347;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:102105;}i:4348;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" TIMEZONE_MINUTE ";}i:2;i:102107;}i:4349;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:102124;}i:4350;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:102124;}i:4351;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:" 00 to 59 Not applicable for DATE or TIMESTAMP. ";}i:2;i:102125;}i:4352;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:102173;}i:4353;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:102173;}i:4354;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" Not applicable ";}i:2;i:102174;}i:4355;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:102190;}i:4356;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:102192;}i:4357;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:102192;}i:4358;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:102192;}i:4359;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:" TIMEZONE_REGION ";}i:2;i:102194;}i:4360;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:102211;}i:4361;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:102211;}i:4362;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:" Not applicable for DATE or TIMESTAMP. ";}i:2;i:102212;}i:4363;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:102251;}i:4364;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:102251;}i:4365;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" Not applicable ";}i:2;i:102252;}i:4366;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:102268;}i:4367;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:102270;}i:4368;a:3:{i:0;s:13:"tablerow_open";i:1;a:0:{}i:2;i:102270;}i:4369;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:102270;}i:4370;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:" TIMEZONE_ABBR ";}i:2;i:102272;}i:4371;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:102287;}i:4372;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:102287;}i:4373;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:39:" Not applicable for DATE or TIMESTAMP. ";}i:2;i:102288;}i:4374;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:102327;}i:4375;a:3:{i:0;s:14:"tablecell_open";i:1;a:3:{i:0;i:1;i:1;N;i:2;i:1;}i:2;i:102327;}i:4376;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:" Not applicable ";}i:2;i:102328;}i:4377;a:3:{i:0;s:15:"tablecell_close";i:1;a:0:{}i:2;i:102344;}i:4378;a:3:{i:0;s:14:"tablerow_close";i:1;a:0:{}i:2;i:102346;}i:4379;a:3:{i:0;s:11:"table_close";i:1;a:1:{i:0;i:102346;}i:2;i:102346;}i:4380;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:102348;}i:4381;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:37:"The Datetime Data Types and Functions";i:1;i:3;i:2;i:102348;}i:2;i:102348;}i:4382;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:102348;}i:4383;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:102348;}i:4384;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:"Following are the Datetime data types:";}i:2;i:102397;}i:4385;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:102435;}i:4386;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:102435;}i:4387;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:102435;}i:4388;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:102435;}i:4389;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:186:" DATE - it stores date and time information in both character and number datatypes. It is made of information on century, year, month, date, hour, minute, and second. It is specified as:";}i:2;i:102439;}i:4390;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:102625;}i:4391;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:102625;}i:4392;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:102625;}i:4393;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:102625;}i:4394;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:200:" TIMESTAMP - it is an extension of the DATE datatype. It stores the year, month, and day of the DATE datatype, along with hour, minute, and second values. It is useful for storing precise time values.";}i:2;i:102629;}i:4395;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:102829;}i:4396;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:102829;}i:4397;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:102829;}i:4398;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:102829;}i:4399;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:318:" TIMESTAMP WITH TIME ZONE - it is a variant of TIMESTAMP that includes a time zone region name or a time zone offset in its value. The time zone offset is the difference (in hours and minutes) between local time and UTC. This datatype is useful for collecting and evaluating date information across geographic regions.";}i:2;i:102833;}i:4400;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:103151;}i:4401;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:103151;}i:4402;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:103151;}i:4403;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:103151;}i:4404;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:115:" TIMESTAMP WITH LOCAL TIME ZONE - it is another variant of TIMESTAMP that includes a time zone offset in its value.";}i:2;i:103155;}i:4405;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:103270;}i:4406;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:103270;}i:4407;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:103270;}i:4408;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:103270;}i:4409;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:78:"Following table provides the Datetime functions (where, x has datetime value):";}i:2;i:103272;}i:4410;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:103350;}i:4411;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:103350;}i:4412;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:103350;}i:4413;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:103350;}i:4414;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:" ADD_MONTHS(x, y); Adds y months to x.";}i:2;i:103354;}i:4415;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:103392;}i:4416;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:103392;}i:4417;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:103392;}i:4418;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:103392;}i:4419;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:48:" LAST_DAY(x); Returns the last day of the month.";}i:2;i:103396;}i:4420;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:103444;}i:4421;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:103444;}i:4422;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:103444;}i:4423;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:103444;}i:4424;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:68:" MONTHS_BETWEEN(x, y); Returns the number of months between x and y.";}i:2;i:103448;}i:4425;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:103516;}i:4426;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:103516;}i:4427;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:103516;}i:4428;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:103516;}i:4429;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:" NEXT_DAY(x, day); Returns the datetime of the next day after x.";}i:2;i:103520;}i:4430;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:103584;}i:4431;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:103584;}i:4432;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:103584;}i:4433;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:103584;}i:4434;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:77:" NEW_TIME; Returns the time/day value from a time zone specified by the user.";}i:2;i:103588;}i:4435;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:103665;}i:4436;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:103665;}i:4437;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:103665;}i:4438;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:103665;}i:4439;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:" ROUND(x [, unit]); Rounds x;";}i:2;i:103669;}i:4440;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:103698;}i:4441;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:103698;}i:4442;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:103698;}i:4443;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:103698;}i:4444;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:" SYSDATE(); Returns the current datetime.";}i:2;i:103702;}i:4445;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:103743;}i:4446;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:103743;}i:4447;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:103743;}i:4448;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:103743;}i:4449;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" TRUNC(x [, unit]); Truncates x.";}i:2;i:103747;}i:4450;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:103779;}i:4451;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:103779;}i:4452;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:103779;}i:4453;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:103779;}i:4454;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:"Timestamp functions (where, x has a timestamp value):";}i:2;i:103781;}i:4455;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:103834;}i:4456;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:103834;}i:4457;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:103834;}i:4458;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:103834;}i:4459;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:126:" CURRENT_TIMESTAMP(); Returns a TIMESTAMP WITH TIME ZONE containing the current session time along with the session time zone.";}i:2;i:103838;}i:4460;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:103964;}i:4461;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:103964;}i:4462;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:103964;}i:4463;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:103964;}i:4464;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:227:" EXTRACT({ YEAR | MONTH | DAY | HOUR | MINUTE | SECOND } | { TIMEZONE_HOUR | TIMEZONE_MINUTE } | { TIMEZONE_REGION | } TIMEZONE_ABBR ) FROM x); Extracts and returns a year, month, day, hour, minute, second, or time zone from x;";}i:2;i:103968;}i:4465;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:104195;}i:4466;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:104195;}i:4467;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:104195;}i:4468;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:104195;}i:4469;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:115:" FROM_TZ(x, time_zone); Converts the TIMESTAMP x and time zone specified by time_zone to a TIMESTAMP WITH TIMEZONE.";}i:2;i:104199;}i:4470;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:104314;}i:4471;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:104314;}i:4472;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:104314;}i:4473;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:104314;}i:4474;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:90:" LOCALTIMESTAMP(); Returns a TIMESTAMP containing the local time in the session time zone.";}i:2;i:104318;}i:4475;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:104408;}i:4476;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:104408;}i:4477;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:104408;}i:4478;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:104408;}i:4479;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:123:" SYSTIMESTAMP(); Returns a TIMESTAMP WITH TIME ZONE containing the current database time along with the database time zone.";}i:2;i:104412;}i:4480;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:104535;}i:4481;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:104535;}i:4482;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:104535;}i:4483;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:104535;}i:4484;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:111:" SYS_EXTRACT_UTC(x); Converts the TIMESTAMP WITH TIMEZONE x to a TIMESTAMP containing the date and time in UTC.";}i:2;i:104539;}i:4485;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:104650;}i:4486;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:104650;}i:4487;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:104650;}i:4488;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:104650;}i:4489;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:65:" TO_TIMESTAMP(x, [format]); Converts the string x to a TIMESTAMP.";}i:2;i:104654;}i:4490;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:104719;}i:4491;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:104719;}i:4492;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:104719;}i:4493;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:104719;}i:4494;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:82:" TO_TIMESTAMP_TZ(x, [format]); Converts the string x to a TIMESTAMP WITH TIMEZONE.";}i:2;i:104723;}i:4495;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:104805;}i:4496;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:104805;}i:4497;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:104805;}i:4498;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:104805;}i:4499;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:104807;}i:4500;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"Examples";}i:2;i:104809;}i:4501;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:104817;}i:4502;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:104819;}i:4503;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:104819;}i:4504;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:"The following code snippets illustrate the use of the above functions:";}i:2;i:104821;}i:4505;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:104891;}i:4506;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:25:"SELECT SYSDATE FROM DUAL;";}i:2;i:104891;}i:4507;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:104891;}i:4508;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"Output: ";}i:2;i:104920;}i:4509;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:104928;}i:4510;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:21:"08/31/2012 5:25:34 PM";}i:2;i:104928;}i:4511;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:62:"SELECT TO_CHAR(CURRENT_DATE, 'DD-MM-YYYY HH:MI:SS') FROM DUAL;";}i:2;i:104953;}i:4512;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:104953;}i:4513;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Output:";}i:2;i:105019;}i:4514;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:105026;}i:4515;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:19:"31-08-2012 05:26:14";}i:2;i:105026;}i:4516;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:40:"SELECT ADD_MONTHS(SYSDATE, 5) FROM DUAL;";}i:2;i:105049;}i:4517;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:105049;}i:4518;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Output:";}i:2;i:105093;}i:4519;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:105100;}i:4520;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:21:"01/31/2013 5:26:31 PM";}i:2;i:105100;}i:4521;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:32:"SELECT LOCALTIMESTAMP FROM DUAL;";}i:2;i:105125;}i:4522;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:105125;}i:4523;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Output:";}i:2;i:105161;}i:4524;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:105168;}i:4525;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:28:"8/31/2012 5:26:55.347000 PM
";}i:2;i:105168;}i:4526;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:105202;}i:4527;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:37:"The Interval Data Types and Functions";i:1;i:3;i:2;i:105202;}i:2;i:105202;}i:4528;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:105202;}i:4529;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:105202;}i:4530;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:38:"Following are the Interval data types:";}i:2;i:105251;}i:4531;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:105289;}i:4532;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:105289;}i:4533;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:105289;}i:4534;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:105289;}i:4535;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:94:" INTERVAL YEAR TO MONTH - it stores a period of time using the YEAR and MONTH datetime fields.";}i:2;i:105293;}i:4536;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:105387;}i:4537;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:105387;}i:4538;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:105387;}i:4539;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:105387;}i:4540;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:99:" INTERVAL DAY TO SECOND - it stores a period of time in terms of days, hours, minutes, and seconds.";}i:2;i:105391;}i:4541;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:105490;}i:4542;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:105490;}i:4543;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:105490;}i:4544;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:105490;}i:4545;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"Interval functions:";}i:2;i:105492;}i:4546;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:105511;}i:4547;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:105511;}i:4548;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:105511;}i:4549;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:105511;}i:4550;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:" NUMTODSINTERVAL(x, interval_unit); Converts the number x to an INTERVAL DAY TO SECOND.";}i:2;i:105517;}i:4551;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:105604;}i:4552;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:105604;}i:4553;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:105604;}i:4554;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:105604;}i:4555;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:87:" NUMTOYMINTERVAL(x, interval_unit); Converts the number x to an INTERVAL YEAR TO MONTH.";}i:2;i:105608;}i:4556;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:105695;}i:4557;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:105695;}i:4558;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:105695;}i:4559;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:105695;}i:4560;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:" TO_DSINTERVAL(x); Converts the string x to an INTERVAL DAY TO SECOND.";}i:2;i:105699;}i:4561;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:105769;}i:4562;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:105769;}i:4563;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:2;}i:2;i:105769;}i:4564;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:105769;}i:4565;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:70:" TO_YMINTERVAL(x); Converts the string x to an INTERVAL YEAR TO MONTH.";}i:2;i:105773;}i:4566;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:105843;}i:4567;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:105843;}i:4568;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:105843;}i:4569;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:105845;}i:4570;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:20:"PL/SQL - DBMS Output";i:1;i:2;i:2;i:105845;}i:2;i:105845;}i:4571;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:105845;}i:4572;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:105845;}i:4573;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:242:"The DBMS_OUTPUT is a built-in package that enables you to display output, display debugging information, and send messages from PL/SQL blocks, subprograms, packages, and triggers. We have already used this package all throughout our tutorial.";}i:2;i:105879;}i:4574;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:106121;}i:4575;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:106121;}i:4576;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:149:"Let us look at a small code snippet that would display all the user tables in the database. Try it in your database to list down all the table names:";}i:2;i:106123;}i:4577;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:106273;}i:4578;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:188:"BEGIN
   dbms_output.put_line  (user || ' Tables in the database:');
   FOR t IN (SELECT table_name FROM user_tables)
   LOOP
      dbms_output.put_line(t.table_name);
   END LOOP;
END;
/
";}i:2;i:106273;}i:4579;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:106273;}i:4580;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:" DBMS_OUTPUT Subprograms ====";}i:2;i:106481;}i:4581;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:106510;}i:4582;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:106510;}i:4583;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:54:"The DBMS_OUTPUT package has the following subprograms:";}i:2;i:106512;}i:4584;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:106566;}i:4585;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:106566;}i:4586;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:106566;}i:4587;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:106566;}i:4588;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:45:" DBMS_OUTPUT.DISABLE; Disables message output";}i:2;i:106570;}i:4589;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:106615;}i:4590;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:106615;}i:4591;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:106615;}i:4592;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:106615;}i:4593;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:144:" DBMS_OUTPUT.ENABLE(buffer_size IN INTEGER DEFAULT 20000); Enables message output. A NULL value of buffer_size represents unlimited buffer size.";}i:2;i:106619;}i:4594;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:106763;}i:4595;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:106763;}i:4596;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:106763;}i:4597;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:106763;}i:4598;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:112:" DBMS_OUTPUT.GET_LINE (line OUT VARCHAR2, status OUT INTEGER); Retrieves a single line of buffered information. ";}i:2;i:106767;}i:4599;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:106879;}i:4600;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:106879;}i:4601;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:106879;}i:4602;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:106879;}i:4603;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:113:" DBMS_OUTPUT.GET_LINES (lines OUT CHARARR, numlines IN OUT INTEGER); Retrieves an array of lines from the buffer.";}i:2;i:106883;}i:4604;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:106996;}i:4605;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:106996;}i:4606;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:106996;}i:4607;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:106996;}i:4608;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:" DBMS_OUTPUT.NEW_LINE; Puts an end-of-line marker";}i:2;i:107000;}i:4609;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:107049;}i:4610;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:107049;}i:4611;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:107049;}i:4612;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:107049;}i:4613;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:72:" DBMS_OUTPUT.PUT(item IN VARCHAR2); Places a partial line in the buffer.";}i:2;i:107053;}i:4614;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:107125;}i:4615;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:107125;}i:4616;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:107125;}i:4617;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:107125;}i:4618;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:69:" DBMS_OUTPUT.PUT_LINE(item IN VARCHAR2); Places a line in the buffer.";}i:2;i:107129;}i:4619;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:107198;}i:4620;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:107198;}i:4621;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:107198;}i:4622;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:107198;}i:4623;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:107200;}i:4624;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"Example";}i:2;i:107202;}i:4625;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:107209;}i:4626;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:107211;}i:4627;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:107212;}i:4628;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:135:"DECLARE
   lines dbms_output.chararr;
   num_lines number;
BEGIN
   -- enable the buffer with default size 20000
   dbms_output.enable;";}i:2;i:107212;}i:4629;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:170:"   dbms_output.put_line('Hello Reader!');
   dbms_output.put_line('Hope you have enjoyed the tutorials!');
   dbms_output.put_line('Have a great time exploring pl/sql!');";}i:2;i:107361;}i:4630;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:18:"   num_lines := 3;";}i:2;i:107539;}i:4631;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:43:"   dbms_output.get_lines(lines, num_lines);";}i:2;i:107561;}i:4632;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:87:"   FOR i IN 1..num_lines LOOP
      dbms_output.put_line(lines(i));
   END LOOP;
END;
/";}i:2;i:107608;}i:4633;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:107608;}i:4634;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:107708;}i:4635;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:107789;}i:4636;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:86:"Hello Reader!
Hope you have enjoyed the tutorials!
Have a great time exploring pl/sql!";}i:2;i:107789;}i:4637;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:40:"PL/SQL procedure successfully completed.";}i:2;i:107883;}i:4638;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:107928;}i:4639;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:24:"PL/SQL - Object Oriented";i:1;i:2;i:2;i:107928;}i:2;i:107928;}i:4640;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:107928;}i:4641;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:107928;}i:4642;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:438:"PL/SQL allows defining an object type, which helps in designing object-oriented database in Oracle. An object type allows you to crate composite types. Using objects allow you implementing real world objects with specific structure of data and methods for operating it. Objects have attributes and methods. Attributes are properties of an object and are used for storing an object's state; and methods are used for modeling its behaviors.";}i:2;i:107966;}i:4643;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:108404;}i:4644;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:108404;}i:4645;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:149:"Objects are created using the CREATE [OR REPLACE] TYPE statement. Below is an example to create a simple address object consisting of few attributes:";}i:2;i:108406;}i:4646;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:108556;}i:4647;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:155:"CREATE OR REPLACE TYPE address AS OBJECT
(house_no varchar2(10),
 street varchar2(30),
 city varchar2(20),
 state varchar2(10),
 pincode varchar2(10)
);
/
";}i:2;i:108556;}i:4648;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:108556;}i:4649;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:108731;}i:4650;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:108812;}i:4651;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:13:"Type created.";}i:2;i:108812;}i:4652;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:108812;}i:4653;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:121:"Let's create one more object customer where we will wrap attributes and methods together to have object oriented feeling:";}i:2;i:108830;}i:4654;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:108952;}i:4655;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:151:"CREATE OR REPLACE TYPE customer AS OBJECT
(code number(5),
 name varchar2(30),
 contact_no varchar2(12),
 addr address,
 member procedure display
);
/
";}i:2;i:108952;}i:4656;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:108952;}i:4657;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:109123;}i:4658;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:109204;}i:4659;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:14:"Type created.
";}i:2;i:109204;}i:4660;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:109224;}i:4661;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"Instantiating an Object";i:1;i:3;i:2;i:109224;}i:2;i:109224;}i:4662;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:109224;}i:4663;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:109224;}i:4664;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:245:"Defining an object type provides a blueprint for the object. To use this object, you need to create instances of this object. You can access the attributes and methods of the object using the instance name and the access operator (.) as follows:";}i:2;i:109260;}i:4665;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:109506;}i:4666;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:400:"DECLARE
   residence address;
BEGIN
   residence := address('103A', 'M.G.Road', 'Jaipur', 'Rajasthan','201301');
   dbms_output.put_line('House No: '|| residence.house_no);
   dbms_output.put_line('Street: '|| residence.street);
   dbms_output.put_line('City: '|| residence.city);
   dbms_output.put_line('State: '|| residence.state);
   dbms_output.put_line('Pincode: '|| residence.pincode);
END;
/
";}i:2;i:109506;}i:4667;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:109506;}i:4668;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:109932;}i:4669;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:110013;}i:4670;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:77:"House No: 103A
Street: M.G.Road
City: Jaipur
State: Rajasthan
Pincode: 201301";}i:2;i:110013;}i:4671;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:42:"PL/SQL procedure successfully completed.  ";}i:2;i:110102;}i:4672;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:110102;}i:4673;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:91:"Member MethodsHouse No: 103A
Street: M.G.Road
City: Jaipur
State: Rajasthan
Pincode: 201301";}i:2;i:110149;}i:4674;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:110240;}i:4675;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:110240;}i:4676;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:40:"PL/SQL procedure successfully completed.";}i:2;i:110242;}i:4677;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:110282;}i:4678;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:110284;}i:4679;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"Member Methods";i:1;i:3;i:2;i:110284;}i:2;i:110284;}i:4680;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:110284;}i:4681;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:110284;}i:4682;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:272:"Member methods are used for manipulating the attributes of the object. You provide the declaration of a member method while declaring the object type. The object body defines the code for the member methods. The object body is created using the CREATE TYPE BODY statement.";}i:2;i:110310;}i:4683;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:110582;}i:4684;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:110582;}i:4685;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:188:"Constructors are functions that return a new object as its value. Every object has a system defined constructor method. The name of the constructor is same as the object type. For example:";}i:2;i:110584;}i:4686;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:110773;}i:4687;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:73:"residence := address('103A', 'M.G.Road', 'Jaipur', 'Rajasthan','201301');";}i:2;i:110773;}i:4688;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:110773;}i:4689;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:93:"The comparison methods are used for comparing objects. There are two ways to compare objects:";}i:2;i:110851;}i:4690;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:110944;}i:4691;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:110944;}i:4692;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:110944;}i:4693;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:110944;}i:4694;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:333:" Map method: The Map method is a function implemented in such a way that its value depends upon the value of the attributes. For example, for a customer object, if the customer code is same for two customers, both customers could be the same and one. So the relationship between these two objects would depend upon the value of code.";}i:2;i:110948;}i:4695;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:111281;}i:4696;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:111281;}i:4697;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:111281;}i:4698;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:111281;}i:4699;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:201:" Order method: The Order methods implement some internal logic for comparing two objects. For example, for a rectangle object, a rectangle is bigger than another rectangle if both its sides are bigger.";}i:2;i:111285;}i:4700;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:111486;}i:4701;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:111486;}i:4702;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:111486;}i:4703;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:111488;}i:4704;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:16:"Using Map method";i:1;i:3;i:2;i:111488;}i:2;i:111488;}i:4705;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:111488;}i:4706;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:111488;}i:4707;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:77:"Let us try to understand above concepts using the following rectangle object:";}i:2;i:111516;}i:4708;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:111594;}i:4709;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:204:"CREATE OR REPLACE TYPE rectangle AS OBJECT
(length number,
 width number,
 member function enlarge( inc number) return rectangle,
 member procedure display,
 map member function measure return number
);
/";}i:2;i:111594;}i:4710;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:111594;}i:4711;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:111817;}i:4712;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:111898;}i:4713;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:14:"Type created. ";}i:2;i:111898;}i:4714;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:111898;}i:4715;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"Creating the type body: ";}i:2;i:111917;}i:4716;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:111942;}i:4717;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:185:"CREATE OR REPLACE TYPE BODY rectangle AS
   MEMBER FUNCTION enlarge(inc number) return rectangle IS
   BEGIN
      return rectangle(self.length + inc, self.width + inc);
   END enlarge;";}i:2;i:111942;}i:4718;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:151:"   MEMBER PROCEDURE display IS
   BEGIN
      dbms_output.put_line('Length: '|| length);
      dbms_output.put_line('Width: '|| width);
   END display;";}i:2;i:112139;}i:4719;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:130:"   MAP MEMBER FUNCTION measure return number IS
   BEGIN
      return (sqrt(length*length + width*width));
   END measure;
END;
/
";}i:2;i:112302;}i:4720;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:112302;}i:4721;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:112448;}i:4722;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:112529;}i:4723;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:18:"Type body created.";}i:2;i:112529;}i:4724;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:112529;}i:4725;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:58:"Now using the rectangle object and its member functions:  ";}i:2;i:112552;}i:4726;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:112611;}i:4727;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:191:"DECLARE
   r1 rectangle;
   r2 rectangle;
   r3 rectangle;
   inc_factor number := 5;
BEGIN
   r1 := rectangle(3, 4);
   r2 := rectangle(5, 7);
   r3 := r1.enlarge(inc_factor);
   r3.display;";}i:2;i:112611;}i:4728;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:111:"   IF (r1 > r2) THEN -- calling measure function
      r1.display;
   ELSE
      r2.display;
   END IF;
END;
/
";}i:2;i:112824;}i:4729;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:112824;}i:4730;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:112953;}i:4731;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:113034;}i:4732;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:37:"Length: 8
Width: 9
Length: 5
Width: 7";}i:2;i:113034;}i:4733;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:42:"PL/SQL procedure successfully completed.  ";}i:2;i:113081;}i:4734;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:113128;}i:4735;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:18:"Using Order method";i:1;i:3;i:2;i:113128;}i:2;i:113128;}i:4736;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:113128;}i:4737;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:113128;}i:4738;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:121:"Now, the same effect could be achieved using an order method. Let us recreate the rectangle object using an order method:";}i:2;i:113158;}i:4739;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:113280;}i:4740;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:163:"CREATE OR REPLACE TYPE rectangle AS OBJECT
(length number,
 width number,
 member procedure display,
 order member function measure(r rectangle) return number
);
/";}i:2;i:113280;}i:4741;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:113280;}i:4742;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:113460;}i:4743;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:113541;}i:4744;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:13:"Type created.";}i:2;i:113541;}i:4745;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:113541;}i:4746;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:23:"Creating the type body:";}i:2;i:113559;}i:4747;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:113583;}i:4748;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:192:"CREATE OR REPLACE TYPE BODY rectangle AS
   MEMBER PROCEDURE display IS
   BEGIN
      dbms_output.put_line('Length: '|| length);
      dbms_output.put_line('Width: '|| width);
   END display;";}i:2;i:113583;}i:4749;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:272:"   ORDER MEMBER FUNCTION measure(r rectangle) return number IS
   BEGIN
      IF(sqrt(self.length*self.length + self.width*self.width)> sqrt(r.length*r.length + r.width*r.width)) then
         return(1);
      ELSE
         return(-1);
      END IF;
   END measure;
END;
/";}i:2;i:113789;}i:4750;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:113789;}i:4751;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:114085;}i:4752;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:114166;}i:4753;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:18:"Type body created.";}i:2;i:114166;}i:4754;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:114166;}i:4755;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:"Using the rectangle object and its member functions:";}i:2;i:114189;}i:4756;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:114242;}i:4757;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:244:"DECLARE
   r1 rectangle;
   r2 rectangle;
BEGIN
   r1 := rectangle(23, 44);
   r2 := rectangle(15, 17);
   r1.display;
   r2.display;
   IF (r1 > r2) THEN -- calling measure function
      r1.display;
   ELSE
      r2.display;
   END IF;
END;
/";}i:2;i:114242;}i:4758;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:114242;}i:4759;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:114519;}i:4760;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:114600;}i:4761;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:62:"Length: 23
Width: 44
Length: 15
Width: 17
Length: 23
Width: 44";}i:2;i:114600;}i:4762;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:41:"PL/SQL procedure successfully completed.
";}i:2;i:114676;}i:4763;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:114723;}i:4764;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:31:"Inheritance for PL/SQL Objects:";i:1;i:3;i:2;i:114723;}i:2;i:114723;}i:4765;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:114723;}i:4766;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:114723;}i:4767;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:155:"PL/SQL allows creating object from existing base objects. To implement inheritance, the base objects should be declared as NOT FINAL. The default is FINAL.";}i:2;i:114766;}i:4768;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:114921;}i:4769;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:114921;}i:4770;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:192:"The following programs illustrate inheritance in PL/SQL Objects. Let us create another object named TableTop, which is inheriting from the Rectangle object. Creating the base rectangle object:";}i:2;i:114923;}i:4771;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:115116;}i:4772;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:179:"CREATE OR REPLACE TYPE rectangle AS OBJECT
(length number,
 width number,
 member function enlarge( inc number) return rectangle,
 NOT FINAL member procedure display) NOT FINAL
/
";}i:2;i:115116;}i:4773;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:115116;}i:4774;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:115311;}i:4775;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:115392;}i:4776;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:16:"Type created.   ";}i:2;i:115392;}i:4777;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:115392;}i:4778;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:"Creating the base type body:";}i:2;i:115413;}i:4779;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:115442;}i:4780;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:185:"CREATE OR REPLACE TYPE BODY rectangle AS
   MEMBER FUNCTION enlarge(inc number) return rectangle IS
   BEGIN
      return rectangle(self.length + inc, self.width + inc);
   END enlarge;";}i:2;i:115442;}i:4781;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:159:"   MEMBER PROCEDURE display IS
   BEGIN
      dbms_output.put_line('Length: '|| length);
      dbms_output.put_line('Width: '|| width);
   END display;
END;
/
";}i:2;i:115639;}i:4782;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:115639;}i:4783;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:115816;}i:4784;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:115897;}i:4785;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:18:"Type body created.";}i:2;i:115897;}i:4786;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:115897;}i:4787;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:35:"Creating the child object tabletop:";}i:2;i:115920;}i:4788;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:115956;}i:4789;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:121:"CREATE OR REPLACE TYPE tabletop UNDER rectangle
(  
   material varchar2(20);
   OVERRIDING member procedure display
)
/
";}i:2;i:115956;}i:4790;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:115956;}i:4791;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:116093;}i:4792;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:116174;}i:4793;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:13:"Type created.";}i:2;i:116174;}i:4794;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:116174;}i:4795;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:53:"Creating the type body for the child object tabletop:";}i:2;i:116192;}i:4796;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:116246;}i:4797;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:241:"CREATE OR REPLACE TYPE BODY tabletop AS
OVERRIDING MEMBER PROCEDURE display IS
BEGIN
   dbms_output.put_line('Length: '|| length);
   dbms_output.put_line('Width: '|| width);
   dbms_output.put_line('Material: '|| material);
END display;
/  ";}i:2;i:116246;}i:4798;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:116246;}i:4799;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:116506;}i:4800;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:116587;}i:4801;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:18:"Type body created.";}i:2;i:116587;}i:4802;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:116587;}i:4803;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:51:"Using the tabletop object and its member functions:";}i:2;i:116610;}i:4804;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:116662;}i:4805;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:153:"DECLARE
   t1 tabletop;
   t2 tabletop;
BEGIN
   t1:= tabletop(20, 10, 'Wood');
   t2 := tabletop(50, 30, 'Steel');
   t1.display;
   t2.display;
END;
/
";}i:2;i:116662;}i:4806;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:116662;}i:4807;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:116839;}i:4808;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:116920;}i:4809;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:72:"Length: 20
Width: 10
Material: Wood
Length: 50
Width: 30
Material: Steel";}i:2;i:116920;}i:4810;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:42:"PL/SQL procedure successfully completed.  ";}i:2;i:117006;}i:4811;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:117053;}i:4812;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:26:"Abstract Objects in PL/SQL";i:1;i:3;i:2;i:117053;}i:2;i:117053;}i:4813;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:117053;}i:4814;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:117053;}i:4815;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:205:"The NOT INSTANTIABLE clause allows you to declare an abstract object. You cannot use an abstract object as it is; you will have to create a subtype or child type of such objects to use its functionalities.";}i:2;i:117091;}i:4816;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:117296;}i:4817;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:117296;}i:4818;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"For example";}i:2;i:117298;}i:4819;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:117310;}i:4820;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:158:"CREATE OR REPLACE TYPE rectangle AS OBJECT
(length number,
 width number,
 NOT INSTANTIABLE NOT FINAL MEMBER PROCEDURE display) 
 NOT INSTANTIABLE NOT FINAL
/";}i:2;i:117310;}i:4821;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:117310;}i:4822;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:"When the above code is executed at SQL prompt, it produces the following result:";}i:2;i:117483;}i:4823;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:117564;}i:4824;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:13:"Type created.";}i:2;i:117564;}i:4825;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:117582;}i:4826;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:117582;}}